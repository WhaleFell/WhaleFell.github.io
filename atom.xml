<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>😊落落のBlog😊</title>
  
  <subtitle>落落的迷思念想,一个存放在乌托邦之上的笔记本。</subtitle>
  <link href="https://www.whaleluo.top/atom.xml" rel="self"/>
  
  <link href="https://www.whaleluo.top/"/>
  <updated>2024-06-11T10:52:19.000Z</updated>
  <id>https://www.whaleluo.top/</id>
  
  <author>
    <name>WhaleFall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>E5 神教装机指南</title>
    <link href="https://www.whaleluo.top/e5-cpu-computer-machine/"/>
    <id>https://www.whaleluo.top/e5-cpu-computer-machine/</id>
    <published>2024-06-11T10:52:19.000Z</published>
    <updated>2024-06-11T10:52:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="E5-神教装机指南"><a href="#E5-神教装机指南" class="headerlink" title="E5 神教装机指南"></a>E5 神教装机指南</h1><p>说一下 E5 的特点：</p><ol><li>V3 的优势在于能鸡血，V4 不能鸡血。鸡血的作用是保持最高主频不是超频，这点别混。鸡血后比 V4 好。不鸡血是肯定没有 V4 好。这就是代价.</li><li>主板问题，X99 的通病在于主板供电散热，99% 用不久的主板都是散热没弄好导致的。所以加小风扇很重要。很重要.</li><li>CPU 问题，玩网游单开选 E3，多开选 E5，游戏吃不下 U 的那么多核心。最直接的后果就是 6 核爆满十几核围观，导致总占用率只有可怜的一点点</li><li>功耗问题，鸡血会增加功耗，但是功耗和性能是成正比的。关成 5500 一样的核心按照日常使用也高不了多少</li><li>显卡问题，玩游戏显卡占用低 CPU 占用又低的话打开框框看一下是不是个别核心拉满其他核心在摸鱼，如果不是的话那就是内存的锅不是 CPU。东瓜有测试过，在内存保障充足下 2696 玩游戏甚至能拉满 4090 显卡</li><li>内存问题，网游除了 U 和显卡就很强调 <strong>内存频率</strong>，这 3 个配件有木桶效应。5500 的 3600x2 去跟 E5 的 2133x2 比高了几个档次，频率不够那就通道来凑，4 条 2133 的表现跟 2 条 3600 差不多。但价格更低。E5 不上 <strong>4 通道</strong> 连 1060 显卡都难喂满，帧率必然上不去或者波动特别大 (PS: 科脑 X99 这类盖板是双通道不是四通道。买主板的时候要注意）</li></ol><p>参数一览:</p><p><img src="/E5-CPU-Computer-Machine.png" class="lazy" data-srcset="/E5-CPU-Computer-Machine.png" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif"></p><p>X99 平台主板品牌: 精粤 华南 (售后好) 科脑</p><p>AMD Ryzen 5 5000U <code>6core 12hyperthread</code> CPU 跑分: 单核 single 476.6 multiple 多核 2502.9</p><p>X99 主板: 华南 X99-QD4</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;E5-神教装机指南&quot;&gt;&lt;a href=&quot;#E5-神教装机指南&quot; class=&quot;headerlink&quot; title=&quot;E5 神教装机指南&quot;&gt;&lt;/a&gt;E5 神教装机指南&lt;/h1&gt;&lt;p&gt;说一下 E5 的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;V3 的优势在于能鸡血，V4 不能</summary>
      
    
    
    
    <category term="Hardware" scheme="https://www.whaleluo.top/categories/Hardware/"/>
    
    
    <category term="Hardware" scheme="https://www.whaleluo.top/tags/Hardware/"/>
    
    <category term="电脑装机" scheme="https://www.whaleluo.top/tags/%E7%94%B5%E8%84%91%E8%A3%85%E6%9C%BA/"/>
    
    <category term="E5" scheme="https://www.whaleluo.top/tags/E5/"/>
    
    <category term="硬件" scheme="https://www.whaleluo.top/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 逆向工程小白指南</title>
    <link href="https://www.whaleluo.top/javascript/javascript-reverse-engineering/"/>
    <id>https://www.whaleluo.top/javascript/javascript-reverse-engineering/</id>
    <published>2024-04-28T16:28:59.000Z</published>
    <updated>2023-04-28T16:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-逆向工程小白指南"><a href="#JavaScript-逆向工程小白指南" class="headerlink" title="JavaScript 逆向工程小白指南"></a>JavaScript 逆向工程小白指南</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Thx the author of the following articles:</p><ol><li><a href="https://github.com/JSREI">https://github.com/JSREI</a></li></ol><h2 id="前置知识-Pre-requisite"><a href="#前置知识-Pre-requisite" class="headerlink" title="前置知识 (Pre-requisite)"></a>前置知识 (Pre-requisite)</h2><h3 id="事件循环-event-loop"><a href="#事件循环-event-loop" class="headerlink" title="事件循环 event loop"></a>事件循环 event loop</h3><p>定义: 在 Chrome V8 引擎中, 主线程不断地重复获取执行信息, 再执行. 不断循环的机制称为事件循环.</p><p>为什么:</p><ul><li>JS 是单线程的</li><li>再处理异步操作的时候需要事件循环机制</li></ul><p>概念:</p><ul><li>堆(Heap): 大块非结构化内存区域, 储存对象,数据.</li><li>栈(Stack): 调用栈 储存该次循环待主程序执行的任务</li><li>队列(Queue): 事件队列, 先进先出被推入调用栈中</li></ul><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering.png"></p><h3 id="原型链-Prototype-Chain"><a href="#原型链-Prototype-Chain" class="headerlink" title="原型链 (Prototype Chain)"></a>原型链 (Prototype Chain)</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-1.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-1.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-1.png"></p><h3 id="浏览器储存-Browser-Storage-ˈstoːrɪdʒ"><a href="#浏览器储存-Browser-Storage-ˈstoːrɪdʒ" class="headerlink" title="浏览器储存 (Browser Storage [&#x2F;ˈstɔːrɪdʒ&#x2F;])"></a>浏览器储存 (Browser Storage [&#x2F;ˈstɔːrɪdʒ&#x2F;])</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-3.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-3.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-3.png"></p><p>Cookie:</p><ul><li>存储在客户端的小型数据文件。</li><li>每次 HTTP 请求时，浏览器会自动发送 cookie 给服务器。</li><li>通常用于存储用户偏好或登录状态。</li><li>安全性较低，容易受到 CSRF 等攻击。(篡改 overwriting)</li><li>存储大小限制约为 4KB。</li><li>默认不支持跨越, 需要配置 nginx 和前端允许传递跨域 cookie.</li></ul><p>Session:</p><ul><li>存储在服务器端的数据结构。</li><li>通过在客户端 cookie 中存储唯一的 session ID 来识别用户。<code>set-cookie: sessionID=123456</code> 后端 <code>123456</code> –&gt; <code>&#123; user: &#39;wf&#39;, age: 18 &#125;</code></li><li>可以存储更多的数据，但会增加服务器的存储压力。</li><li>比 cookie 更安全，因为数据不直接暴露在客户端。</li></ul><p>Token:</p><ul><li>服务端生成的一串加密的字符串，客户端在每次请求时发送给服务器。</li><li>不依赖于 cookie，因此可以用于移动应用或跨域请求。</li><li>可以包含用户的身份信息和权限数据。</li><li>通常用于 <strong>实现无状态</strong> 的身份验证。</li><li>简而言之，cookie 和 session 通常结合使用，通过在客户端存储 session ID 来维持用户状态，而 token 则是一种更灵活的方式，可以支持不同的客户端和跨域请求。</li></ul><p>JWT (JSON Web Token):</p><p>structure: <code>header.payload.signature</code></p><p>传递 header: <code>&#123;Authorization: &#39;token&#39;&#125;</code></p><h3 id="跨域资源共享-Cross-Origin-Resource-Sharing-CORS"><a href="#跨域资源共享-Cross-Origin-Resource-Sharing-CORS" class="headerlink" title="跨域资源共享 Cross-Origin Resource Sharing (CORS)"></a>跨域资源共享 Cross-Origin Resource Sharing (CORS)</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-4.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-4.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-4.png"></p><h3 id="JavaScript-模块化-打包-捆绑器-Module-Bundler-ˈbvndəl"><a href="#JavaScript-模块化-打包-捆绑器-Module-Bundler-ˈbvndəl" class="headerlink" title="JavaScript 模块化 打包 捆绑器 (Module Bundler[&#x2F;ˈbʌndəl&#x2F;])"></a>JavaScript 模块化 打包 捆绑器 (Module Bundler[&#x2F;ˈbʌndəl&#x2F;])</h3><ol><li><p>Webpack</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-5.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-5.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-5.png"></p><p>Note: 通常使用 babel 作为 webpack 的 compiler，将 ES6 语法转换为 ES5 语法。</p></li></ol><h3 id="What-is-AST-Abstract-Syntax-Tree"><a href="#What-is-AST-Abstract-Syntax-Tree" class="headerlink" title="What is AST (Abstract Syntax Tree)"></a>What is AST (Abstract Syntax Tree)</h3><p>Generate by chatGPT:</p><p>AST 是抽象语法树（Abstract Syntax Tree）的缩写。它是在计算机科学中用于表示 <strong>编程语言的语法结构</strong> 的一种 <strong>数据结构</strong>。抽象语法树是源代码在编译或解析过程中的<strong>中间表示形式</strong>，它捕捉了源代码的结构和语义信息。</p><p>在编程过程中，源代码首先会被 <strong>解析器或编译器</strong> 读入，并生成对应的 <strong>抽象语法树</strong>。抽象语法树可以看作是源代码的树状表示，其中每个节点代表源代码中的一个语法构造（例如表达式、语句、函数定义等），而节点之间的关系代表了语法结构中的层次关系和依赖关系。</p><p>通过使用抽象语法树，编译器、解释器和其他代码分析工具可以对源代码进行静态分析、语法检查、语义分析、优化等操作。抽象语法树在编程语言领域中具有广泛的应用，是理解和处理源代码的重要工具之一。</p><h3 id="Function-call-stack-函数调用栈"><a href="#Function-call-stack-函数调用栈" class="headerlink" title="Function call stack 函数调用栈"></a>Function call stack 函数调用栈</h3><p>调用栈是解释器（比如浏览器中的 JavaScript 解释器）<strong>追踪函数执行流</strong> 的一种机制。当执行环境中调用了<strong>多个函数</strong>时，通过这种机制，我们能够追踪到<strong>哪个函数正在执行</strong>，执行的函数体中又调用了哪个函数。</p><ol><li>每调用一个函数，解释器就会把该函数添加<strong>进调用栈</strong>并开始执行。</li><li>正在调用栈中执行的函数还调用了其他函数，那么新函数也将会<strong>被添加进调用栈</strong>，一旦这个函数被调用，便会立即执行。</li><li>当前函数执行完毕后，解释器将其<strong>清出调用栈</strong>，继续执行当前执行环境下的剩余的代码。</li><li>当分配的调用栈空间被占满时，会引发“堆栈溢出”错误。 <strong>stack overflow</strong></li></ol><p>调用栈是动态变化的. 在写递归(Recursive)函数时, 一定要注意递归的终止条件, 否则会导致调用栈溢出.</p><!-- prettier-ignore --><pre><code class="hljs javascript"><span class="hljs-comment">// 一开始调用栈是空的</span><span class="hljs-comment">// the call stack is empty at the beginning</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">nestedCall</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;nested call&#x27;</span>)  <span class="hljs-comment">// 依次把执行的函数放入栈中</span>  <span class="hljs-comment">// put the executed function into the stack one by one</span>  <span class="hljs-title function_">nestedFunc1</span>(    <span class="hljs-title function_">nestedFunc2</span>(       <span class="hljs-title function_">nestedFunc3</span>(        <span class="hljs-comment">// 如果执行到 nestedFunc3 内部, 那么调用栈会是这样的 </span>        <span class="hljs-comment">// if the execution reaches inside nestedFunc3, the call stack will look like this:</span>        <span class="hljs-comment">// call stack: (栈顶) nestedFunc3 -&gt; nestedFunc2 -&gt; nestedFunc1 -&gt; nestedCall (栈底)</span>        <span class="hljs-comment">// 然后依次从栈顶开始调用函数</span>        <span class="hljs-comment">// then call the functions from the top of the stack</span>        <span class="hljs-string">&#x27;sasa&#x27;</span>        )       , <span class="hljs-number">21</span>),     &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;  )&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">mian</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-title function_">nestedCall</span>()  <span class="hljs-comment">// 执行完 nestedCall 后, 调用栈会是这样的 因为栈是先进后出的</span>  <span class="hljs-comment">// after nestedCall is executed, the call stack will look like this:</span>  <span class="hljs-comment">// call stack: (栈顶) main (栈底)</span>&#125;<span class="hljs-comment">// 执行完所有代码后, 调用栈会是空的</span><span class="hljs-comment">// after all the code is executed, the call stack will be empty</span></code></pre><!-- prettier-ignore-end --><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JS Content stack"></p><h2 id="Chrome-DevTools-Chrome-开发者工具使用"><a href="#Chrome-DevTools-Chrome-开发者工具使用" class="headerlink" title="Chrome DevTools (Chrome 开发者工具使用)"></a>Chrome DevTools (Chrome 开发者工具使用)</h2><p>Chrome 开发者工具(Chrome Development Tools)是一套内置于 Google Chrome 浏览器中的 Web 开发和调试工具。</p><p>Part:</p><ul><li>Elements (元素)</li><li>Console (控制台)</li><li>Sources (源代码)</li><li>Network (网络)</li><li>Performance (性能)</li><li>Memory (内存)</li><li>Application (应用)</li><li>Security (安全)</li><li>Audits[&#x2F;ˈɔːdɪt&#x2F;] (审计)</li></ul><p>Keyboard shortcuts:</p><ul><li><code>Ctrl + Shift + I</code> 打开开发者工具</li></ul><p>Network filter: 网络请求过滤器:</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-6.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-6.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-6.png"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-7.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-7.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-7.png"></p><p>Note: 按住 shift 可以查看请求间的 relier 依赖关系</p><p>Source panel: 源代码面板</p><p>conditional breakpoints: 条件断点</p><p>XHR&#x2F;Fetch 网络请求<br>Dom Breakpoints: DOM 断点<br>Global Breakpoints: 全局断点<br>Event[&#x2F;ɪˈvent&#x2F;] Listener Breakpoints: 事件监听器断点</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-10.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-10.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-10.png"></p><p>override: 重写一个文件, 代替网络请求. 将网络文件代理到本地. 类似功能的 Chrome 插件有 <code>ReRes</code> 和 <code>Requestly</code></p><p>snippet: 代码片段面板</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-8.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-8.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-8.png"></p><p>breakpoint debug: 断点调试按钮</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-9.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-9.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-9.png"></p><ol><li>resume&#x2F;pause script execution<br>恢复&#x2F;暂停脚本执行</li><li>step over next function call<br>跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。</li><li>step into next function call<br>跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。</li><li>step out of current function<br>跳出当前函数</li><li>deactivate breakpoints<br>停用断点</li><li>don‘t pause on exceptions<br>不暂停异常捕获</li></ol><p>Console: 控制台</p><p>output log: 输出日志</p><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<span class="hljs-comment">// 记录函数调用的次数</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&quot;The number of times this line has been called&quot;</span>);<span class="hljs-comment">// 断言</span><span class="hljs-variable language_">console</span>.<span class="hljs-property">assert</span>;<span class="hljs-comment">// output table: perfect for displaying arrays or objects 方便查看 structed data 结构化数据</span><span class="hljs-keyword">let</span> data = [  &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;,  &#123; <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;bar&quot;</span> &#125;,];<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(data);<span class="hljs-comment">// copy data to clipboard</span><span class="hljs-title function_">copy</span>(data);<span class="hljs-comment">// clear console</span><span class="hljs-title function_">clear</span>();<span class="hljs-comment">// $_: last evaluated expression 最后一次记录的表达式</span><span class="hljs-comment">// $: as a shortcut for `document.querySelector()`</span>$(<span class="hljs-string">&quot;.my-element-class&quot;</span>);<span class="hljs-comment">// xpath selector</span>$x(<span class="hljs-string">&quot;//h1&quot;</span>);</code></pre><h2 id="抓包工具-Packet-Sniffer"><a href="#抓包工具-Packet-Sniffer" class="headerlink" title="抓包工具 (Packet Sniffer)"></a>抓包工具 (Packet Sniffer)</h2><p>Charles [&#x2F;tʃɑ:lz&#x2F;]: cross-platform 一款抓包工具，可以用来查看手机端和电脑端的网络请求，查看请求头，请求体，响应头，响应体等信息。</p><h2 id="TemperMonkey-Hook"><a href="#TemperMonkey-Hook" class="headerlink" title="TemperMonkey Hook"></a>TemperMonkey Hook</h2><p>TemperMonkey 是一款浏览器插件，可以用来自定义网页的行为，可以用来修改网页的内容，添加新的功能等。</p><p>使用 TemperMonkey Hook <code>window.btoa()</code> 函数，将字符串转换为 base64 编码：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-11.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-11.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-11.png"></p><p>Check if a function is native, if not, it has been hooked.<br>反 hook 的思路: 判断一个函数是否是 native 函数, 如果不是就证明被 hook 过了.</p><pre><code class="hljs javascript"><span class="hljs-comment">// `String.indexOf()` returns the position of the first occurrence of a specified value in a string. if not found, return -1.</span><span class="hljs-keyword">if</span> ((<span class="hljs-built_in">eval</span> + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;[native code]&quot;</span>) === -<span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// eval is not native</span>  <span class="hljs-comment">// eval function has been hooked</span>&#125;</code></pre><h2 id="Stop-infinite-Debugger-阻止无限调试"><a href="#Stop-infinite-Debugger-阻止无限调试" class="headerlink" title="Stop infinite Debugger 阻止无限调试"></a>Stop infinite Debugger 阻止无限调试</h2><p>解决恶心你 阻止你进行调试的无限 debugger, 一般用于反爬虫.</p><p>Solution n. &#x2F; Resolve v.:</p><ol><li><p>Deactivate breakpoints: 禁用所有断点</p></li><li><p>Never pause here: 禁用某处断点</p></li><li><p>conditional breakpoints: 条件断点</p></li><li><p>利用中间人工具替换字符串: Replace strings with man-in-the-middle tools</p><ul><li><code>fiddler</code> 写 js script 替换</li><li><code>mitmproxy</code> 写 python script 替换</li><li><code>reres</code> or <code>override</code> 替换成本地文件</li><li>重写并置空关键函数</li></ul></li><li><p><strong>出现 debugger 后</strong> 置空 <code>Function.prototype.constructor</code> 函数构造器.</p></li></ol><pre><code class="hljs javascript"><span class="hljs-comment">// 在出现 debugger 后 执行</span><span class="hljs-comment">// when debugger is triggered, execute following code</span><span class="hljs-comment">// can clear the `debugger;` in the function</span><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;<span class="hljs-comment">// but only works if following statement is true</span><span class="hljs-comment">// 只有在函数 object 的构造器指向 Function 基类时才有效</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span></code></pre><p>刷新后请求的 js 被加入了查询参数, 导致 breakpoint 失效的情况: 通过 <code>reres</code> 扩展与本地文件做一个映射. loading 中快速按 esc 取消 cancel 掉请求.</p><h2 id="快速定位关键点-Quickly-Locate-Key-Points"><a href="#快速定位关键点-Quickly-Locate-Key-Points" class="headerlink" title="快速定位关键点 (Quickly Locate Key Points)"></a>快速定位关键点 (Quickly Locate Key Points)</h2><p>通过使用常见加密算法的 hook, 快速定位到加密解密的关键点. 不用分析大段代码.</p><h3 id="快速定位-–-搜索关键字-Search-Keywords"><a href="#快速定位-–-搜索关键字-Search-Keywords" class="headerlink" title="快速定位 – 搜索关键字 (Search Keywords)"></a>快速定位 – 搜索关键字 (Search Keywords)</h3><ol><li>中间人的全局搜索 fidder, mitmproxy</li><li>开发者工具中的全局搜索. (Global Search In Devtools)</li></ol><h3 id="断点调试-Breakpoint-Debugging"><a href="#断点调试-Breakpoint-Debugging" class="headerlink" title="断点调试 (Breakpoint Debugging)"></a>断点调试 (Breakpoint Debugging)</h3><p>XHR&#x2F;DOM&#x2F;Event</p><h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><p>Hook 常用的加解码函数:</p><ol><li>Base64: <code>window.btoa()</code> <code>window.atob()</code></li><li>JSON stringify: <code>JSON.stringify()</code></li><li>set-cookie: <code>document.cookie</code></li><li>eval: <code>eval()</code> evaluate v. 评估</li><li>Websocket: <code>WebSocket.prototype.send = ()=&gt;&#123;&#125;</code></li></ol><p>Hook 常用方法:</p><ol><li>copy raw function and override: 复制原函数并重写</li><li>Object.defineProperty: 重写属性, getter, setter</li><li>原型链</li></ol><p>Hook inject script Time: 代码注入时期, 当页面加载完成时</p><h3 id="Analysis-əˈnaeləsɪs"><a href="#Analysis-əˈnaeləsɪs" class="headerlink" title="Analysis [&#x2F;əˈnæləsɪs&#x2F;]"></a>Analysis [&#x2F;əˈnæləsɪs&#x2F;]</h3><ol><li>Elements Event Listeners: 元素事件监听器</li><li>Network type initator: 网络请求的发起者</li><li>Console log XMLHttpRequest: 控制台输出网络请求</li></ol><p>分析流程:</p><ol><li>抓包分析哪些参数是加密的.</li><li>搜索参数</li><li>查看 Network 的 Initiator 发起者</li><li>xhr breakpoint 网络断点</li><li>hook 逻辑</li><li>分析加密</li><li>补全加密逻辑</li></ol><h2 id="Code-obfuscation-代码混淆"><a href="#Code-obfuscation-代码混淆" class="headerlink" title="Code obfuscation 代码混淆"></a>Code obfuscation 代码混淆</h2><ul><li>代码压缩: 去除空格 换行</li><li>代码加密: eval emscripten WebAssembly</li><li>代码混淆: 变量 常量 控制流扁平 调试保护</li></ul><p><code>eval(var a = 1; var b = 2; console.log(a + b);)</code></p><p>eval 执行里面被混淆的函数, 还原也很简单, 形同虚设.</p><p>Emscripten: C&#x2F;C++ to JavaScript <code>asm.js</code></p><p>通过 Emscripten 可以将 C&#x2F;C++ 代码编译为 JavaScript 代码, 从而实现在浏览器中运行 C&#x2F;C++ 代码的功能。</p><p>WebAssembly: 一种新型的低级 <strong>字节码格式</strong>，旨在提供一种高效的、可移植的、安全的二进制格式，以用于 Web 平台。resulte: wasm 文件 调用: JS</p><p>混淆技术: Obfuscation Techniques</p><ul><li>变量混淆</li><li>字符串混淆</li><li>属性加密: Obj k-v 加密转发</li><li>控制流扁平化<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-15.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-15.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-15.png"></li><li>僵尸代码注入: 注入一些无用代码, 干扰判断</li><li>代码压缩</li><li>反调试: infinite debugger | 环境检测 | 置空 <code>console.log</code> 禁用控制台输出 | 格式化后卡死</li><li>多态变异: 一旦被调用, 立马变成不同形式的代码, 但保证功能完全一致, 避免代码被动态分析</li><li>锁定域名: 降低被模拟风险</li><li>反格式化</li><li>特殊编码</li></ul><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-12.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-12.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-12.png"></p><p>jsfuck: 通过仅使用六个字符 <code>[]()!+</code> 来编写 JavaScript 代码的一种技术。</p><p>javascript-obfuscator: 代码混淆工具</p><pre><code class="hljs shell">pnpm initpnpm install -D javascript-obfuscator</code></pre><p>use:</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-13.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-13.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-13.png"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-14.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-14.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-14.png"></p><p>处理混淆后的代码:</p><p>e.g:</p><ol><li><p>emoji 颜文字编码<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-1.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-1.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p></li><li><p>操作原型链</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-2.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-2.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-3.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-3.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-4.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-4.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p></li><li><p>eval<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-5.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-5.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p></li><li><p>严重混淆<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-6.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-6.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p></li></ol><h2 id="常见加解密-编码解码-算法"><a href="#常见加解密-编码解码-算法" class="headerlink" title="常见加解密 编码解码 算法"></a>常见加解密 编码解码 算法</h2><blockquote><p>密码学是一个很庞大的分支, 对数学要求很高.</p></blockquote><h3 id="Ascii-码"><a href="#Ascii-码" class="headerlink" title="Ascii 码"></a>Ascii 码</h3><p><strong>ASCII</strong> [&#x2F;ˈæskiː&#x2F;](American Standard Code For Information Interchange): 美国标准信息交换代码, 一种将字符编码成<strong>二进制</strong>的方式. 用于显示现代英语以及其他的一些西欧语言.</p><p>在 Pytion 中 使用 <code>ord()</code> 获取字符的 ASCII 码.</p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>将二进制数据转换为文本数据, 对于非二进制方式都先转成二进制, 连续使用 6bit 计算十进制的值, 对应检索码表.</p><p>特征: 以 <code>==</code> 结尾</p><p>引用: 嵌入 base64 格式图片 | 有些厂商非定制特定的码表达到 obfuscation 的目的</p><h3 id="MD5-信息指纹"><a href="#MD5-信息指纹" class="headerlink" title="MD5 信息指纹"></a>MD5 信息指纹</h3><p>MD5 计算做 Hash 校验, 对数据的完整性进行校验.</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-7.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-7.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p><p>Python Code:</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-8.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-8.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p><p>MD5 已经不具备抗碰撞性了, 不再是一种安全的散列算法, 真的不安全了吗? 查彩虹表(Hash Table) 有没有这个值.</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-9.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-9.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p><h3 id="AES-Advanced-Encryption-Standard-高级加密标准-对称加密"><a href="#AES-Advanced-Encryption-Standard-高级加密标准-对称加密" class="headerlink" title="AES (Advanced Encryption Standard) 高级加密标准 对称加密"></a>AES (Advanced Encryption Standard) 高级加密标准 对称加密</h3><p>用于替代原来的 DES(Data Encryption Standard) 数据加密标准. AES 是一种<strong>对称加密算法</strong>, 使用相同的密钥进行加密和解密. (只有一个密钥)</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-10.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-10.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p><p>Python 加解密库: Pycrpto</p><p>非对称加密: RSA(Rivest-Shamir-Adleman): 有公钥私钥两种密钥, 避免了密钥传输过程中的泄露问题.</p><h2 id="控制流平坦化-Control-Flow-Flattening"><a href="#控制流平坦化-Control-Flow-Flattening" class="headerlink" title="控制流平坦化 (Control Flow Flattening)"></a>控制流平坦化 (Control Flow Flattening)</h2><p>通过引入<strong>状态机</strong>(根据条件的值做出相应的动作)与循环，破坏代码上下文之间的阅读连续性和代码块之间的关联性，将若干个分散的小整体整合成一个巨大的循环体。无法还原成原来具体的函数。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-15.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-15.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="JavaScript-Reverse-Engineering-15.png"></p><p>目的 Purpose:</p><ol><li>无法以函数为单位的调试方法，大幅度增加调试难度。</li><li>降低代码运行效率，提高爬虫运行时执行 js 的资源成本.</li><li>可根据 js 运行时检测到的某些因素自由跳转到蜜罐或跳出代码执行.</li></ol><p>实现方法:</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-11.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-11.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-12.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/JavaScript-Reverse-Engineering-p2-12.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="alt text"></p><ol><li>大量的 switch case 语句 模拟状态机分发代码</li><li>大量的 if else 语句</li><li>多维数组</li><li>数值计算比较</li></ol><p>混淆原理 Obfuscation Principle:</p><p>通过 AST (Abstract Syntax Tree) 抽象语法树，将代码中的函数、变量、语句等元素转换为树状结构，再通过对树状结构的提取, 重新组合, 实现代码的混淆。</p><p>ATSexplorer: AST 可视化工具 <a href="https://astexplorer.net/">https://astexplorer.net/</a></p><p>应对三部曲:</p><ol><li><p><strong>全局观察:</strong><br>大致观察每一个代码结构，是否有类似于 dom 操作的代码，是否为纯计算型的循环体，是否有 try-catch 异常捕获结构。</p></li><li><p><strong>整体分析与载入:</strong><br>断点定于 while 开头部分(状态机跳转判断),<br>断点定于 try 代码体第一行, while 循环体整体取出构造原始函数.</p></li><li><p><strong>构造函数</strong><br>查缺补漏，在运行的过程中通过不断地运行报错，补充缺失的函数或者数据.</p></li></ol><p>通过 AST 增强代码可读性: via AST to enhance code readability.</p><p>通过 <code>recast</code> 库将代码转换为 AST 树, 通过 AST 树的遍历, 逐步还原代码, 增强代码可读性.</p><p>switch case 语句还原, 每个 case 打印每个 case 的代码, 还原每个 case 的执行顺序.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-逆向工程小白指南&quot;&gt;&lt;a href=&quot;#JavaScript-逆向工程小白指南&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 逆向工程小白指南&quot;&gt;&lt;/a&gt;JavaScript 逆向工程小白指南&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/tags/JavaScript/"/>
    
    <category term="Reverse" scheme="https://www.whaleluo.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>程序员常用单词词汇表</title>
    <link href="https://www.whaleluo.top/coding-english-world/"/>
    <id>https://www.whaleluo.top/coding-english-world/</id>
    <published>2024-04-25T11:37:48.000Z</published>
    <updated>2024-04-25T11:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员常用词汇表"><a href="#程序员常用词汇表" class="headerlink" title="程序员常用词汇表"></a>程序员常用词汇表</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><p>whole - 整个</p>]]></content>
    
    
    <summary type="html">程序员常用单词词汇表</summary>
    
    
    
    <category term="Coding" scheme="https://www.whaleluo.top/categories/Coding/"/>
    
    
    <category term="Coding" scheme="https://www.whaleluo.top/tags/Coding/"/>
    
    <category term="English" scheme="https://www.whaleluo.top/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>GIT 安全使用指南</title>
    <link href="https://www.whaleluo.top/github-security/"/>
    <id>https://www.whaleluo.top/github-security/</id>
    <published>2024-04-03T08:36:23.000Z</published>
    <updated>2024-04-03T08:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-安全使用指南"><a href="#Git-安全使用指南" class="headerlink" title="Git 安全使用指南"></a>Git 安全使用指南</h1><p>每时每刻，网络上成千上万的机器人贪婪的检索 GitHub，这包括开源软件 Attacker, Hacker ,甚至于受国家政府支持的 Attacker。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="开源供应链攻击（Open-source-supply-chain-attack）"><a href="#开源供应链攻击（Open-source-supply-chain-attack）" class="headerlink" title="开源供应链攻击（Open source supply chain attack）"></a>开源供应链攻击（Open source supply chain attack）</h3><p>近年来，<strong>供应链攻击事件</strong> 不断频发。过去一年中，恶意软件包上传到各种公共包管理库的事件数量呈爆炸式增长，这表明攻击者越来越青睐这种初始访问策略。根据软件供应链管理公司 Sonatype 的数据，在各个开源生态系统中检测到的恶意软件包数量同比增长了两倍。</p><p>开源软件供应链指的是广泛使用的第三方库、框架、组件等。例如 Python 的 fastapi、flask、requests 等，JavaScript 的 vue3、express、axios、lodash 等，Kubernetes，Docker，等服务工具。这些都是网络基础设施的重要组成部分。</p><p>幸运的是，这些网络基础设施都是 Open Source 的，任何人都能对其代码进行 review。但黑客也会利用这一点，用自己的 contributor 身份，抑或是盗取具有 contributor permission 账号的 cookie，巧妙地向开源软件下毒，这种下毒方式短时间内不会立即发现，随着软件依赖库的更新被分发到世界各地的互联网关键设施，黑客就能进出自由的控制政府、企业、个人的网络设备。</p><p>例如开发者可以通过修改 Python 的 dependency 的 requirements.txt ，当使用者下载并运行时，攻击开始了。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">aiohttp&gt;</span><span class="language-bash">=3.6.0,&lt;3.9.0</span><span class="hljs-meta prompt_"># </span><span class="language-bash">恶意软件包 透过冒充的域名 pythonhosted.org 的网站下载</span>https://files.pythonhosted.org/packages/18/93/1f005bbe044471a0444a82cdd7356f5120b9cf94fe2c50c0cdbf28f1258b/aiohttp-3.9.3.tar.gz</code></pre><p>所以作为开发者，我们需要时刻保持警惕，不要随意下载未知的依赖库，尽可能使用官方源进行下载。有条件就进行 code review，或者使用一些安全工具进行扫描。</p><h3 id="开源隐私泄露（Open-source-privacy-leak）"><a href="#开源隐私泄露（Open-source-privacy-leak）" class="headerlink" title="开源隐私泄露（Open source privacy leak）"></a>开源隐私泄露（Open source privacy leak）</h3><p>每天数以百万计的机器人在 GitHub 上检索代码，匹配代码中的敏感信息，各种 Key&#x2F;Session&#x2F;Token&#x2F;password&#x2F;数据库密码&#x2F;CardID&#x2F;CreditCard 等。很多开发者贪图方便，开发时将这些敏感信息硬编码在代码中，这样一来，如果开源到 GitHub 上，就自我开盒了。</p><p>有证据表明，中国政府会重点关注敏感项目(如FQ、Politics等)的 contributor 甚至 star ，尝试通过 profile、commit、issue、email、social media 精准定位墙内信息，精准喝茶。</p><p>解决方法也很简单：</p><ol><li>打开 GitHub 的 Code security and analysis（代码安全和分析）-&gt; Push protection for yourself (保护自己的推送)，这样就可以 Block commits that contain supported secrets across all public repositories on GitHub. （阻止包含支持的秘密的提交）</li><li>不要偷懒，将敏感信息存储在环境变量中，或者使用专门的配置文件进行管理。并加入到 .gitignore 文件中，<strong>不要上传到 GitHub 上</strong>。</li><li>敏感的 repository 设置为 <strong>private</strong>，不要公开。</li><li>使用 GitHub 提供的 Keep my email addresses private (保持我的邮箱私密)，透过私密邮箱进行 commit。</li><li>GitHub 开启 Two-Factor Authentication(2FA 双因素验证)，增加账号安全性。</li></ol><h2 id="Action-行动"><a href="#Action-行动" class="headerlink" title="Action 行动"></a>Action 行动</h2><h3 id="Initiation-ɪˌnɪʃ-iˈeɪ-ʃən-初始化"><a href="#Initiation-ɪˌnɪʃ-iˈeɪ-ʃən-初始化" class="headerlink" title="Initiation [&#x2F;ɪˌnɪʃ.iˈeɪ.ʃən&#x2F;] 初始化"></a>Initiation [&#x2F;ɪˌnɪʃ.iˈeɪ.ʃən&#x2F;] 初始化</h3><p>配置全局用户名和邮箱</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置全局用户名和邮箱</span>git config --global user.name &quot;whalefell&quot;git config --global user.email &quot;whalefall@unimelb.edu.au&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置</span>git config --list</code></pre><p>ssh-keygen 使用 <strong>RSA算法</strong> 生成 SSH key ，并将公钥添加到 GitHub 上。<br>可以选择输入 <code>passphrase</code> 更加安全。<br>位置：公钥 <code>~/.ssh/id_rsa.pub</code> 私钥 <code>~/.ssh/id_rsa</code><br>妥善保管上面两个文件，一同放在 KeePass 中。</p><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">verify</span>ssh -T git@github.com</code></pre><p>创建 repository</p><pre><code class="hljs shell">git init .git add .git commit -m &quot;initiation&quot;</code></pre><h3 id="Git-Proxy"><a href="#Git-Proxy" class="headerlink" title="Git Proxy"></a>Git Proxy</h3><p>由于高墙的存在, 需要使用代理进行访问. I know this because it’s necessary for Chinese guys, lol.</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> http proxy but it only working <span class="hljs-keyword">in</span> http(s) git protocol</span>git config --global http.proxy http://127.0.0.1:10809git config --global https.proxy https://127.0.0.1:10809<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">clear proxy</span>git config --global --unset http.proxygit config --global --unset https.proxy<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">SSH proxy</span><span class="hljs-meta prompt_"># </span><span class="language-bash">edit `~/.ssh/config`</span><span class="hljs-meta prompt_"># </span><span class="language-bash">socks5</span>Host *    ProxyCommand connect -S &#123;proxyserver&#125;:&#123;port&#125; %h %p<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">http</span>Host *    ProxyCommand connect -H &#123;proxyserver&#125;:&#123;port&#125; %h %p<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">windows</span>Host *ProxyCommand &quot;D:\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:10808 %h %p<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">temporary proxy</span>-o ProxyCommand=&quot;path\to\connect.exe -S 127.0.0.1:7891 %h %p&quot;</code></pre><p>解决了一个迷思: 为什么 HTTP 代理能够代理很多非 HTTP 协议的请求?</p><p>ref: <a href="https://stackoverflow.com/questions/12026247/why-are-http-proxies-able-to-support-protocols-like-irc-and-ftp">stackoverflow: why-are-http-proxies-able-to-support-protocols-like-irc-and-ftp</a></p><blockquote><p>Q: Why are HTTP proxies able to support protocols like socks and FTP?</p><p>A: HTTP proxy is able to support high level protocols other than HTTP,Because it supports CONNECT method,<br>HTTP 代理能够支持除了HTTP以外很多高级别的协议, 因为它支持 <strong>CONNECT</strong> 方法.</p><p>The CONNECT method is a way <strong>to tunnel any kind of connection</strong> through an HTTP proxy. By default, the proxy establishes a TCP connection to the specified server, responds with an HTTP 200 (Connection Established) response, and then shovels packets back and forth between the client and the server, <strong>without understanding or interpreting the tunnelled traffic</strong><br>CONNECT 方法是一种通过HTTP代理隧道化任何连接的方法. 代理默认建立一个到指定服务器的TCP连接, 响应一个HTTP 200 (Connection Established) 响应, 然后在客户端和服务器之间来回传输数据包, 而不理解或解释隧道流量.</p><p>简单理解, HTTP 代理通过 CONNECT 方法将 TCP 的数据打包转发给目标服务器, 然后将数据包原封不动的返回给客户端, 从而实现了对非 HTTP 协议的支持. HTTP 代理支持所有基于 TCP 的协议, 但是不支持 UDP 协议.</p></blockquote><h3 id="Use-SSH-over-HTTPS-prot"><a href="#Use-SSH-over-HTTPS-prot" class="headerlink" title="Use SSH over HTTPS prot"></a>Use SSH over HTTPS prot</h3><p>Use SSH over HTTPS prot: 通过 443 端口使用 SSH 协议，避免被 Firewall 阻挡。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">verify</span>ssh -T -p 443 git@ssh.github.comgit clone ssh://git@ssh.github.com:443/YOUR-USERNAME/YOUR-REPOSITORY.git</code></pre><h3 id="Verify-commit-signature"><a href="#Verify-commit-signature" class="headerlink" title="Verify commit signature"></a>Verify commit signature</h3><p>使用 GPG 验证并签名你的提交，您可以在本地签名提交。这些标签或提交在 GitHub 上标记为 <strong>已验证的绿色小勾 Verified</strong>，因此其他人可以确信更改来自 <strong>可信来源</strong>。有关 PGP 的使用见下一 part。</p><pre><code class="hljs shell">gpg --list-keys  # 列出所有密钥<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">公钥特征，包括了密钥的参数</span><span class="hljs-meta prompt_"># </span><span class="language-bash">加密算法是 rsa，长度为 2048，生成于 2019-08-04，用途是 Signing 和 Certificating，一年之后过期以及密钥的 ID。</span>pub   rsa2048 2019-08-04 [SC] [expires: 2021-08-03]      1BA074F113915706D141348CDC3DB5873563E6B2<span class="hljs-meta prompt_"># </span><span class="language-bash">生成密钥时所输入的个人信息。</span>uid           [ultimate] fortest &lt;test@test.com&gt;<span class="hljs-meta prompt_"># </span><span class="language-bash">子密钥特征，格式和公钥部分大致相同</span>sub   rsa2048 2019-08-04 [E] [expires: 2021-08-03]<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">根据密钥 ID 导出对应的 GPG 公钥字符串</span>gpg --armor --export &#123;key_id&#125;</code></pre><p>然后，在 Github 的 SSH and GPG keys 中，新增一个 GPG key，内容即是上述命令的输出结果。</p><p>再次提醒，GPG 密钥中个人信息的邮箱部分，必须使用在 Github 中验证过的邮箱，否则添加 GPG key 会提示未经验证。</p><p>配置 Private email：</p><pre><code class="hljs shell">gpg --list-secret-keys --keyid-format=longgpg --edit-key &#123; sub_key_id &#125;adduid # 添加一个新的邮箱save<span class="hljs-meta prompt_"># </span><span class="language-bash">导出字符串并添加到 GitHub</span>gpg --armor --export &#123; sub_key_id &#125;</code></pre><p>利用 GPG 私钥对 Git commit 进行签名:</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置签名所用的 GPG 密钥 ID</span>git config --global user.signingkey &#123;key_id&#125;<span class="hljs-meta prompt_"># </span><span class="language-bash">在每次 commit 的时候，加上-S参数，表示这次提交需要用 GPG 密钥进行签名</span>git commit -S -m &quot;...&quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">如果觉得每次都需要手动加上-S有些麻烦，可以设置 Git 为每次 commit 自动要求签名：</span>git config --global commit.gpgsign true</code></pre><p>信任 GitHub 的 GPG 密钥：虽然所有的 commit 在 Github 中查看都是 <strong>Verified</strong>，但是有一些比较特殊：在 Github 网页端进行的操作，比如创建仓库。这些 commit 并没有用我们之前生成的密钥进行签名，而是由 Github 代为签名了。这样的结果就是，我们本地无法确认这些签名的真实性。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">import GitHub GPG key</span>curl https://github.com/web-flow.gpg | gpg --import<span class="hljs-meta prompt_"># </span><span class="language-bash">sign and trust GitHub GPG key</span>gpg --sign-key 4AEE18F83AFDEB23</code></pre><p>这时候，每一次 commit 都要输入 passphrase，可以使用 <code>gpg-agent</code> 来缓存密码，避免重复输入。</p><p><code>~/.gnupg/gpg-agent.conf</code>:</p><pre><code class="hljs shell">default-cache-ttl 3600</code></pre><h3 id="Commit-message-提交规范"><a href="#Commit-message-提交规范" class="headerlink" title="Commit message 提交规范"></a>Commit message 提交规范</h3><p>使用 angular commit message 规范，这是一个非常流行的 commit message 规范.</p><ul><li><code>feat</code> 增加新功能</li><li><code>fix</code> 修复问题&#x2F;BUG</li><li><code>style</code> 代码风格相关无影响运行结果的</li><li><code>perf</code> 优化&#x2F;性能提升</li><li><code>refactor</code> 重构</li><li><code>revert</code> 撤销修改</li><li><code>test</code> 测试相关</li><li><code>docs</code> 文档&#x2F;注释</li><li><code>chore</code> 依赖更新&#x2F;脚手架配置修改等</li><li><code>workflow</code> 工作流改进</li><li><code>ci</code> 持续集成</li><li><code>types</code> 类型定义文件更改</li><li><code>wip</code> 开发中</li></ul><h2 id="PGP-使用"><a href="#PGP-使用" class="headerlink" title="PGP 使用"></a>PGP 使用</h2><blockquote><p>世界上有两种密码:一种是防止你的小妹妹偷看你的文件;另一种是防止当局阅读你的文件.<br>—— Bruce Schneier《应用密码学》</p></blockquote><p><code>GNU Privacy Guard</code>（GnuPG 或 GPG）是一个密码学软件，用于<strong>加密、签名</strong>通信内容及<strong>管理 非对称 密码学的密钥</strong>。</p><p>非对称密码大家应该接触过，这项技术在许多领域都有适用。这种算法需要两个 <strong>钥匙</strong>，一个是可以公开的 <strong>公钥</strong> ，对应的另一个就是应保管好的 <strong>私钥</strong> 。<strong>用公钥加密的内容只能使用私钥解开，而使用私钥加密的内容也只能使用公钥解开。</strong></p><p>目前计算机难以高效地进行<strong>质因数分解</strong>，比如我们将 2147483647 乘以 998244353 利用计算机很容易得到结果 2143713423777595391 ，但是反过来就扔给你一个 2143713423777595391 很难反推出原来两个质数。</p><p>利用这个特性，加上一个合适的流程，我们就得到了一个加密手段。</p><p>如果假象我们在使用一个去中心化通讯平台，每个人有唯一的一个<strong>账号（公钥）和密码（私钥）</strong>，我要私聊一个朋友，内容肯定不想让别人知道，但是在去中心化网络中难以避免经过别人转手，这时候我就可以<strong>拿那位朋友的账号（公钥）加密</strong>，这样只有那位<strong>朋友使用自己的私钥</strong>才能解开这些内容；同样的，他怎么确定信息是我发出的而不是别人<strong>伪造我的身份</strong>发出的呢？那我在<strong>用他的公钥加密后再使用自己的私钥加密</strong>（也叫 Signature），他使用<strong>我的公钥发现能解开</strong>，那就必是我发出的无疑了。（但是你的私钥泄露了就……）</p><p>PGP能保证 一条信息是你相信的人发的，除了你俩之外别人无法解密， 而且这条消息在传送时中间没有经过任何哪怕是一个标点一个字节的修改。</p><p>名词解释：</p><pre><code class="hljs text">A    =&gt;    AuthenticationC    =&gt;    CertifyE    =&gt;    EncryptS    =&gt;    Sign?    =&gt;    Unknown capabilitysec  =&gt;    Secret Keyssb  =&gt;    Secret SuBkeypub  =&gt;    Public Keysub  =&gt;    Public Subkey</code></pre><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>PGP 的密钥分为两种：<strong>主密钥</strong> 和 <strong>子密钥</strong>，主密钥用于签名和认证，子密钥用于加密。只需要主密钥的公钥就行，包含了子密钥的信息。</p><p>生成主密钥：</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 0</span><span class="hljs-meta prompt_"># </span><span class="language-bash">这里不推荐使用的 `gpg --gen-key`</span>gpg --full-gen-key<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1</span><span class="hljs-meta prompt_"># </span><span class="language-bash"> 默认就可以</span>Please select what kind of key you want:   (1) RSA and RSA (default)   (2) DSA and Elgamal   (3) DSA (sign only)   (4) RSA (sign only)  (14) Existing key from cardYour selection?<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 2</span><span class="hljs-meta prompt_"># </span><span class="language-bash">此处输入你希望的密钥长度， RSA的不应低于2048 bits，当然输入的数字越大越安全，相应的，加解密的速度也会更慢</span>RSA keys may be between 1024 and 4096 bits long.What keysize do you want? (4096)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 3</span><span class="hljs-meta prompt_"># </span><span class="language-bash">默认可以选0 ，即永不过期， 这里我选了2y，  因为到期之前随时可以更改你的过期时间，以确保你对此密钥仍拥有控制权</span>Please specify how long the key should be valid.         0 = key does not expire      &lt;n&gt;  = key expires in n days      &lt;n&gt;w = key expires in n weeks      &lt;n&gt;m = key expires in n months      &lt;n&gt;y = key expires in n yearsKey is valid for? (0)  2y<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 4</span><span class="hljs-meta prompt_"># </span><span class="language-bash">注意了： 这里的邮箱， 如果你不打算使用PGP为你的Git记录认证， 这里其实是可以随便输入的，不需要是你的邮箱， 甚至不需要是一个真实存在的邮箱，只要接受你信息的人知道就行。隐私泄漏问题很严重，你一旦设置了，并且发布到公钥服务器，就永远删不掉了 😅</span>GnuPG needs to construct a user ID to identify your key.Real name:  linus   # 这里名字可以是网名，可以是任意名字，如果你注重隐私就不要输入自己真名了Email address: linus@outlook.comComment:     # 备注可以留空<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 6</span><span class="hljs-meta prompt_"># </span><span class="language-bash">确认无误后输入 o</span>You selected this USER-ID:    &quot;linus &lt;linust@outlook.com&gt;&quot;Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 7</span><span class="hljs-meta prompt_"># </span><span class="language-bash">输入一个复杂的密码 并确认</span>┌──────────────────────────────────────────────────────┐│ Please enter the passphrase to                       ││ protect your new key                                 ││                                                      ││ Passphrase: │________________________________________││                                                      ││       &lt;OK&gt;                              &lt;Cancel&gt;     │└──────────────────────────────────────────────────────┘<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 8</span><span class="hljs-meta prompt_"># </span><span class="language-bash">随机移动你的鼠标，越随机你的密钥越安全</span>We need to generate a lot of random bytes. It is a good idea to performsome other action (type on the keyboard, move the mouse, utilize thedisks) during the prime generation; this gives the random numbergenerator a better chance to gain enough entropy.<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 9 大功告成</span>gpg: key 99F583599B7E31F1 marked as ultimately trustedgpg: revocation certificate stored as &#x27;/root/.gnupg/openpgp-revocs.d/705358AB85366CAB05C0220F99F583599B7E31F1.rev&#x27;public and secret key created and signed.pub   rsa3072 2021-01-11 [SC]      705358AB85366CAB05C0220F99F583599B7E31F1    # 你的 key iduid                      linus &lt;linus@outlook.com&gt;sub   rsa3072 2021-01-11 [E]    # 这个是自动生成的用于加密的子密钥，E代表Encrypt 加密</code></pre><p>生成子密钥：你日常使用应该使用子密钥，<strong>主密钥除了签发新的子密钥</strong> 不要使用。建议为不同环境，不同用途都单独生成子密钥，互不干扰。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 0</span>gpg --edit-key linus # 或者key id<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1  进入gpg交互界面</span>gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Secret key is available.sec  rsa3072/99F583599B7E31F1     created: 2021-01-11  expires: never       usage: SC     trust: ultimate      validity: ultimatessb  rsa3072/6FE9C71CFED44076     created: 2021-01-11  expires: never       usage: E[ultimate] (1). linus &lt;linus@outlook.com&gt;C<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 2</span><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">  addkey</span>Please select what kind of key you want:   (3) DSA (sign only)   (4) RSA (sign only)   (5) Elgamal (encrypt only)   (6) RSA (encrypt only)  (14) Existing key from cardYour selection? 4<span class="hljs-meta prompt_"># </span><span class="language-bash">根据你的用途选择， 这里生成一个只用于签名的子密钥（sign only）</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash"> 后面的选择和主密钥生成的大同小异，按提示操作即可</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">生成完毕后</span>sec  rsa3072/99F583599B7E31F1     created: 2021-01-11  expires: never       usage: SC     trust: ultimate      validity: ultimatessb  rsa3072/6FE9C71CFED44076     created: 2021-01-11  expires: never       usage: Essb  rsa3072/FDB960B857D397F6     created: 2021-01-11  expires: never       usage: S[ultimate] (1). linus &lt;linus@outlook.com&gt;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash"> last step</span><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash"> save  <span class="hljs-comment">#  记得save， 直接退出的话什么也没有</span></span></code></pre><p>生成撤销证书 revoke certification</p><p>假如你忘了主密钥的密码，或者丢失了对主密钥的控制权（丢失，被夺取），如果没有 <strong>撤销凭证</strong> 的话， 除了一个个通知你的朋友们没有任何办法 证明你不再使用这个密钥，这简直是灾难。</p><p>生成的 <code>revoke.pgp</code> 就是撤销凭证， 有了这个撤销凭证，你可以在没有密码的情况下 <strong>使一个公钥失效</strong>，所以一定要妥善保存，而且最好比主密钥多一份。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 0</span><span class="hljs-meta prompt_"># </span><span class="language-bash">按提示走完流程就可以</span>gpg --gen-revoke -ao revoke.pgp linus # uid 或者key id<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1</span>sec  rsa3072/99F583599B7E31F1 2021-01-11 linus &lt;linus@outlook.com&gt;Create a revocation certificate for this key? (y/N) yPlease select the reason for the revocation:  0 = No reason specified  1 = Key has been compromised # 密钥被泄露  2 = Key is superseded  3 = Key is no longer used  Q = Cancel(Probably you want to select 1 here) 3</code></pre><p>由于 PGP 没有提供任何 <strong>将吊销信息通知其他用户的方式</strong>，他不能保证没人会使用撤销了的已经变得不安全的密钥。</p><p>你丢失的私钥仍然可以被攻击者使用，并用来解密那些没有更新你的公钥的人发送的加密消息。 revoke 子密钥并更新公钥后，若有人用老的公钥加密信息，虽然你仍然可以解密，但是攻击者同样可以，这时候是极度不安全的。</p><p>例如：如果A的私人密钥被盗，她将发出一个 <strong>密钥撤销证书</strong>（key revocation certificate），但是由于这个密钥的分发是非正式的且将费大量的时间和口舌，故不能保证密钥环中每一个有 A 公开密钥的用户都能收到。</p><p>所以在你将密钥<strong>撤销</strong>后，请将发布到你一贯公布公钥的地方， 并尽可能通知其他人。</p><p>撤销主密钥：</p><pre><code class="hljs shell">gpg --import gpg-linus.asc                                               # 在一台新的电脑上导入你的公钥gpg: key 99F583599B7E31F1: &quot;linus &lt;linus@outlook.com&gt;&quot; not changedgpg: Total number processed: 1gpg:              unchanged: 1gpg --import revoke  # 导入你备份的撤销凭证，直接会导致密钥不可用<span class="hljs-meta prompt_"># </span><span class="language-bash">detail</span>gpg: key 99F583599B7E31F1: &quot;linus &lt;linus@outlook.com&gt;&quot; revocation certificate importedgpg: Total number processed: 1gpg:    new key revocations: 1gpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: depth: 0  valid:   1  signed:   1  trust: 0-, 0q, 0n, 0m, 0f, 1ugpg: depth: 1  valid:   1  signed:   0  trust: 1-, 0q, 0n, 0m, 0f, 0ugpg: next trustdb check due at 2021-09-29gpg -k                 # 查看密钥，已经revoke<span class="hljs-meta prompt_"># </span><span class="language-bash">detail</span>pub   rsa3072 2021-01-11 [SC] [revoked: 2021-01-11]      705358AB85366CAB05C0220F99F583599B7E31F1uid           [revoked] linus &lt;linus@outlook.com&gt;</code></pre><p>撤销子密钥：</p><pre><code class="hljs shell">gpg --edit-key linusgpg &gt;   list  # 列出你所有的子密钥gpg &gt;   key  &#123;n&#125;  # 选择你要销毁的子密钥的 序号gpg &gt;   revkeygpg &gt;   save    # 退出前一定要save, 不然所有更改不会生效</code></pre><p>由于吊销前进行加密的内容仍需被吊销的密钥进行解密，所以被吊销的密钥也<strong>不应丢弃</strong>。</p><p>此外，若将 PGP 用于 SSH 认证，由于SSH的私钥认证并不通过主密钥来认证，所以即使吊销私钥，也可以进行访问，所以吊销后应当修改使用该密钥的SSH服务端来避免非法访问。</p><h3 id="管理密钥"><a href="#管理密钥" class="headerlink" title="管理密钥"></a>管理密钥</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有公钥、子公钥</span>gpg --list-keys<span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有密钥、子密钥</span>gpg --list-secret-keys<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">简化</span>gpg -kgpg -K<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">这样并没有列出子密钥的<span class="hljs-built_in">id</span>, 而且没有打印出指纹信息， 是不安全的。所以在你查看密钥时应该</span>gpg --fingerprint -K --keyid-format long<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"> # </span><span class="language-bash">输出</span>sec   rsa3072/0x99F583599B7E31F1 2021-01-11 [SC]  # 长ID      Key fingerprint = 7053 58AB 8536 6CAB 05C0  220F 99F5 8359 9B7E 31F1 #指纹信息uid                   [ultimate] linus &lt;linus@outlook.com&gt;ssb   rsa3072/0x6FE9C71CFED44076 2021-01-11 [E]            # 斜杠后面的就是子密钥IDssb   rsa3072/0xFDB960B857D397F6 2021-01-11 [S]</code></pre><h3 id="备份密钥-backup-certification"><a href="#备份密钥-backup-certification" class="headerlink" title="备份密钥 backup certification"></a>备份密钥 backup certification</h3><pre><code class="hljs shell">gpg --list-secret-keys --keyid-format=long<span class="hljs-meta prompt_"># </span><span class="language-bash">备份步骤</span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1: 导出秘钥信息，其中包括所有公钥，私钥，信任网数据库文件，进行备份</span>gpg --export &gt; public-keys.gpggpg --export-secret-keys &gt; private-keys.gpggpg --export-ownertrust &gt; ownertrust.asc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 2: 导出秘钥吊销凭证，建议单独备份</span>gpg --armor --gen-revoke [primary key ID] &gt; revocation.asc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复秘钥</span><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1: 导出公钥，私钥和信任网数据库</span>gpg --import public-keys.gpggpg --import private-keys.gpggpg --import-ownertrust ownertrust.asc<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">字符串文件备份</span>gpg -ao public-key --export linus   # 导出公钥gpg  -ao secret-key --export-secret-key 99F583599B7E31F1!    # 导出主私钥，建议secret-key 替换为你的加密设备备份文件的路径，直接导入到设备中gpg  -ao sign-subkey --export-secret-subkeys FDB960B857D397F6!     #导出有[S]标识、签名用子私钥gpg  -ao encrypt-subkey --export-secret-subkeys 6FE9C71CFED44076!    #导出有[E]标识、加密用子私钥 ,这里的ID替换为你的子密钥ID<span class="hljs-meta prompt_"># </span><span class="language-bash">别忘了同时将你刚刚生成的撤销凭证也备份起来</span></code></pre><h3 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h3><p>备份完后，要将本机的密钥清除干净，首先删除：</p><pre><code class="hljs shell">gpg --delete-secret-keys linus  # 删除私钥，  UID 也可以替换成子密钥ID, 主密钥Key IDgpg --delete-keys linus   # 删除公钥<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">如果想全部删除推荐直接删文件夹,即删除 <span class="hljs-variable">$HOME</span>/.gnupg</span></code></pre><h3 id="导入-import-key-certification"><a href="#导入-import-key-certification" class="headerlink" title="导入 import key certification"></a>导入 import key certification</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从文件导入</span>gpg --import [密钥文件]   # 刚刚备份的子密钥文件， 或者其他人的公钥<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">暂不推荐从公钥服务器导入</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">输出</span><span class="hljs-meta prompt_">sec# </span><span class="language-bash">  rsa3072/0x99F583599B7E31F1 2021-01-11 [SC]   <span class="hljs-comment"># sec 后面带有 # 号说明主密钥未导入，是安全的</span></span>      Key fingerprint = 7053 58AB 8536 6CAB 05C0  220F 99F5 8359 9B7E 31F1 #指纹信息uid                   [unknown] linus &lt;linus@outlook.com&gt;ssb #    rsa3072/0x6FE9C71CFED44076 2021-01-11 [E]           # 带有 # 号说明该子密钥已导入</code></pre><h3 id="签名和验证-sign-and-verify"><a href="#签名和验证-sign-and-verify" class="headerlink" title="签名和验证 sign and verify"></a>签名和验证 sign and verify</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一种方式，生成二进制签名文件</span>gpg --sign input.txt  # 当然也可以加上--output参数<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">第二种方式，生成ASCII格式签名</span>gpg --clearsign input.txt<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">第三种，签名和原文本分开（前两种的签名文件中包含了所有原文本，所以体积会比较大）</span>gpg --armor --detach-sign input.txt  #不加armor生成会二进制<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash"> 验证签名文件</span>gpg --verify demo.txt.asc demo.txt</code></pre><p>文件加解密：</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加密：</span><span class="hljs-meta prompt_"># </span><span class="language-bash">recipient指定接收者的公钥ID</span>gpg --recipient &#123;keyid/uid&#125; --output encrypt.txt --encrypt input.txt<span class="hljs-meta prompt_"># </span><span class="language-bash">也可以按喜好加上--armor选项等</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">我更喜欢用</span>gpg  -se  -o  encrypt.txt  -r  &#123;keyid/uid&#125;   input.txt<span class="hljs-meta prompt_"># </span><span class="language-bash">s代表签名  e代表加密</span><span class="hljs-meta prompt_"># </span><span class="language-bash">o是 将结果 输出到文件  encrypt.txt</span><span class="hljs-meta prompt_"># </span><span class="language-bash">r后面跟 接收者的 uid或者 key <span class="hljs-built_in">id</span>， 接收者的公钥必须已经导入过</span><span class="hljs-meta prompt_"># </span><span class="language-bash">input.txt 是你要加密的文件</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">解密：</span>gpg --decrypt encrypt.txt --output decrypt.txt<span class="hljs-meta prompt_"># </span><span class="language-bash">也可以</span>gpg -d encrypt.txt   # 输出到终端 直接查看</code></pre><h3 id="GPG-Editer"><a href="#GPG-Editer" class="headerlink" title="GPG Editer"></a>GPG Editer</h3><pre><code class="hljs text">gpg --edit-key linusquit：退出此菜单。save：保存并退出。help：显示帮助信息。fpr：显示密钥指纹。grip：显示密钥抓手。list：列出密钥和用户ID。uid：选择用户ID N。key：选择子密钥N。check：检查签名。sign：签名选定的用户ID。lsign：本地签名选定的用户ID。tsign：用信任签名签名选定的用户ID。nrsign：用不可撤销的签名签名选定的用户ID。adduid：添加一个用户ID。addphoto：添加一个照片ID。deluid：删除选定的用户ID。addkey：添加一个子密钥。addcardkey：将密钥添加到智能卡。keytocard：将密钥移动到智能卡。bkuptocard：将备份密钥移动到智能卡。delkey：删除选定的子密钥。addrevoker：添加一个撤销密钥。delsig：从选定的用户ID中删除签名。expire：更改密钥或选定子密钥的过期日期。primary：将选定的用户ID标记为主要的。pref：列出偏好（专家）。showpref：列出偏好（详细）。setpref：为选定的用户ID设置偏好列表。keyserver：为选定的用户ID设置首选密钥服务器URL。notation：为选定的用户ID设置一个注解。passwd：更改密码。trust：更改所有者信任。revsig：撤销选定用户ID上的签名。revuid：撤销选定的用户ID。revkey：撤销密钥或选定的子密钥。enable：启用密钥。disable：禁用密钥。showphoto：显示选定的照片ID。clean：压缩不可用的用户ID并从密钥中删除不可用的签名。minimize：压缩不可用的用户ID并从密钥中删除所有签名。</code></pre><h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference 参考"></a>Reference 参考</h2><ol><li><a href="https://thehackernews.com/2024/03/hackers-hijack-github-accounts-in.html">thehackernews: hackers-hijack-github-accounts-in</a></li><li><a href="https://docs.github.com/en/authentication/">GitHub Authentication</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-安全使用指南&quot;&gt;&lt;a href=&quot;#Git-安全使用指南&quot; class=&quot;headerlink&quot; title=&quot;Git 安全使用指南&quot;&gt;&lt;/a&gt;Git 安全使用指南&lt;/h1&gt;&lt;p&gt;每时每刻，网络上成千上万的机器人贪婪的检索 GitHub，这包括开源软件 A</summary>
      
    
    
    
    <category term="Git" scheme="https://www.whaleluo.top/categories/Git/"/>
    
    
    <category term="GitHub" scheme="https://www.whaleluo.top/tags/GitHub/"/>
    
    <category term="Cybersecurity" scheme="https://www.whaleluo.top/tags/Cybersecurity/"/>
    
    <category term="OpenSourceSecurity" scheme="https://www.whaleluo.top/tags/OpenSourceSecurity/"/>
    
    <category term="开源安全" scheme="https://www.whaleluo.top/tags/%E5%BC%80%E6%BA%90%E5%AE%89%E5%85%A8/"/>
    
    <category term="网络安全" scheme="https://www.whaleluo.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>德生 PL-330 收音机彩蛋</title>
    <link href="https://www.whaleluo.top/amateurradio/tecsun-pl330-radio-bonus/"/>
    <id>https://www.whaleluo.top/amateurradio/tecsun-pl330-radio-bonus/</id>
    <published>2024-03-07T10:27:35.000Z</published>
    <updated>2024-03-07T10:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="德生-PL-330-收音机彩蛋"><a href="#德生-PL-330-收音机彩蛋" class="headerlink" title="德生 PL-330 收音机彩蛋"></a>德生 PL-330 收音机彩蛋</h1><p>笔者使用的 PL330 收音机固件版本为 <code>3306</code> 以下彩蛋验证有效：</p><ol><li><strong>显示固件版本号</strong>：在关机的状态下，长按 VF&#x2F;VM 按键，直至屏幕上呈现全显。在屏幕显示复归正常前，右上角会显示固件版本号。</li><li><strong>SSB 拍频设置</strong>：校准上边带或下边带。在开机的状态下，首先，调到一个调幅强台（即中波或短波强台都可以——译者注）。其次，长按 SSB 按键。再次，微调频率，直至实现零拍（零拍的标准为：除了声音的音调降低之外，没有呜呜声或其他声音失真现象——译者注）。最后，长按 LSB 按键，直至屏幕开始闪烁。</li><li><strong>接收天线切换</strong>：在中波磁棒天线&#x2F;拉杆天线与外接天线插口之间切换，在开机的状态下，进入长波或中波波段。长按数字键 3，屏幕上显示 CH-A 时，代表使用机器自带的天线；显示 CH-5 时，代表使用外接天线。当选择外接天线这种模式的时候，屏幕上会同时显示 SW MW 的字眼。</li><li><strong>调制频偏设置</strong>：在开机状态下，进入调频波段。长按数字按键 4，就能实现 75HZ（适用于美国）和 50HZ（适用于欧洲）之间的切换。</li><li><strong>最大音量</strong>：打开收音机，切换到任意波段。首先，长按数字键 7。其次，调节音量旋钮。再次，长按数字键 7 保存。最后，每个波段都能进行单独的设置，默认值为 58。</li><li><strong>时间显示秒</strong>：关闭收音机，长按数字按键 8 能够让时间显示读秒或关闭读秒。</li><li><strong>设置静噪</strong>：在 PL990 收音机上，长按数字键 9 能够启用静音门槛设置，然而在 PL330 上却没有生效。具体操作流程是：开启收音机，进入任何波段都可以。首先，长按数字键 9，其次，旋转快步进飞梭。再次，改变屏幕左上角的数值，第四，长按 ENTER 按键保存。每个波段都可独立进行设置，默认值为 01。（好像在 PL330 上不生效）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;德生-PL-330-收音机彩蛋&quot;&gt;&lt;a href=&quot;#德生-PL-330-收音机彩蛋&quot; class=&quot;headerlink&quot; title=&quot;德生 PL-330 收音机彩蛋&quot;&gt;&lt;/a&gt;德生 PL-330 收音机彩蛋&lt;/h1&gt;&lt;p&gt;笔者使用的 PL330 收音机固件版</summary>
      
    
    
    
    <category term="Radio" scheme="https://www.whaleluo.top/categories/Radio/"/>
    
    
    <category term="Radio" scheme="https://www.whaleluo.top/tags/Radio/"/>
    
    <category term="业余无线电" scheme="https://www.whaleluo.top/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="短波" scheme="https://www.whaleluo.top/tags/%E7%9F%AD%E6%B3%A2/"/>
    
    <category term="收音机" scheme="https://www.whaleluo.top/tags/%E6%94%B6%E9%9F%B3%E6%9C%BA/"/>
    
    <category term="AmateurRadio" scheme="https://www.whaleluo.top/tags/AmateurRadio/"/>
    
  </entry>
  
  <entry>
    <title>CSS 樣式入門</title>
    <link href="https://www.whaleluo.top/javascript/senior-css/"/>
    <id>https://www.whaleluo.top/javascript/senior-css/</id>
    <published>2024-03-03T08:36:23.000Z</published>
    <updated>2024-03-03T08:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-樣式入門"><a href="#CSS-樣式入門" class="headerlink" title="CSS 樣式入門"></a>CSS 樣式入門</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>学了前端那么久，发现 CSS 真是一个 <strong>博大精深</strong> 的语言，可以简单的实现很多 JS 做不到的效果。故出此专栏，记录一些常用、神奇的 CSS。</p><p>Reference：</p><ol><li>CSS online <a href="https://playcode.io/css">CSS Playground</a></li><li>MDN CSS Tutorial <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps">CSS 入门概述 - 学习 Web 开发 | MDN</a></li><li>Tailwind CSS Chinese <a href="https://www.w3cschool.cn/tailwind_css/">Tailwind CSS w3cschool</a></li><li>后盾人文档,是一个介绍前端技术栈的博主 <a href="https://doc.houdunren.com/">后盾人文档</a></li><li>CSS Video Tutorial 通过简明的视频动画阐述 CSS 各种概念 <a href="https://www.bilibili.com/video/BV1Rv4y177rj/">BV1Rv4y177rj</a></li></ol><h2 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector 选择器"></a>Selector 选择器</h2><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> // 选择 <span class="hljs-selector-tag">h1</span> 标签<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title]</span> // 选择有 title 属性的标签<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> // 伪类(描述元素在某特性状态下的样式)，鼠标悬浮时触发<span class="hljs-selector-class">.header</span> // 选择 class=<span class="hljs-selector-tag">header</span><span class="hljs-selector-id">#myid</span> // 选择 id=myid* // 全局<span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> // 选择 box class 下的所有 <span class="hljs-selector-tag">p</span> 标签<span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-child // 选择 box class 下的第一个 <span class="hljs-selector-tag">p</span> 标签<span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-class">.intro</span> // , 表示分别设置</code></pre><p>选择器 <strong>层叠</strong>（cascade）和 <strong>优先级</strong>（specificity）</p><p>类选择器具有高优先级</p><h2 id="Function-函数"><a href="#Function-函数" class="headerlink" title="Function 函数"></a>Function 函数</h2><p>一个例子是  <code>calc()</code>  函数。这个函数允许在 CSS 中进行简单的计算：</p><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;  <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black;&#125;<span class="hljs-selector-class">.box</span> &#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">90%</span> - <span class="hljs-number">30px</span>);  <span class="hljs-attribute">background-color</span>: rebeccapurple;  <span class="hljs-attribute">color</span>: white;&#125;</code></pre><p>另一个例子是  <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform"><code>transform</code></a> （变换角度）的不同取值，如  <code>rotate()</code>。</p><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;  <span class="hljs-attribute">background-color</span>: rebeccapurple;  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.8turn</span>);&#125;<span class="hljs-selector-class">.box</span> &#123;  <span class="hljs-comment">/* 圆角 */</span>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;&#125;</code></pre><h2 id="Rule-规则"><a href="#Rule-规则" class="headerlink" title="@ Rule @ 规则"></a>@ Rule @ 规则</h2><p>CSS 的  <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule"><code>@rules</code></a>（读作“at-rules”）是一些特殊的规则，提供了关于 CSS 应该执行什么或如何表现的指令。有些 @ 规则很简单，只有一个关键词和一个值。例如，<code>@import</code>  将一个样式表导入另一个 CSS 样式表：</p><p>一个常见的@规则是  <code>@media</code>，它被用来创建 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_media_queries">媒体查询</a>。媒体查询使用条件逻辑来应用 CSS 样式。</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;  <span class="hljs-attribute">background-color</span>: pink;&#125;<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">30em</span>) &#123;  <span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">background-color</span>: blue;  &#125;&#125;</code></pre><h2 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h2><p>一些属性，如  <code>font</code>、<code>background</code>、<code>padding</code>、<code>border</code>  和 <code>margin</code>  等属性称为 <strong>简写属性</strong>。它们允许在一行中设置多个属性值，从而节省时间并使代码更整洁。</p><p><code>padding</code>：<strong>设置内边距</strong><br><code>margin</code>: <strong>设置外边距</strong></p><pre><code class="hljs css"><span class="hljs-comment">/* 在像 padding 和 margin 这样的 4 值简写语法中，</span><span class="hljs-comment">   数值的应用顺序是上、右、下、左（从顶部顺时针方向）。</span><span class="hljs-comment">   也有其他的简写类型，例如 2 值简写，</span><span class="hljs-comment">   它为顶部/底部设置 padding/margin，然后是左侧/右侧 */</span><span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">5px</span>;<span class="hljs-comment">/* same as */</span><span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;<span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>;<span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">15px</span>;<span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;</code></pre><p>同样的还有设置 background：</p><pre><code class="hljs css"><span class="hljs-attribute">background</span>: red <span class="hljs-built_in">url</span>(<span class="hljs-string">bg-graphic.png</span>) <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> repeat-x fixed;<span class="hljs-comment">/* same as */</span><span class="hljs-attribute">background-color</span>: red;<span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">bg-graphic.png</span>);<span class="hljs-attribute">background-position</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<span class="hljs-comment">/* repeat 控制背景平铺行为 */</span><span class="hljs-attribute">background-repeat</span>: repeat-x;<span class="hljs-attribute">background-attachment</span>: fixed;</code></pre><h2 id="Box-盒子模型"><a href="#Box-盒子模型" class="headerlink" title="Box 盒子模型"></a>Box 盒子模型</h2><p><strong>在 CSS 中，所有的元素都被一个个的“盒子”包围着。</strong></p><p>几种类型的盒子，一般分为 <strong>区块盒子</strong>（block boxes）和 <strong>行内盒子</strong>（inline boxes）。</p><p>类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。盒子有<strong>内部显示</strong>（inner display type）和 <strong>外部显示</strong>（outer display type）两种类型。</p><p><code>block</code> <strong>区块盒子</strong> 类型：<strong>独占一行会换行</strong>；高度宽度都起作用；如果不指定宽度，占满一整行。</p><p><code>inline</code> <strong>行内盒子</strong>：<strong>盒子不会换行</strong>；高度宽度都起<strong>不作用</strong></p><p>盒子模型的各个部分：</p><ol><li><strong>内容盒子</strong>：显示内容的区域；使用  <code>inline-size</code>  和  <code>block-size</code> 或  <code>width</code> 和 <code>height</code> 等属性确定其大小。</li><li><strong>内边距盒子</strong>：填充位于内容周围的空白处；使用 <code>padding</code>  和相关属性确定其大小。</li><li><strong>边框盒子</strong>：边框盒子包住内容和任何填充；使用 <code>border</code>  和相关属性确定其大小。</li><li><strong>外边距盒子</strong>：外边距是最外层，其包裹内容、内边距和边框，作为该盒子与其他元素之间的空白；使用 <code>margin</code> 和相关属性确定其大小。</li></ol><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/Senior-CSS.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/JS/Senior-CSS.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="Senior-CSS.png"></p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#6e28d9</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">24px</span>; <span class="hljs-comment">/* 内边距 **/</span>  <span class="hljs-attribute">color</span>: white; <span class="hljs-comment">/* text color */</span>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 外边距 **/</span>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>; <span class="hljs-comment">/* 高度占满 **/</span>  <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">/* 弹性布局 **/</span>  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* 内容对齐方式 居中 **/</span>  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">/* 元素组对其方式 居中 **/</span>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-comment">/* 设置圆角 **/</span>&#125;</code></pre><h2 id="Flexbox-弹性布局"><a href="#Flexbox-弹性布局" class="headerlink" title="Flexbox 弹性布局"></a>Flexbox 弹性布局</h2><p>建立一个 container div，设置 <code>display: flex</code>，div 内子元素会 <strong>自动排列</strong>，无需手动布局，可以自适应屏幕大小。尤其是在子元素个数和容器尺寸不确定的情况下，非常方便。</p><p>容器属性：</p><ol><li><code>flex-direction</code>：决定主轴的方向（即子项目的排列方向）。 <code>raw</code> 水平 <code>column</code> 垂直</li><li><code>justify-content</code>：定义了子项目在 <strong>主轴</strong> 上的对齐方式 <code>center</code>。 <code>justify</code> vt. 证明…有理；为…辩护 这里指的是 v.对齐</li><li><code>align-items</code>：定义子项目在 <strong>交叉轴</strong> 上如何对齐。 <code>flex-start</code> 默认，交叉轴前对齐 <code>center</code> 交叉轴居中对齐 <code>baseline</code> 文字基线对齐 <code>stretch</code> 拉伸</li><li><code>flex-wrap</code>：定义了子项目在 <strong>超出主轴</strong> 换行时的行为。 <code>nowrap</code> 不换行 <code>wrap</code> 换行 <code>wrap-reverse</code> 反向换行</li><li><code>align-content</code>：定义了多行项目在交叉轴上的对齐方式，只对 <strong>多行项目</strong> 有效。</li></ol><p>项目属性：</p><ol><li><code>order</code>：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li><code>flex-grow</code>：定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li><code>flex-shrink</code>：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</li><li><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间（main size）。</li></ol><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><ol><li>媒体查询</li><li>Flexbox 弹性布局</li><li>Grid 网格布局</li><li>相对单位 rem、em、vw、vh<ul><li>em：相对于父元素的字体大小</li><li>rem：相对于根元素的字体大小</li></ul></li></ol><h2 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h2><p>CSS 动画也叫 <strong>补间动画</strong>（Tweening Animation），确定了元素的起始状态和结束状态，然后计算中间状态，通过过渡动画实现。</p><p><code>@keyframes</code> 动画关键帧，定义动画的开始和结束状态。起点和终点可以使用百分比或关键字（from 和 to）来表示。</p><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;  <span class="hljs-attribute">animation-name</span>: animation-name; <span class="hljs-comment">/* 动画名称 */</span>  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">4s</span>; <span class="hljs-comment">/* 动画持续时间 */</span>  <span class="hljs-attribute">animation-timing-function</span>: ease-in-out; <span class="hljs-comment">/* 动画速度曲线 */</span>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2s</span>; <span class="hljs-comment">/* 动画延迟时间 */</span>  <span class="hljs-attribute">animation-iteration-count</span>: infinite; <span class="hljs-comment">/* 动画播放次数 */</span>  <span class="hljs-attribute">animation-direction</span>: alternate; <span class="hljs-comment">/* 动画方向 设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。 */</span>  <span class="hljs-comment">/* normal 正向 reverse 反向 alternate 正反交替  */</span>&#125;<span class="hljs-comment">/* 简写 */</span><span class="hljs-comment">/* animation: animation-name 4s ease-in-out 2s infinite alternate; */</span><span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">div</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;  rotate: <span class="hljs-number">1px</span>;  <span class="hljs-attribute">animation</span>: animationname <span class="hljs-number">4s</span> ease <span class="hljs-number">2s</span> infinite normal;&#125;<span class="hljs-keyword">@keyframes</span> animationname &#123;  <span class="hljs-number">0%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);    <span class="hljs-attribute">background-color</span>: red;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0turn</span>);  &#125;  <span class="hljs-number">25%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">5vw</span>);    <span class="hljs-attribute">background-color</span>: yellow;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.25turn</span>);  &#125;  <span class="hljs-number">50%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">5vw</span>);    <span class="hljs-attribute">background-color</span>: blue;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5turn</span>);  &#125;  <span class="hljs-number">75%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">5vw</span>);    <span class="hljs-attribute">background-color</span>: blue;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.75turn</span>);  &#125;  <span class="hljs-number">100%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">5vw</span>);    <span class="hljs-attribute">background-color</span>: green;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1turn</span>);  &#125;&#125;</code></pre><p>贝塞尔曲线（cubic-bezier），可以自定义动画速度曲线。animation 的第三个参数。</p><ol><li><code>linear</code>：匀速运动</li><li><code>ease</code>：慢速开始，然后加速</li><li><code>ease-in</code>：慢速开始</li><li><code>ease-out</code>：慢速结束</li><li><code>ease-in-out</code>：慢速开始和结束</li><li><code>cubic-bezier(n,n,n,n)</code>：自定义速度曲线</li><li><code>steps(n)</code>：分 n 步完成动画,没有平滑过渡</li></ol><h2 id="Tailwind-CSS"><a href="#Tailwind-CSS" class="headerlink" title="Tailwind CSS"></a>Tailwind CSS</h2><p>Taiwind CSS 无需离开 HTML 通过 <strong>类名</strong> 快速实现各种样式，支持响应式设计和媒体查询。</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h4 id="Raw-HTML"><a href="#Raw-HTML" class="headerlink" title="Raw HTML"></a>Raw HTML</h4><pre><code class="hljs shell">pnpm install -D tailwindcssnpx tailwindcss init</code></pre><p>edit <code>tailwind.config.js</code> file:</p><pre><code class="hljs js"><span class="hljs-string">&quot;./src/**/*.&#123;html,js&#125;&quot;</span>, <span class="hljs-string">&quot;index.html&quot;</span>;</code></pre><p>add in to <code>tail.css</code></p><pre><code class="hljs css"><span class="hljs-keyword">@tailwind</span> base;<span class="hljs-keyword">@tailwind</span> components;<span class="hljs-keyword">@tailwind</span> utilities;</code></pre><p>run compiler:</p><pre><code class="hljs shell">npx tailwindcss -o ./src/tail.css --watch</code></pre><h4 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h4><p><a href="https://tailwindcss.com/docs/guides/vite#vue">Offial Guides in vue3</a></p><pre><code class="hljs shell">pnpm add -D tailwindcss postcss autoprefixer daisyui@latestnpx tailwindcss init -p<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">edit tailwind.config.js</span>content: [    &quot;./index.html&quot;,    &quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;,  ],<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">add the tailwind directives to your CSS</span>@tailwind base;@tailwind components;@tailwind utilities;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">App.vue</span>import &quot;./style.css&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Start your build process</span>pnpm run dev</code></pre><p>也支持使用 TS 进行配置：<code>tailwind.config.ts</code> <a href="https://tailwindcss.com/docs/configuration#using-esm-or-type-script">configuration#using-esm-or-type-script</a></p><pre><code class="hljs ts"><span class="hljs-comment">// tailwind.config.ts</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Config</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;tailwindcss&quot;</span>;<span class="hljs-keyword">import</span> colors <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;tailwindcss/colors&quot;</span>;<span class="hljs-keyword">import</span> &#123;  createVariableColors,  variableColorsPlugin,&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;tailwindcss-variable-colors&quot;</span>;<span class="hljs-keyword">const</span> <span class="hljs-attr">config</span>: <span class="hljs-title class_">Config</span> = &#123;  <span class="hljs-attr">content</span>: [<span class="hljs-string">&quot;./index.html&quot;</span>, <span class="hljs-string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>],  <span class="hljs-attr">theme</span>: &#123;    <span class="hljs-comment">// You can also not pass the colors parameter,</span>    <span class="hljs-comment">// it will use the colors from tailwindcss by default.</span>    <span class="hljs-attr">colors</span>: <span class="hljs-title function_">createVariableColors</span>(colors),  &#125;,  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">variableColorsPlugin</span>(colors)],&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> config satisfies <span class="hljs-title class_">Config</span>;</code></pre><p>使用 tailwind ui 组件库：</p><pre><code class="hljs shell">pnpm add @headlessui/vue @heroicons/vue</code></pre><ul><li>headlessui&#x2F;vue: 无样式组件库 <a href="https://headlessui.com/">headlessui</a></li><li>heroicons&#x2F;vue: 图标库 <a href="https://heroicons.com/">heroicons</a></li></ul><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>DaisyUI Tailwind CSS 组件库 (as plugins): <a href="https://daisyui.com/?lang=zh_hans">https://daisyui.com/?lang=zh_hans</a></p><pre><code class="hljs shell">pnpm i -D daisyui@latest<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">tailwind.config.js</span>module.exports = &#123;  //...  plugins: [require(&quot;daisyui&quot;)],&#125;</code></pre><h3 id="Base-基础"><a href="#Base-基础" class="headerlink" title="Base 基础"></a>Base 基础</h3><p>设计一个卡片：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4&quot;</span></span><span class="hljs-tag">&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-shrink-0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h-12 w-12&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/logo.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;ChitChat Logo&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-xl font-medium text-black&quot;</span>&gt;</span>ChitChat<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-gray-500&quot;</span>&gt;</span>You have a new message!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>Keywords:</p><p>p: padding 内边距<br>m: margin 外边距<br>w: width 宽度<br>x: 水平方向<br>y: 垂直方向</p><p>通过断点使用媒体查询：</p><pre><code class="hljs cs">sm: <span class="hljs-string">&#x27;480px&#x27;</span>, <span class="hljs-comment">// Small screen</span>md: <span class="hljs-string">&#x27;768px&#x27;</span>, <span class="hljs-comment">// Medium screen</span>lg: <span class="hljs-string">&#x27;976px&#x27;</span>,  <span class="hljs-comment">// Large screen</span>xl: <span class="hljs-string">&#x27;1440px&#x27;</span>, <span class="hljs-comment">// Extra large screen</span></code></pre><p><code>p-6</code> 表示设置内边距 (padding) 为 6。<br><code>max-w-sm</code> 表示设置最大宽度为 small(小屏幕) 的宽度。<br><code>mx-auto</code> 表示在水平方向上居中对齐。<br><code>bg-white</code> 表示设置背景颜色为白色。<br><code>rounded-xl</code> 表示设置圆角为 extra large(特别大)。<br><code>shadow-md</code> 表示设置阴影效果，阴影大小为 medium(中等)。<br><code>flex items-center space-x-4</code> 表示使用 Flexbox 布局，子元素水平排列，元素之间的间距为 4。</p><p><code>container</code> 用于创建一个包含内容的容器，通常用于限制内容的最大宽度，使内容在大屏幕上不至于过宽，提高内容的可读性和美观性。</p><p><code>mx-auto</code>: 这个类名用于水平居中元素，将元素的左右外边距设置为 auto，使元素在父容器中水平居中显示。</p><p><code>px-4</code>: 这个类名用于设置元素的水平内边距（padding），px 代表水平方向（左右），4 代表内边距的大小。在这种情况下，px-4 代表水平方向上的内边距为 4 个 CSS 像素。</p><p><code>gap</code>: 这个类名用于设置元素之间的间距，gap-4 代表元素之间的间距为 4 个 CSS 像素。</p><p>Flexbox 布局：</p><p>同时运用这两个可以使得元素在正中间：</p><ul><li><code>items-center</code> 应用于 flex 容器，用于在 <strong>主轴方向</strong> 上将子元素 <strong>垂直居中</strong> 。</li><li><code>justify-center</code> 应用于 flex 容器，用于在 <strong>主轴方向</strong> 上将子元素 <strong>水平居中</strong> 。</li></ul><p>Flex 参数：</p><p><code>flex-wrap</code> 类用于控制 Flex 容器中的项目在一行上 <strong>是否换行</strong> 显示。<br><code>flex-wrap-reverse</code>：允许项目在需要时换行显示，并且反转换行的方向。<br><code>flex-nowrap</code>：阻止项目换行，强制所有项目在一行上显示。<br>举个例子，如果你想要一个 Flex 容器中的项目在需要时自动换行</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;m-2 mx-auto flex h-screen flex-wrap content-center justify-center gap-2 bg-gradient-to-r from-purple-500 to-pink-500 align-middle text-2xl md:container&quot;</span></span><span class="hljs-tag">&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    01  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    02  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    03  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    04  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    01  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    02  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    03  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    04  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    01  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    02  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    03  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex h-20 w-20 items-center justify-center rounded-full bg-pink-200 hover:shadow-2xl&quot;</span></span><span class="hljs-tag">  &gt;</span>    04  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>prettier 自动排序 order</p><pre><code class="hljs shell">pnpm install -D prettier-plugin-tailwindcss// .prettierrc&#123;  &quot;plugins&quot;: [&quot;prettier-plugin-tailwindcss&quot;]  &quot;tailwindConfig&quot;: &quot;./tailwind.config.js&quot;&#125;</code></pre><p>正则安全清除所有暗黑模式：</p><pre><code class="hljs regex">\S*dark:[^&quot; &gt;]*</code></pre><h2 id="Gsap-Animation"><a href="#Gsap-Animation" class="headerlink" title="Gsap Animation"></a>Gsap Animation</h2><p>GSAP 是一个高性能的动画库，可以实现更复杂的动画效果。</p><p>ref:</p><ol><li>GSAP 中文文档 <a href="https://gsap.framer.wiki/state">GSAP 中文文档</a></li></ol><h2 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h2><h2 id="相对定位-relative-和绝对定位-absolute"><a href="#相对定位-relative-和绝对定位-absolute" class="headerlink" title="相对定位 (relative) 和绝对定位 (absolute)"></a>相对定位 (relative) 和绝对定位 (absolute)</h2><p>ref: <a href="https://blog.csdn.net/gnail_oug/article/details/77564684">CSS相对定位和绝对定位详解_css绝对定位代码-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-樣式入門&quot;&gt;&lt;a href=&quot;#CSS-樣式入門&quot; class=&quot;headerlink&quot; title=&quot;CSS 樣式入門&quot;&gt;&lt;/a&gt;CSS 樣式入門&lt;/h1&gt;&lt;h2 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/categories/JavaScript/"/>
    
    
    <category term="Design" scheme="https://www.whaleluo.top/tags/Design/"/>
    
    <category term="前端" scheme="https://www.whaleluo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://www.whaleluo.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 项目上手学习——V3 Admin</title>
    <link href="https://www.whaleluo.top/javascript/vue3-v3-admin-stady/"/>
    <id>https://www.whaleluo.top/javascript/vue3-v3-admin-stady/</id>
    <published>2024-02-29T08:43:20.000Z</published>
    <updated>2024-02-29T08:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-项目上手学习——V3-Admin"><a href="#Vue3-项目上手学习——V3-Admin" class="headerlink" title="Vue3 项目上手学习——V3 Admin"></a>Vue3 项目上手学习——V3 Admin</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>学了那么久的 Vue3，终于到上手实战项目的时候了。之前一直是看视频教程，没有真正的上手打开 VSC 摸过项目，是时候写代码了。</p><p>这次选用的是 V3 Admin 这个项目，毕竟人家使用了主流技术 <strong>Vue3 + Pinia + Router + Vite + Element-Plus</strong> 。本文是在官网文档的基础上进一步抽丝剥茧分析这个项目，并提炼一些 <strong>通用写法</strong>。</p><p>reference：</p><ol><li>GitHub <a href="https://github.com/un-pany/v3-admin-vite">v3-admin-vite</a></li><li>项目对应老鸟中文文档：<a href="https://juejin.cn/post/7089377403717287972">V3 Admin Vite 中文文档 - 掘金</a></li><li>适用于小白的 step by step tutorial <a href="https://juejin.cn/column/7207659644487139387">V3 Admin Vite - pany 的专栏 - 掘金</a></li></ol><h2 id="Technology-Stack-技术栈"><a href="#Technology-Stack-技术栈" class="headerlink" title="Technology Stack 技术栈"></a>Technology Stack 技术栈</h2><ul><li><strong>Vue3</strong>：采用 Vue3 + script setup 最新的 Vue3 组合式 API</li><li><strong>Element Plus</strong>：Element UI 的 Vue3 版本</li><li><strong>Pinia</strong>: 传说中的 Vuex5</li><li><strong>Vite</strong>：真的很快，取代 webpack</li><li><strong>Vue Router</strong>：路由路由</li><li><strong>TypeScript</strong>：JavaScript 语言的超集</li><li><strong>PNPM</strong>：更快速的，节省磁盘空间的包管理工具</li><li><strong>Scss</strong>：和 Element Plus 保持一致</li><li><strong>CSS 变量</strong>：主要控制项目的布局和颜色</li><li><strong>ESlint</strong>：代码校验</li><li><strong>Prettier</strong>：代码格式化</li><li><strong>Axios</strong>：发送网络请求（已封装好）</li><li><strong>UnoCSS</strong>：具有高性能且极具灵活性的即时原子化 CSS 引擎</li><li><strong>注释</strong>：各个配置项都写有尽可能详细的注释</li><li><strong>兼容移动端</strong>: 布局兼容移动端页面分辨率</li></ul><h2 id="Prepare-准备"><a href="#Prepare-准备" class="headerlink" title="Prepare 准备"></a>Prepare 准备</h2><h3 id="Install-base-Module"><a href="#Install-base-Module" class="headerlink" title="Install base Module"></a>Install base Module</h3><p>Proxy first，在 <strong>墙国</strong>，下个 npm 包前提是一个好用的代理：</p><pre><code class="hljs shell">npm config listnpm config set proxy=socks5://127.0.0.1:10808/npm config delete proxy</code></pre><p>Install module</p><pre><code class="hljs shell">npm install -g pnpm<span class="hljs-meta prompt_"># </span><span class="language-bash">like npm insall xxx</span>pnpm add packageName<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">initiate vite vue3</span>pnpm add vite -gpnpm create vite@latestpnpm installpnpm add -D typescript ts-node @types/node lesspnpm add --save-dev prettier</code></pre><h3 id="Install-ElementUI-Plus"><a href="#Install-ElementUI-Plus" class="headerlink" title="Install ElementUI-Plus"></a>Install ElementUI-Plus</h3><pre><code class="hljs sh">pnpm install element-plus</code></pre><p>In <code>main.ts</code></p><pre><code class="hljs ts"><span class="hljs-comment">// Element Plus</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;element-plus/dist/index.css&quot;</span>;<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>);app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</code></pre><h3 id="安装按需引入"><a href="#安装按需引入" class="headerlink" title="安装按需引入"></a>安装按需引入</h3><pre><code class="hljs sh">pnpm install -D unplugin-vue-components unplugin-auto-import</code></pre><p>向 <code>vite.config.ts</code> 添加插件：</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-auto-import/vite&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span><span class="hljs-attr">plugins</span>: [    <span class="hljs-comment">// …</span>    <span class="hljs-title class_">AutoImport</span>(&#123;      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],    &#125;),    <span class="hljs-title class_">Components</span>(&#123;      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],    &#125;),  ],</code></pre><p>configure：</p><pre><code class="hljs ts"><span class="hljs-title class_">AutoImport</span>(&#123;      <span class="hljs-comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span>      <span class="hljs-attr">imports</span>: [<span class="hljs-string">&quot;vue&quot;</span>],      <span class="hljs-comment">// eslint auto import</span>      <span class="hljs-attr">eslintrc</span>: &#123;        <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动生成 eslint 规则，建议生成之后设置 false</span>        <span class="hljs-attr">filepath</span>: <span class="hljs-string">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class="hljs-comment">// 指定自动导入函数 eslint 规则的文件</span>      &#125;,      <span class="hljs-comment">//</span>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>(), <span class="hljs-title class_">IconsResolver</span>(&#123;&#125;)],      <span class="hljs-attr">vueTemplate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在 vue 模板中自动导入</span>      <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;auto-imports.d.ts&quot;</span>), <span class="hljs-comment">// 指定自动导入函数TS类型声明文件路径</span>    &#125;),    <span class="hljs-comment">// 组件</span>    <span class="hljs-title class_">Components</span>(&#123;      <span class="hljs-attr">resolvers</span>: [        <span class="hljs-comment">// 自动导入 Element Plus 组件</span>        <span class="hljs-title class_">ElementPlusResolver</span>(),        <span class="hljs-comment">// 自动注册图标组件</span>        <span class="hljs-title class_">IconsResolver</span>(&#123;          <span class="hljs-attr">enabledCollections</span>: [<span class="hljs-string">&quot;ep&quot;</span>],        &#125;),      ],      <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;components.d.ts&quot;</span>), <span class="hljs-comment">// 指定自动导入组件TS类型声明文件路径</span>    &#125;),    <span class="hljs-comment">// 图标</span>    <span class="hljs-title class_">Icons</span>(&#123;      <span class="hljs-comment">// 自动安装图标库</span>      <span class="hljs-attr">autoInstall</span>: <span class="hljs-literal">true</span>,    &#125;),</code></pre><h2 id="Configure-配置项"><a href="#Configure-配置项" class="headerlink" title="Configure 配置项"></a>Configure 配置项</h2><h3 id="Vscode-code-snippets"><a href="#Vscode-code-snippets" class="headerlink" title="Vscode code snippets"></a>Vscode code snippets</h3><p>vue3 code snippet：</p><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;Vue3 SFC template&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vue3 SFC&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>      <span class="hljs-string">&quot;&lt;template&gt;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;\t&lt;div class=\&quot;app-container\&quot;&gt;…&lt;/div&gt;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;&lt;/template&gt;\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;&lt;script lang=\&quot;ts\&quot; setup&gt;&lt;/script&gt;\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;&lt;style scoped&gt;&lt;/style&gt;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;$1&quot;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vue3 SFC&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre><p>vue3 hook code snippet:</p><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;Vue3 Hook 代码结构一键生成&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vue3 Hook&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>      <span class="hljs-string">&quot;import &#123; ref &#125; from \&quot;vue\&quot;\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;const refName1 = ref&lt;string&gt;(\&quot;This is a ref variable\&quot;)\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;export function useHookName() &#123;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;\tconst refName2 = ref&lt;string&gt;(\&quot;This is a ref variable\&quot;)\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;\tconst fnName = () =&gt; &#123;&#125;\n&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;\treturn &#123; refName1, refName2, fnName &#125;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;$1&quot;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vue3 Hook&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre><h2 id="Code-specification-代码规范"><a href="#Code-specification-代码规范" class="headerlink" title="Code specification 代码规范"></a>Code specification 代码规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>Components 组件和 Views 页面命名规范，这样做是为了更好的区分 component 和 view</p><ol><li><strong>Components 组件</strong>：都采用单词大写开头的  <strong>大驼峰</strong>  命名方式 (PascalCase)：<code>@/components/Index.vue</code> 、<code>@/components/NotifyList.vue</code></li><li><strong>Views 页面</strong>：页面由 components 组件组成，一律采用 <strong>短横线连接 (kebab-case)</strong>  的命名方式，比如：- <code>@/views/fetch-select.vue</code></li></ol><p><strong>hook 命名</strong>：采用  **小驼峰 (camelCase)**，比如：<code>@/hooks/useTheme.ts</code>。</p><p><strong>Prop 命名</strong>：在声明 prop 的时候，其命名应该始终采用  **小驼峰 (camelCase)**。</p><pre><code class="hljs ts"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;  <span class="hljs-comment">/** 打开全屏提示语 */</span>  <span class="hljs-attr">openTips</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;全屏&quot;</span> &#125;,  <span class="hljs-comment">/** 关闭全屏提示语 */</span>  <span class="hljs-attr">exitTips</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;退出全屏&quot;</span> &#125;,&#125;);</code></pre><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li>prop 的定义应该尽量详细，至少需要指定其类型</li><li>在组件上总是必须用 key 配合 v-for，以便维护内部组件及其子树的状态。</li><li>避免 v-if 和 v-for 用在一起。</li></ul><h3 id="Annotation-注释规范"><a href="#Annotation-注释规范" class="headerlink" title="Annotation 注释规范"></a>Annotation 注释规范</h3><p>由于项目采用 TS 5.x 进行开发，为了获得更好的 TS 提示，项目采用了大量的  <code>/** xxx */</code>  注释，它的优点就是鼠标放上去会有注释显示出来。</p><h2 id="Code-format-and-verify-代码格式化和校验"><a href="#Code-format-and-verify-代码格式化和校验" class="headerlink" title="Code format and verify 代码格式化和校验"></a>Code format and verify 代码格式化和校验</h2><h4 id="tsconfig"><a href="#tsconfig" class="headerlink" title=".tsconfig"></a>.tsconfig</h4><p><strong>项目最重要的 ts 配置</strong></p><p><code>.tsconfig</code></p><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">/** https://cn.vitejs.dev/guide/features.html#typescript-compiler-options */</span>    <span class="hljs-attr">&quot;useDefineForClassFields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bundler&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">/** TS 严格模式 */</span>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;preserve&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;jsxImportSource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;importHelpers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;experimentalDecorators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;resolveJsonModule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">/** https://cn.vitejs.dev/guide/features.html#typescript-compiler-options */</span>    <span class="hljs-attr">&quot;isolatedModules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dom&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;skipLibCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>      <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;vite/client&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">/** Element Plus 的 Volar 插件支持 */</span>      <span class="hljs-string">&quot;element-plus/global&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-string">&quot;vitest&quot;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">/** baseUrl 用来告诉编译器到哪里去查找模块，使用非相对模块时必须配置此项 */</span>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">/** 非相对模块导入的路径映射配置，根据 baseUrl 配置进行路径计算 */</span>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span>    <span class="hljs-punctuation">&#125;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>    <span class="hljs-string">&quot;src/**/*.ts&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;src/**/*.d.ts&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;src/**/*.tsx&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;src/**/*.vue&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;tests/**/*.ts&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;types/**/*.d.ts&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;vite.config.ts&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-string">&quot;vitest.config.ts&quot;</span>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">/** 编译器默认排除的编译文件 */</span>  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node_modules&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre><h4 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h4><ul><li><code>package.json</code> 文件的 <code>devDependencies</code> 中有所需的 ESlint 依赖包。</li><li><code>ESlint</code> 的<strong>配置文件</strong>是根目录下的 <code>.eslintrc.cjs</code>，它里面定义了很多校验规则</li><li><code>ESlint</code> 的<strong>忽略文件</strong>是根目录下的 <code>.eslintignore</code>，它里面定义的目录和文件都不会被 ESlint 检查</li></ul><p>.eslintrc.cjs</p><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">env</span>: &#123;    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">es6</span>: <span class="hljs-literal">true</span>,  &#125;,  <span class="hljs-attr">extends</span>: [    <span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span>,    <span class="hljs-string">&quot;eslint:recommended&quot;</span>,    <span class="hljs-string">&quot;@vue/typescript/recommended&quot;</span>,    <span class="hljs-string">&quot;@vue/prettier&quot;</span>,    <span class="hljs-string">&quot;@vue/eslint-config-typescript&quot;</span>,  ],  <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;vue-eslint-parser&quot;</span>,  <span class="hljs-attr">parserOptions</span>: &#123;    <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;@typescript-eslint/parser&quot;</span>,    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">2020</span>,    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>,    <span class="hljs-attr">jsxPragma</span>: <span class="hljs-string">&quot;React&quot;</span>,    <span class="hljs-attr">ecmaFeatures</span>: &#123;      <span class="hljs-attr">jsx</span>: <span class="hljs-literal">true</span>,      <span class="hljs-attr">tsx</span>: <span class="hljs-literal">true</span>,    &#125;,  &#125;,  <span class="hljs-attr">rules</span>: &#123;    <span class="hljs-comment">// TS</span>    <span class="hljs-string">&quot;@typescript-eslint/no-explicit-any&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;no-debugger&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/explicit-module-boundary-types&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/ban-types&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/ban-ts-comment&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/no-empty-function&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/no-non-null-assertion&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;@typescript-eslint/no-unused-vars&quot;</span>: [      <span class="hljs-string">&quot;error&quot;</span>,      &#123;        <span class="hljs-attr">argsIgnorePattern</span>: <span class="hljs-string">&quot;^_&quot;</span>,        <span class="hljs-attr">varsIgnorePattern</span>: <span class="hljs-string">&quot;^_&quot;</span>,      &#125;,    ],    <span class="hljs-string">&quot;no-unused-vars&quot;</span>: [      <span class="hljs-string">&quot;error&quot;</span>,      &#123;        <span class="hljs-attr">argsIgnorePattern</span>: <span class="hljs-string">&quot;^_&quot;</span>,        <span class="hljs-attr">varsIgnorePattern</span>: <span class="hljs-string">&quot;^_&quot;</span>,      &#125;,    ],    <span class="hljs-comment">// Vue</span>    <span class="hljs-string">&quot;vue/no-v-html&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;vue/require-default-prop&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;vue/require-explicit-emits&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;vue/multi-word-component-names&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;vue/html-self-closing&quot;</span>: [      <span class="hljs-string">&quot;error&quot;</span>,      &#123;        <span class="hljs-attr">html</span>: &#123;          <span class="hljs-attr">void</span>: <span class="hljs-string">&quot;always&quot;</span>,          <span class="hljs-attr">normal</span>: <span class="hljs-string">&quot;always&quot;</span>,          <span class="hljs-attr">component</span>: <span class="hljs-string">&quot;always&quot;</span>,        &#125;,        <span class="hljs-attr">svg</span>: <span class="hljs-string">&quot;always&quot;</span>,        <span class="hljs-attr">math</span>: <span class="hljs-string">&quot;always&quot;</span>,      &#125;,    ],    <span class="hljs-comment">// Prettier</span>    <span class="hljs-string">&quot;prettier/prettier&quot;</span>: [      <span class="hljs-string">&quot;error&quot;</span>,      &#123;        <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">&quot;auto&quot;</span>,      &#125;,    ],  &#125;,&#125;;</code></pre><p>.eslintignore：</p><pre><code class="hljs text"># Eslint 会忽略的文件.DS_Storenode_modulesdistdist-ssr*.local.npmrc</code></pre><h4 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h4><ul><li><code>package.json</code> 文件的 <code>devDependencies</code> 中有所需的 Prettier 依赖包</li><li><code>Prettier</code> 的<strong>配置文件</strong>是根目录下的 <code>prettier.config.js</code>，它里面定义了很多格式化规则</li><li><code>Prettier</code> 的<strong>忽略文件</strong>是根目录下的 <code>.prettierignore</code>，它里面定义的目录和文件都不会被 Prettier 格式化</li></ul><p><code>prettier.config.js</code>：</p><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 修改配置后重启编辑器</span><span class="hljs-comment"> * 配置项文档：https://prettier.io/docs/en/configuration.html</span><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&quot;prettier&quot;).Config</span>&#125;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">/** 每一行的宽度 */</span>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">120</span>,  <span class="hljs-comment">/** 在对象中的括号之间是否用空格来间隔 */</span>  <span class="hljs-attr">bracketSpacing</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">/** 箭头函数的参数无论有几个，都要括号包裹 */</span>  <span class="hljs-attr">arrowParens</span>: <span class="hljs-string">&quot;always&quot;</span>,  <span class="hljs-comment">/** 换行符的使用 */</span>  <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">&quot;auto&quot;</span>,  <span class="hljs-comment">/** 是否采用单引号 */</span>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">/** 对象或者数组的最后一个元素后面不要加逗号 */</span>  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&quot;none&quot;</span>,  <span class="hljs-comment">/** 是否加分号 */</span>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">/** 缩进 */</span>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>,&#125;;</code></pre><p><code>.prettierignore</code></p><pre><code class="hljs text"># Prettier 会忽略的文件.DS_Storenode_modulesdistdist-ssr*.local.npmrc</code></pre><h3 id="vite-config-ts"><a href="#vite-config-ts" class="headerlink" title="vite.config.ts"></a>vite.config.ts</h3><p>项目 Vite 最重要的配置</p><p><code>vite.config.ts</code></p><pre><code class="hljs ts"><span class="hljs-comment">/// &lt;reference types=&quot;vitest&quot; /&gt;</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">type</span> <span class="hljs-title class_">ConfigEnv</span>, <span class="hljs-keyword">type</span> <span class="hljs-title class_">UserConfigExport</span>, loadEnv &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-keyword">import</span> path, &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span><span class="hljs-keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-plugin-svg-icons&quot;</span><span class="hljs-keyword">import</span> svgLoader <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-svg-loader&quot;</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">UnoCSS</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unocss/vite&quot;</span><span class="hljs-comment">/** 配置项文档：https://cn.vitejs.dev/config */</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">configEnv</span>: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfigExport</span> =&gt;</span> &#123;  <span class="hljs-comment">// 从文件加载环境变量</span>  <span class="hljs-keyword">const</span> viteEnv = <span class="hljs-title function_">loadEnv</span>(configEnv.<span class="hljs-property">mode</span>, process.<span class="hljs-title function_">cwd</span>()) <span class="hljs-keyword">as</span> <span class="hljs-title class_">ImportMetaEnv</span>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">VITE_PUBLIC_PATH</span> &#125; = viteEnv  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-comment">/** 打包时根据实际情况修改 base */</span>    <span class="hljs-attr">base</span>: <span class="hljs-variable constant_">VITE_PUBLIC_PATH</span>,    <span class="hljs-attr">resolve</span>: &#123;      <span class="hljs-attr">alias</span>: &#123;        <span class="hljs-comment">/** @ 符号指向 src 目录 */</span>        <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./src&quot;</span>)      &#125;    &#125;,    <span class="hljs-attr">server</span>: &#123;      <span class="hljs-comment">/** 设置 host: true 才可以使用 Network 的形式，以 IP 访问项目 */</span>      <span class="hljs-attr">host</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// host: &quot;0.0.0.0&quot;</span>      <span class="hljs-comment">/** 端口号 */</span>      <span class="hljs-attr">port</span>: <span class="hljs-number">3333</span>,      <span class="hljs-comment">/** 是否自动打开浏览器 */</span>      <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>,      <span class="hljs-comment">/** 跨域设置允许 */</span>      <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">/** 端口被占用时，是否直接退出 */</span>      <span class="hljs-attr">strictPort</span>: <span class="hljs-literal">false</span>,      <span class="hljs-comment">/** 接口代理 */</span>      <span class="hljs-attr">proxy</span>: &#123;        <span class="hljs-string">&quot;/api/v1&quot;</span>: &#123;          <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://mock.mengxuegu.com/mock/63218b5fb4c53348ed2bc212&quot;</span>,          <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,          <span class="hljs-comment">/** 是否允许跨域 */</span>          <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>        &#125;      &#125;,      <span class="hljs-comment">/** 预热常用文件，提高初始页面加载速度 */</span>      <span class="hljs-attr">warmup</span>: &#123;        <span class="hljs-attr">clientFiles</span>: []      &#125;    &#125;,    <span class="hljs-attr">build</span>: &#123;      <span class="hljs-comment">/** 单个 chunk 文件的大小超过 2048KB 时发出警告 */</span>      <span class="hljs-attr">chunkSizeWarningLimit</span>: <span class="hljs-number">2048</span>,      <span class="hljs-comment">/** 禁用 gzip 压缩大小报告 */</span>      <span class="hljs-attr">reportCompressedSize</span>: <span class="hljs-literal">false</span>,      <span class="hljs-comment">/** 打包后静态资源目录 */</span>      <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&quot;static&quot;</span>,      <span class="hljs-attr">rollupOptions</span>: &#123;        <span class="hljs-attr">output</span>: &#123;          <span class="hljs-comment">/**</span><span class="hljs-comment">           * 分块策略</span><span class="hljs-comment">           * 1. 注意这些包名必须存在，否则打包会报错</span><span class="hljs-comment">           * 2. 如果你不想自定义 chunk 分割策略，可以直接移除这段配置</span><span class="hljs-comment">           */</span>          <span class="hljs-attr">manualChunks</span>: &#123;            <span class="hljs-attr">vue</span>: [<span class="hljs-string">&quot;vue&quot;</span>, <span class="hljs-string">&quot;vue-router&quot;</span>, <span class="hljs-string">&quot;pinia&quot;</span>],            <span class="hljs-attr">element</span>: [<span class="hljs-string">&quot;element-plus&quot;</span>, <span class="hljs-string">&quot;@element-plus/icons-vue&quot;</span>],            <span class="hljs-comment">// vxe: [&quot;vxe-table&quot;, &quot;vxe-table-plugin-element&quot;, &quot;xe-utils&quot;]</span>          &#125;        &#125;      &#125;    &#125;,    <span class="hljs-comment">/** 混淆器 */</span>    <span class="hljs-attr">esbuild</span>: &#123;      <span class="hljs-comment">/** 打包时移除 console.log */</span>      <span class="hljs-attr">pure</span>: [<span class="hljs-string">&quot;console.log&quot;</span>],      <span class="hljs-comment">/** 打包时移除 debugger */</span>      <span class="hljs-attr">drop</span>: [<span class="hljs-string">&quot;debugger&quot;</span>],      <span class="hljs-comment">/** 打包时移除所有注释 */</span>      <span class="hljs-attr">legalComments</span>: <span class="hljs-string">&quot;none&quot;</span>    &#125;,    <span class="hljs-comment">/** Vite 插件 */</span>    <span class="hljs-attr">plugins</span>: [      <span class="hljs-title function_">vue</span>(),      <span class="hljs-comment">// vueJsx(),</span>      <span class="hljs-comment">/** 将 SVG 静态图转化为 Vue 组件 */</span>      <span class="hljs-title function_">svgLoader</span>(&#123; <span class="hljs-attr">defaultImport</span>: <span class="hljs-string">&quot;url&quot;</span> &#125;),      <span class="hljs-comment">/** SVG */</span>      <span class="hljs-comment">// createSvgIconsPlugin(&#123;</span>        <span class="hljs-attr">iconDirs</span>: [path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;src/icons/svg&quot;</span>)],        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&quot;icon-[dir]-[name]&quot;</span>      &#125;),      <span class="hljs-comment">/** UnoCSS */</span>      <span class="hljs-title class_">UnoCSS</span>()    ],    <span class="hljs-comment">/** Vitest 单元测试配置：https://cn.vitest.dev/config */</span>    <span class="hljs-attr">test</span>: &#123;      <span class="hljs-attr">include</span>: [<span class="hljs-string">&quot;tests/**/*.test.ts&quot;</span>],      <span class="hljs-attr">environment</span>: <span class="hljs-string">&quot;jsdom&quot;</span>    &#125;  &#125;&#125;</code></pre><h3 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h3><p>环境变量</p><p><code>.env</code></p><pre><code class="hljs text"># 所有环境自定义的环境变量（命名必须以 VITE_ 开头）## 项目标题VITE_APP_TITLE = V3 Admin Vite##  打包路径（就是网站前缀，例如部署到 https://whaleluo.top/v3-admin-vite/ 域名下，就需要填写 /v3-admin-vite/）VITE_PUBLIC_PATH = &#x27;/&#x27;</code></pre><h3 id="editorConfig"><a href="#editorConfig" class="headerlink" title=".editorConfig"></a>.editorConfig</h3><p><strong>editorConfig</strong> 是一个适用于 <strong>多语言</strong>，多 IDE 的代码格式化工具。有利于各种项目 <strong>形成统一的代码格式风格</strong>。<br>建议在所有项目中启动 <strong>editorConfig</strong> 因为真的很好用。</p><p>.editorConfig</p><pre><code class="hljs ini"><span class="hljs-comment"># 修改配置后重启编辑器</span><span class="hljs-comment"># 配置项文档：https://editorconfig.org/</span><span class="hljs-comment"># 告知 EditorConfig 插件，当前即是根文件</span><span class="hljs-attr">root</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># python format config</span><span class="hljs-section">[*.py]</span><span class="hljs-attr">indent_style</span> = space<span class="hljs-attr">indent_size</span> = <span class="hljs-number">4</span><span class="hljs-comment"># 适用全部文件</span><span class="hljs-section">[*]</span><span class="hljs-comment">## 设置字符集</span><span class="hljs-attr">charset</span> = utf-<span class="hljs-number">8</span><span class="hljs-comment">## 缩进风格 space | tab，建议 space（会自动继承给 Prettier）</span><span class="hljs-attr">indent_style</span> = space<span class="hljs-comment">## 缩进的空格数（会自动继承给 Prettier）</span><span class="hljs-attr">indent_size</span> = <span class="hljs-number">2</span><span class="hljs-comment">## 换行符类型 lf | cr | crlf，一般都是设置为 lf</span><span class="hljs-attr">end_of_line</span> = lf<span class="hljs-comment">## 是否在文件末尾插入空白行</span><span class="hljs-attr">insert_final_newline</span> = <span class="hljs-literal">true</span><span class="hljs-comment">## 是否删除一行中的前后空格</span><span class="hljs-attr">trim_trailing_whitespace</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># 适用 .md 文件</span><span class="hljs-section">[*.md]</span><span class="hljs-attr">insert_final_newline</span> = <span class="hljs-literal">false</span><span class="hljs-attr">trim_trailing_whitespace</span> = <span class="hljs-literal">false</span></code></pre><h4 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h4><p>npm、cnpm 包管理工具的配置项，设置代理之类的。</p><p><code>.npmrc</code></p><pre><code class="hljs ini"><span class="hljs-comment"># 通过该配置兜底解决组件没有类型提示的问题</span><span class="hljs-attr">shamefully-hoist</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># Proxy</span><span class="hljs-comment"># registry = https://registry.npm.taobao.org</span><span class="hljs-attr">https-proxy</span> = socks5://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><span class="hljs-attr">http-proxy</span> = socks5://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span></code></pre><h4 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h4><p>settings.json</p><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;explicit&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[vue]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[typescript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[json]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[jsonc]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[html]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[css]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;[scss]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre><h3 id="Git-commit-规范"><a href="#Git-commit-规范" class="headerlink" title="Git commit 规范"></a>Git commit 规范</h3><ul><li><strong>feat:</strong> 增加新的业务功能</li><li><strong>fix:</strong> 修复业务问题&#x2F;BUG</li><li><strong>perf:</strong> 优化性能</li><li><strong>style:</strong> 更改代码风格, 不影响运行结果</li><li><strong>refactor:</strong> 重构代码</li><li><strong>revert:</strong> 撤销更改</li><li><strong>test:</strong> 测试相关, 不涉及业务代码的更改</li><li><strong>docs:</strong> 文档和注释相关</li><li><strong>chore:</strong> 更新依赖&#x2F;修改脚手架配置等琐事</li><li><strong>workflow:</strong> 工作流改进</li><li><strong>ci:</strong> 持续集成相关</li><li><strong>types:</strong> 类型定义文件更改</li><li><strong>wip:</strong> 开发中</li></ul><p><strong>完成一件事情，就提交一次 commit</strong>。而不是等到你写完一整天的代码后，才在下班前只提交一次。</p><h2 id="vue-router-路由"><a href="#vue-router-路由" class="headerlink" title="vue-router 路由"></a>vue-router 路由</h2><p>CH Document：<a href="https://router.vuejs.org/zh/installation.html">安装 | Vue Router</a></p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><pre><code class="hljs shell">pnpm add vue-router@4</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-项目上手学习——V3-Admin&quot;&gt;&lt;a href=&quot;#Vue3-项目上手学习——V3-Admin&quot; class=&quot;headerlink&quot; title=&quot;Vue3 项目上手学习——V3 Admin&quot;&gt;&lt;/a&gt;Vue3 项目上手学习——V3 Admin&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LightRoom 后期调色学习笔记</title>
    <link href="https://www.whaleluo.top/lightroom-tutorial/"/>
    <id>https://www.whaleluo.top/lightroom-tutorial/</id>
    <published>2024-02-13T13:19:26.000Z</published>
    <updated>2024-02-13T13:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LightRoom-后期调色学习笔记"><a href="#LightRoom-后期调色学习笔记" class="headerlink" title="LightRoom 后期调色学习笔记"></a>LightRoom 后期调色学习笔记</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>最近闲来无事，沉浸于光影的美伦变幻，所以系统学一下后期调色、对比度、饱和度、色相等知识。LightRoom 是一个专业的调色软件，和 PS 配合使用并支持 <strong>RAW</strong> 模式。</p><p>RAW 模式是相机把 <strong>CMOS 镜头感应光</strong> 的初始数据都保存在里面了，方便后期调色。</p><p>Reference：</p><ol><li>B 站的一个介绍<strong>影视后期</strong> UP 主 <strong>Genji 真想教会你</strong>，通过 90 分钟的视频给你介绍各种后期软件如何使用，真是太方面想要速成的小白白了： <a href="https://www.bilibili.com/video/BV1g64y1474s/">拜托三连了！这绝对是全B站最用心（没有之一）的Lr公开课程，调光调色就靠它！</a></li></ol><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ol><li>LUT (LookupTable)：颜色查找表，色卡，一个算法，让每个画面中的像素完成在色彩空间上的向量变化。通俗点就是 <strong>滤镜</strong>。</li><li>RGB（红绿蓝）：xyz 轴标注着红色、绿色、蓝色的空间坐标。</li></ol><h2 id="光色理论"><a href="#光色理论" class="headerlink" title="光色理论"></a>光色理论</h2><p><strong>红橙黄绿青蓝紫</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><strong>三相色</strong>色盘</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial-1.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial-1.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>如果想要画面更蓝，就<strong>减少黄色</strong>，或者<strong>增加</strong>与蓝色相邻的过渡色 <strong>品红</strong> 和 <strong>泛蓝</strong></p><h3 id="CMYK-显色原理-通透？"><a href="#CMYK-显色原理-通透？" class="headerlink" title="CMYK 显色原理 通透？"></a>CMYK 显色原理 通透？</h3><p>上面比下面的图片 <strong>对比度</strong> 更高，更 <strong>通透</strong>。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial-2.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/LightRoom-Tutorial-2.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LightRoom-后期调色学习笔记&quot;&gt;&lt;a href=&quot;#LightRoom-后期调色学习笔记&quot; class=&quot;headerlink&quot; title=&quot;LightRoom 后期调色学习笔记&quot;&gt;&lt;/a&gt;LightRoom 后期调色学习笔记&lt;/h1&gt;&lt;h2 id=&quot;S</summary>
      
    
    
    
    <category term="Design" scheme="https://www.whaleluo.top/categories/Design/"/>
    
    
    <category term="Design" scheme="https://www.whaleluo.top/tags/Design/"/>
    
    <category term="设计" scheme="https://www.whaleluo.top/tags/%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="后期" scheme="https://www.whaleluo.top/tags/%E5%90%8E%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>程序设计模式 Program Design Patterns</title>
    <link href="https://www.whaleluo.top/program-design-patterns/"/>
    <id>https://www.whaleluo.top/program-design-patterns/</id>
    <published>2024-02-02T09:18:32.000Z</published>
    <updated>2024-02-02T09:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序设计模式-Design-Patterns"><a href="#程序设计模式-Design-Patterns" class="headerlink" title="程序设计模式 Design Patterns"></a>程序设计模式 Design Patterns</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>在写一些复杂度、集成度高的程序时，常常会写很多 class 很多 methods，如何将他们很好的组合起来，后期方便扩展和维护，避免写出 <strong>屎山代码</strong>，这时候就需要一个约定俗称的 <strong>程序设计模式</strong> （Program Design Patterns）。</p><p>本文以 Python 和 Typescript 为例子，介绍 22 种设计模式的实现和在实际开发中如何去高效使用。</p><p>Reference：</p><ol><li>Refactoring guru 图解设计模式&#x2F;重构 教程网站：<a href="https://refactoringguru.cn/design-patterns/">常用设计模式有哪些？</a></li></ol><h2 id="工厂方法模式-factory-method"><a href="#工厂方法模式-factory-method" class="headerlink" title="工厂方法模式 factory method"></a>工厂方法模式 factory method</h2><p>工厂方法将创建产品的代码与实际使用产品的代码分离， 从而能在不影响其他代码的情况下扩展产品创建部分代码。</p><p>例如， 如果需要向应用中添加一种新产品， 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p><p><strong>开闭原则:</strong> 在扩展新的类时，尽量不要修改原有代码。</p><p>伪代码:</p><pre><code class="hljs java"><span class="hljs-comment">// 工厂方法基类,描述产品的大类型</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dialog</span> is    <span class="hljs-comment">// 创建者类声明的工厂方法必须返回一个具体产品类的对象。</span>    <span class="hljs-comment">// 创建者的子类通常会提供该方法的实现。</span>    <span class="hljs-comment">// 创建者还可提供一些工厂方法的默认实现。</span>    <span class="hljs-keyword">abstract</span> method <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span>:Button    <span class="hljs-comment">// 请注意，创建者的主要职责并非是创建产品。其中通常会包含一些核心业务逻辑</span>    <span class="hljs-comment">// 这些逻辑依赖于由工厂方法返回的产品对象。</span>    <span class="hljs-comment">// 子类可通过重写工厂方法并使其返回不同类型的产品来间接修改业务逻辑。</span>    method <span class="hljs-title function_">render</span><span class="hljs-params">()</span> is        <span class="hljs-comment">// 调用工厂方法创建一个产品对象.</span>        <span class="hljs-comment">// 子类可以重写 createButton 方法以更改产品类型</span>        <span class="hljs-type">Button</span> <span class="hljs-variable">okButton</span> <span class="hljs-operator">=</span> createButton()        <span class="hljs-comment">// 现在使用产品。</span>        okButton.onClick(closeDialog)        <span class="hljs-comment">// 间接调用产品的 render 方法</span>        okButton.render()<span class="hljs-comment">// 具体创建者将重写工厂方法以改变其所返回的产品类型。</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dialog</span> is    method <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span>:Button is        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowsButton</span>()<span class="hljs-keyword">class</span> <span class="hljs-title class_">WebDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dialog</span> is    method <span class="hljs-title function_">createButton</span><span class="hljs-params">()</span>:Button is        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLButton</span>()<span class="hljs-comment">// 产品接口中将声明所有具体产品都必须实现的操作。</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Button</span> is    method <span class="hljs-title function_">render</span><span class="hljs-params">()</span>    method <span class="hljs-title function_">onClick</span><span class="hljs-params">(f)</span><span class="hljs-comment">// 具体产品需提供产品接口的各种实现。</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowsButton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Button</span> is    method <span class="hljs-title function_">render</span><span class="hljs-params">(a, b)</span> is        <span class="hljs-comment">// 根据 Windows 样式渲染按钮。</span>    method <span class="hljs-title function_">onClick</span><span class="hljs-params">(f)</span> is        <span class="hljs-comment">// 绑定本地操作系统点击事件。</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">HTMLButton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Button</span> is    method <span class="hljs-title function_">render</span><span class="hljs-params">(a, b)</span> is        <span class="hljs-comment">// 返回一个按钮的 HTML 表述。</span>    method <span class="hljs-title function_">onClick</span><span class="hljs-params">(f)</span> is        <span class="hljs-comment">// 绑定网络浏览器的点击事件。</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> is    field dialog: Dialog    <span class="hljs-comment">// 程序根据当前配置或环境设定选择创建者的类型。</span>    method <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> <span class="hljs-type">is</span>        <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> readApplicationConfigFile()        <span class="hljs-keyword">if</span> (config.OS == <span class="hljs-string">&quot;Windows&quot;</span>) <span class="hljs-type">then</span>            <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowsDialog</span>()        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (config.OS == <span class="hljs-string">&quot;Web&quot;</span>) <span class="hljs-type">then</span>            <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebDialog</span>()        <span class="hljs-keyword">else</span>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;错误！未知的操作系统。&quot;</span>)    <span class="hljs-comment">// 当前客户端代码会与具体创建者的实例进行交互，但是必须通过其基本接口</span>    <span class="hljs-comment">// 进行。只要客户端通过基本接口与创建者进行交互，你就可将任何创建者子</span>    <span class="hljs-comment">// 类传递给客户端。</span>    method <span class="hljs-title function_">main</span><span class="hljs-params">()</span> is        <span class="hljs-built_in">this</span>.initialize()        dialog.render()</code></pre><p>Python：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABC, abstractmethod<span class="hljs-keyword">class</span> <span class="hljs-title class_">Creator</span>(<span class="hljs-title class_ inherited__">ABC</span>):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    The Creator class declares the factory method that is supposed(被假设) to return an</span><span class="hljs-string">    object of a Product class. The Creator&#x27;s subclasses usually provide the</span><span class="hljs-string">    implementation of this method.</span><span class="hljs-string"></span><span class="hljs-string">    Creator 类声明了一个工厂方法，该方法用于返回 Product 类的对象。</span><span class="hljs-string">    工厂方法的子类通常会提供该方法的实现，</span><span class="hljs-string">    &quot;&quot;&quot;</span><span class="hljs-meta">    @abstractmethod</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">factory_method</span>(<span class="hljs-params">self</span>):        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Note that the Creator may also provide some default implementation of</span><span class="hljs-string">        the factory method.</span><span class="hljs-string"></span><span class="hljs-string">        注意：Creator 还可能提供工厂方法的一些默认实现</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">pass</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">some_operation</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Also note that, despite(尽管) its name, the Creator&#x27;s primary responsibility</span><span class="hljs-string">        is not creating products. Usually, it contains(包含) some core business logic(核心业务)</span><span class="hljs-string">        that relies on(依赖于) Product objects, returned by the factory method.</span><span class="hljs-string">        Subclasses(子类) can indirectly(间接) change that business logic by / overriding(重写) the factory method and returning a different type of product from it.</span><span class="hljs-string"></span><span class="hljs-string">        注意：Creator 工厂方法的主要职责不是创建产品。</span><span class="hljs-string">        通常，它包含一些依赖于工厂方法返回的 Product 对象的核心业务逻辑。</span><span class="hljs-string">        子类可以通过重写工厂方法并从中返回不同类型的产品来间接更改该业务逻辑。</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># Call the factory method to create a Product object.</span>        <span class="hljs-comment"># 调用工厂方法生产产品</span>        product = self.factory_method()        <span class="hljs-comment"># Now, use the product.</span>        <span class="hljs-comment"># 使用工厂方法</span>        result = <span class="hljs-string">f&quot;Creator: The same creator&#x27;s code has just worked with <span class="hljs-subst">&#123;product.operation()&#125;</span>&quot;</span>        <span class="hljs-keyword">return</span> result<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Concrete(具体的) Creators override the factory method in order to change the resulting</span><span class="hljs-string">product&#x27;s type.</span><span class="hljs-string"></span><span class="hljs-string">具体的创建者重写工厂方法以更改生成的产品的类型</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCreator1</span>(<span class="hljs-title class_ inherited__">Creator</span>):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Note that the signature of the method still uses the abstract product type,</span><span class="hljs-string">    even though the concrete product is actually returned from the method. This</span><span class="hljs-string">    way the Creator can stay independent of concrete product classes.</span><span class="hljs-string"></span><span class="hljs-string">    请注意，该方法的签名仍然使用抽象产品类型、</span><span class="hljs-string">    尽管该方法实际返回的是具体产品。这样</span><span class="hljs-string">    这样，创建者就可以独立于具体的产品类别。</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">factory_method</span>(<span class="hljs-params">self</span>) -&gt; Product:        <span class="hljs-keyword">return</span> ConcreteProduct1()<span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCreator2</span>(<span class="hljs-title class_ inherited__">Creator</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">factory_method</span>(<span class="hljs-params">self</span>) -&gt; Product:        <span class="hljs-keyword">return</span> ConcreteProduct2()<span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>(<span class="hljs-title class_ inherited__">ABC</span>):    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    The Product interface declares the operations that all concrete products</span><span class="hljs-string">    must implement.</span><span class="hljs-string"></span><span class="hljs-string">    产品接口定义了一个 operation 方法，所有具体产品都必须实现该方法.</span><span class="hljs-string">    &quot;&quot;&quot;</span><span class="hljs-meta">    @abstractmethod</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">pass</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Concrete Products provide various implementations of the Product interface.</span><span class="hljs-string">具体产品提供了产品接口的各种实现。</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct1</span>(<span class="hljs-title class_ inherited__">Product</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;Result of the ConcreteProduct1&#125;&quot;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct2</span>(<span class="hljs-title class_ inherited__">Product</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">operation</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;Result of the ConcreteProduct2&#125;&quot;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">client_code</span>(<span class="hljs-params">creator: Creator</span>) -&gt; <span class="hljs-literal">None</span>:    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    The client code works with an instance of a concrete creator, albeit through</span><span class="hljs-string">    its base interface. As long as the client keeps working with the creator via</span><span class="hljs-string">    the base interface, you can pass it any creator&#x27;s subclass.</span><span class="hljs-string"></span><span class="hljs-string">    客户端代码与具体创建者的实例一起工作，尽管是通过其基本接口。</span><span class="hljs-string">    只要客户端继续通过基本接口工作，就可以将创建者的任何子类传递给它。</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># 客户端: 我不知道创建者的类，但它仍然有效。</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Client: I&#x27;m not aware of the creator&#x27;s class, but it still works.\n&quot;</span>          <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;creator.some_operation()&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-comment"># APP: 启动 ConcreteCreator1</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;App: Launched with the ConcreteCreator1.&quot;</span>)    client_code(ConcreteCreator1())    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)    <span class="hljs-comment"># APP: 启动 ConcreteCreator2</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;App: Launched with the ConcreteCreator2.&quot;</span>)    client_code(ConcreteCreator2())</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序设计模式-Design-Patterns&quot;&gt;&lt;a href=&quot;#程序设计模式-Design-Patterns&quot; class=&quot;headerlink&quot; title=&quot;程序设计模式 Design Patterns&quot;&gt;&lt;/a&gt;程序设计模式 Design Patter</summary>
      
    
    
    
    <category term="Python" scheme="https://www.whaleluo.top/categories/Python/"/>
    
    
    <category term="Program" scheme="https://www.whaleluo.top/tags/Program/"/>
    
    <category term="高级编程" scheme="https://www.whaleluo.top/tags/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://www.whaleluo.top/tags/Python/"/>
    
    <category term="设计模式" scheme="https://www.whaleluo.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="DesignPattern" scheme="https://www.whaleluo.top/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 深度理解(由浅及深)</title>
    <link href="https://www.whaleluo.top/javascript/vue3-deep-understanding/"/>
    <id>https://www.whaleluo.top/javascript/vue3-deep-understanding/</id>
    <published>2024-01-13T07:21:31.000Z</published>
    <updated>2024-01-13T07:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-深度理解-由浅及深"><a href="#Vue3-深度理解-由浅及深" class="headerlink" title="Vue3 深度理解 (由浅及深)"></a>Vue3 深度理解 (由浅及深)</h1><p>写了那么久的 Vue3，理解一下 Vue3 的原理，从浅到深。</p><ul><li>Vue3 reactivity system:</li></ul><h2 id="双向数据绑定-Two-way-data-binding"><a href="#双向数据绑定-Two-way-data-binding" class="headerlink" title="双向数据绑定 (Two-way data binding)"></a>双向数据绑定 (Two-way data binding)</h2><p>Vue 是数据双向绑定的框架 (MVVM)，双向绑定由三个重要部分构成:</p><ul><li>数据层（Model）：应用的数据及业务逻辑</li><li>视图层（View）：应用的展示效果，各类 UI 组件</li><li>业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来</li></ul><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><pre><code class="hljs text">Model &lt;---&gt; ViewModel &lt;---&gt; View</code></pre><ul><li>数据 (Model) 变化后更新视图 (View)</li><li>视图 (View) 变化后更新数据 (Model)</li></ul><p>它有两个主要部分组成:</p><ol><li>监听器（Observer）：对所有数据的属性进行监听</li><li>解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数</li></ol><h3 id="实现双向绑定-Two-way-data-binding"><a href="#实现双向绑定-Two-way-data-binding" class="headerlink" title="实现双向绑定 (Two-way data binding)"></a>实现双向绑定 (Two-way data binding)</h3><p><img src="/./assets/Vue3-Deep-Understanding.png" class="lazy" data-srcset="/./assets/Vue3-Deep-Understanding.png" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="Flow Chart"></p><p>Note:<br>由于 <code>data</code> 的某个 <code>key</code> 在⼀个视图中可能出现多次 (使用了多次 <code>&#123;&#123; name &#125;&#125;</code>)，所以每个 <code>key</code> 都需要⼀个管家 <code>Dep</code> 来管理多个 <code>Watcher</code>. 将来 data 中数据⼀旦发生变化，会首先找到对应的 <code>Dep</code>，通知所有 <code>Watcher</code> 执行更新函数.</p><h3 id="依赖收集-Dependency-Collection"><a href="#依赖收集-Dependency-Collection" class="headerlink" title="依赖收集 (Dependency Collection)"></a>依赖收集 (Dependency Collection)</h3><p>视图中会用到 <code>data</code> 中某 <code>key</code>，这称为依赖。同⼀个 <code>key</code> 可能出现多次，每次都需要收集出来用⼀个 <code>Watcher</code> 来维护它们，此过程称为<strong>依赖收集 (Dependency Collection)</strong>. 多个相同 <code>Key</code> 的 <code>Watcher</code> 需要⼀个 <code>Dep</code> 来管理，需要更新时由 <code>Dep</code> 统⼀通知.</p><p><img src="/Vue3-Deep-Understanding-1.png" class="lazy" data-srcset="/Vue3-Deep-Understanding-1.png" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif"></p><h2 id="组件间的通信-Communication-between-components"><a href="#组件间的通信-Communication-between-components" class="headerlink" title="组件间的通信 (Communication between components)"></a>组件间的通信 (Communication between components)</h2><h3 id="v-bind-prop-单向数据流-One-Way-Data-Flow"><a href="#v-bind-prop-单向数据流-One-Way-Data-Flow" class="headerlink" title="v-bind &#x2F; prop 单向数据流 (One-Way Data Flow)"></a><code>v-bind</code> &#x2F; <code>prop</code> 单向数据流 (One-Way Data Flow)</h3><p>数据从父组件流到子组件, 而子组件不能改变父组件传来的数据. This prevents(v. 预防) child components from accidentally(adv. 意外地) mutating(n. 变化) the parent’s state.</p><pre><code class="hljs ts"><span class="hljs-comment">// Child.vue</span><span class="hljs-keyword">import</span> &#123; ref, defineProps, withDefaults &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Props</span> &#123;  <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span>&#125;<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">Props</span>&gt;(), &#123;  <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;Snack Bar Text&quot;</span>&#125;)<span class="hljs-comment">// or ...</span><span class="hljs-comment">// Simple DefineProps</span><span class="hljs-title function_">defineProps</span>(&#123;  <span class="hljs-attr">refreshMap</span>: &#123;    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Function</span>,    <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;refresh map deault function&quot;</span>)    &#125;  &#125;&#125;)<span class="hljs-comment">// Parent.vue</span>&lt;child v-<span class="hljs-attr">bind</span>:text=<span class="hljs-string">&quot;hello&quot;</span>&gt;&lt;/child&gt;</code></pre><h3 id="v-model-双向数据绑定-2-way-binding"><a href="#v-model-双向数据绑定-2-way-binding" class="headerlink" title="v-model 双向数据绑定 (2-way binding)"></a><code>v-model</code> 双向数据绑定 (2-way binding)</h3><p>常用于表单数据绑定, 父组件通过 v-model 绑定一个 value. 子组件修改父组件传过来的 value 时通过 emit 一个 <code>update:moduleValue</code> 事件. 父组件接收这个事件后, 修改这个 value.</p><p>修改父组件 value 的, 是父组件本身, 子组件只负责发送一个事件给父组件, 父组件收到子组件的 <code>update</code> Event 后自行更改. 本质上不打破单向数据流原则. (The principle of <strong>One-Way Data Flow</strong>)</p><p>不用 <code> v-model</code> 实现的 2-way binding:</p><pre><code class="hljs vue">// Child.vue&lt;script setup&gt;const props = defineProps([&quot;modelValue&quot;]);const emit = defineEmits([&quot;update:modelValue&quot;]);&lt;/script&gt;&lt;template&gt;  &lt;input    :value=&quot;props.modelValue&quot;    @input=&quot;emit(&#x27;update:modelValue&#x27;, ($event.target as HTMLInputElement).value)&quot;  /&gt;&lt;/template&gt;// Parent.vue&lt;Child :modelValue=&quot;foo&quot; @update:modelValue=&quot;($event) =&gt; (foo = $event)&quot; /&gt;</code></pre><p>使用 <code>v-model</code> 和 <code>defineModel</code>, 子组件的 model 是一个 <code>Ref</code> 保持响应式 (Reactivity).</p><pre><code class="hljs vue">// child component: const model = defineModel&lt;string&gt;&lt;/string&gt;</code></pre><h2 id="实现-EventEmitter-事件触发器"><a href="#实现-EventEmitter-事件触发器" class="headerlink" title="实现 EventEmitter 事件触发器"></a>实现 EventEmitter 事件触发器</h2><h3 id="Observer-观察者模式"><a href="#Observer-观察者模式" class="headerlink" title="Observer 观察者模式"></a>Observer 观察者模式</h3><p>观察者模式定义了对象间的 <strong>一种一对多</strong> 的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新.</p><p>观察者模式属于<strong>行为型模式</strong>，行为型模式关注的是 <strong>对象之间的通讯</strong>，观察者模式就是观察者和被观察者之间的通讯.</p><p><img src="/Vue3-Deep-Understanding-2.png" class="lazy" data-srcset="/Vue3-Deep-Understanding-2.png" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif"><br>被观察者 be observed object:</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerList</span> = [];  &#125;  <span class="hljs-title function_">addObserver</span>(<span class="hljs-params">observer</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerList</span>.<span class="hljs-title function_">push</span>(observer);  &#125;  <span class="hljs-title function_">removeObserver</span>(<span class="hljs-params">observer</span>) &#123;    <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerList</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">o</span>) =&gt;</span> o.<span class="hljs-property">name</span> === observer.<span class="hljs-property">name</span>);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerList</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);  &#125;  <span class="hljs-comment">// notify all observers. Call all the observers `notified()` function</span>  <span class="hljs-title function_">notifyObservers</span>(<span class="hljs-params">message</span>) &#123;    <span class="hljs-keyword">const</span> observers = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observeList</span>;    observers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">observer</span>) =&gt;</span> observer.<span class="hljs-title function_">notified</span>(message));  &#125;&#125;</code></pre><p>观察者 observer:</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, subject</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    <span class="hljs-keyword">if</span> (subject) &#123;      subject.<span class="hljs-title function_">addObserver</span>(<span class="hljs-variable language_">this</span>);    &#125;  &#125;  <span class="hljs-title function_">notified</span>(<span class="hljs-params">message</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;got message&quot;</span>, message);  &#125;&#125;</code></pre><p>used:</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<span class="hljs-keyword">const</span> observerA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&quot;observerA&quot;</span>, subject);<span class="hljs-keyword">const</span> observerB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&quot;observerB&quot;</span>);subject.<span class="hljs-title function_">addObserver</span>(observerB);subject.<span class="hljs-title function_">notifyObservers</span>(<span class="hljs-string">&quot;Hello from subject&quot;</span>);subject.<span class="hljs-title function_">removeObserver</span>(observerA);subject.<span class="hljs-title function_">notifyObservers</span>(<span class="hljs-string">&quot;Hello again&quot;</span>);</code></pre><h3 id="发布订阅模式-Publish-Subscribe"><a href="#发布订阅模式-Publish-Subscribe" class="headerlink" title="发布订阅模式 (Publish-Subscribe)"></a>发布订阅模式 (Publish-Subscribe)</h3><p>发送者不会将信息直接发送给指定的订阅者, 而是将发布的信息 <strong>分为不同的类型</strong>, 发布者无需了解存在哪些订阅者. 订阅者会自己接收指定类型的信息.</p><p>同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者存在.</p><p><img src="/Vue3-Deep-Understanding-3.png" class="lazy" data-srcset="/Vue3-Deep-Understanding-3.png" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif"></p><p>发布者 (publisher) 和订阅者 (subscriber) 需要透过一个 broker(中间人, 也叫发布订阅中心) 进行关联, 但 <strong>发布者的发布动作和订阅者的订阅动作相互独立, 无需关注对方.</strong> 消息派发由发布订阅中心负责.</p><p>broker(发布订阅中心 PubSub):</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PubSub</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-comment">// msg Map like this:</span>    <span class="hljs-comment">// &#123; &quot;type&quot;: [&quot;content&quot;, &quot;c2&quot;, &quot;c3&quot;] &#125;</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span> = &#123;&#125;;    <span class="hljs-comment">// listeners Map like:</span>    <span class="hljs-comment">// &#123;&quot;type&quot;: [Function, Funtion, Function]&#125;</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = &#123;&#125;;  &#125;  <span class="hljs-comment">// add publish msg</span>  <span class="hljs-comment">// pass msg type and content</span>  <span class="hljs-title function_">publish</span>(<span class="hljs-params">type, content</span>) &#123;    <span class="hljs-comment">// check whether the msg exists</span>    <span class="hljs-keyword">const</span> existContent = <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>[type];    <span class="hljs-keyword">if</span> (!existContent) &#123;      <span class="hljs-comment">// if the specified type msg does not exist, initialize to empty list []</span>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>[type] = [];    &#125;    <span class="hljs-comment">// push content to the list</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>[type].<span class="hljs-title function_">push</span>(content);  &#125;  <span class="hljs-comment">// add subscriber</span>  <span class="hljs-comment">// pass subscriber type and callback function</span>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">type, cb</span>) &#123;    <span class="hljs-comment">// check whether the subscriber exists</span>    <span class="hljs-keyword">const</span> existListener = <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type];    <span class="hljs-keyword">if</span> (!existListener) &#123;      <span class="hljs-comment">// if the specified type subscriber does not exist,</span>      <span class="hljs-comment">// initialize to empty list []</span>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] = [];    &#125;    <span class="hljs-comment">// push callback to list</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type].<span class="hljs-title function_">push</span>(cb);  &#125;  <span class="hljs-comment">// notify specified type subscriber</span>  <span class="hljs-title function_">notify</span>(<span class="hljs-params">type</span>) &#123;    <span class="hljs-comment">// get msgs</span>    <span class="hljs-keyword">const</span> messages = <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>[type];    <span class="hljs-comment">// get subscriber callbacks</span>    <span class="hljs-keyword">const</span> subscribers = <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] || [];    subscribers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb, index</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(messages[index]));  &#125;&#125;</code></pre><p>Publisher 发布者:</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publisher</span> &#123;  <span class="hljs-comment">// content is broker (PubSub 发布订阅者中心)</span>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, context</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;  &#125;  <span class="hljs-title function_">publish</span>(<span class="hljs-params">type, content</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">publish</span>(type, content);  &#125;&#125;</code></pre><p>Subscriber 订阅者:</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span> &#123;  <span class="hljs-comment">// content is broker (PubSub 发布订阅者中心)</span>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, context</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;  &#125;  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">type, cb</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">subscribe</span>(type, cb);  &#125;&#125;</code></pre><p>Use:</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Subscriber</span>, <span class="hljs-title class_">PubSub</span>, <span class="hljs-title class_">Publisher</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./EventMitter.js&quot;</span>;<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TYPE_A</span> = <span class="hljs-string">&quot;A&quot;</span>;<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TYPE_B</span> = <span class="hljs-string">&quot;B&quot;</span>;<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TYPE_C</span> = <span class="hljs-string">&quot;C&quot;</span>;<span class="hljs-keyword">const</span> pubsub = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PubSub</span>();<span class="hljs-keyword">const</span> <span class="hljs-title function_">print</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`msgs: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(pubsub.messages)&#125;</span>`</span>);  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`subs: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(pubsub.listeners)&#125;</span>`</span>);  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----------------------------------------&quot;</span>);&#125;;<span class="hljs-comment">// pubA</span><span class="hljs-keyword">const</span> publisherA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Publisher</span>(<span class="hljs-string">&quot;publisherA&quot;</span>, pubsub);publisherA.<span class="hljs-title function_">publish</span>(<span class="hljs-variable constant_">TYPE_A</span>, <span class="hljs-string">&quot;we are young&quot;</span>);publisherA.<span class="hljs-title function_">publish</span>(<span class="hljs-variable constant_">TYPE_A</span>, <span class="hljs-string">&quot;we are young 2&quot;</span>);publisherA.<span class="hljs-title function_">publish</span>(<span class="hljs-variable constant_">TYPE_B</span>, <span class="hljs-string">&quot;the silicon valley&quot;</span>);<span class="hljs-comment">// pubB</span><span class="hljs-keyword">const</span> publisherB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Publisher</span>(<span class="hljs-string">&quot;publisherB&quot;</span>, pubsub);publisherB.<span class="hljs-title function_">publish</span>(<span class="hljs-variable constant_">TYPE_A</span>, <span class="hljs-string">&quot;stronger&quot;</span>);<span class="hljs-title function_">print</span>();<span class="hljs-comment">// subA</span><span class="hljs-keyword">const</span> subscriberA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subscriber</span>(<span class="hljs-string">&quot;subscriberA&quot;</span>, pubsub);subscriberA.<span class="hljs-title function_">subscribe</span>(<span class="hljs-variable constant_">TYPE_A</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriberA received&quot;</span>, res);&#125;);subscriberA.<span class="hljs-title function_">subscribe</span>(<span class="hljs-variable constant_">TYPE_A</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriberA received&quot;</span>, res);&#125;);subscriberA.<span class="hljs-title function_">subscribe</span>(<span class="hljs-variable constant_">TYPE_C</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriberA received&quot;</span>, res);&#125;);<span class="hljs-title function_">print</span>();pubsub.<span class="hljs-title function_">notify</span>(<span class="hljs-variable constant_">TYPE_A</span>);pubsub.<span class="hljs-title function_">notify</span>(<span class="hljs-variable constant_">TYPE_B</span>);pubsub.<span class="hljs-title function_">notify</span>(<span class="hljs-variable constant_">TYPE_C</span>);</code></pre><h3 id="实现-Simple-EventEmitter"><a href="#实现-Simple-EventEmitter" class="headerlink" title="实现 Simple EventEmitter"></a>实现 Simple EventEmitter</h3><p>EventEmitter 本质上就是只有一个 publisher 的 PUB&#x2F;SUB 模型</p><p><code>Node</code> 采用了事件驱动机制，而 <code>EventEmitter</code> 就是 <code>Node</code> 实现事件驱动的基础.</p><p>在 <code>EventEmitter</code> 的基础上，<code>Node</code> 几乎所有的模块都继承了这个类，这些模块拥有了自己的事件，可以绑定／触发监听器，实现了异步操作</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventEmitter</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span> = &#123;&#125;;  &#125;  <span class="hljs-comment">// register event</span>  <span class="hljs-title function_">on</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type]) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type] = [];    &#125;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type].<span class="hljs-title function_">push</span>(handler);  &#125;  <span class="hljs-title function_">addListener</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(type, handler);  &#125;  <span class="hljs-title function_">prependListener</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type]) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type] = [];    &#125;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type].<span class="hljs-title function_">unshift</span>(handler);  &#125;  <span class="hljs-title function_">removeListener</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type]) &#123;      <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type].<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item !== handler);  &#125;  <span class="hljs-title function_">off</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeListener</span>(type, handler);  &#125;  <span class="hljs-comment">// trigger event</span>  <span class="hljs-title function_">emit</span>(<span class="hljs-params">type, ...args</span>) &#123;    <span class="hljs-comment">// run multiple handle</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[type].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;      <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(item, <span class="hljs-variable language_">this</span>, args);    &#125;);  &#125;  <span class="hljs-comment">// only excute one time, and then it will be deleted.</span>  <span class="hljs-title function_">once</span>(<span class="hljs-params">type, handler</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(type, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_onceWrap</span>(type, handler, <span class="hljs-variable language_">this</span>));  &#125;  <span class="hljs-title function_">_onceWrap</span>(<span class="hljs-params">type, handler, target</span>) &#123;    <span class="hljs-comment">// closure can keep state</span>    <span class="hljs-comment">// fired: Has this function ever been executed?</span>    <span class="hljs-keyword">const</span> state = &#123; <span class="hljs-attr">fired</span>: <span class="hljs-literal">false</span>, handler, type, target &#125;;    <span class="hljs-comment">// bind state context to function</span>    <span class="hljs-keyword">const</span> wrapFn = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_onceWrapper</span>.<span class="hljs-title function_">bind</span>(state);    state.<span class="hljs-property">wrapFn</span> = wrapFn;    <span class="hljs-keyword">return</span> wrapFn;  &#125;  <span class="hljs-title function_">_onceWrapper</span>(<span class="hljs-params">...args</span>) &#123;    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">fired</span>) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">fired</span> = <span class="hljs-literal">true</span>;      <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span>, args);      <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">off</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">wrapFn</span>);    &#125;  &#125;&#125;</code></pre><p>used:</p><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEmitter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span> &#123;&#125;<span class="hljs-keyword">const</span> myEmitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyEmitter</span>();<span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;触发了event事件！&quot;</span>);&#125;myEmitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;event&quot;</span>, callback);myEmitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;event&quot;</span>);myEmitter.<span class="hljs-title function_">removeListener</span>(<span class="hljs-string">&quot;event&quot;</span>, callback);</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://logaretm.com/blog/three-ways-to-expose-vue-component-api/">Three ways to expose internal Vue components API - Abdelrahman’s Blog</a></li><li><a href="https://logaretm.com/blog/making-the-most-out-of-vuejs-injections/#use-typescript">Making the most out of Vue.js Injections - Abdelrahman’s Blog</a></li><li><a href="https://github.com/semlinker/node-deep/blob/master/event/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%20Node.js%20EventEmitter.md">node-deep&#x2F;event&#x2F;深入学习 Node.js EventEmitter.md at master · semlinker&#x2F;node-deep · GitHub</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-深度理解-由浅及深&quot;&gt;&lt;a href=&quot;#Vue3-深度理解-由浅及深&quot; class=&quot;headerlink&quot; title=&quot;Vue3 深度理解 (由浅及深)&quot;&gt;&lt;/a&gt;Vue3 深度理解 (由浅及深)&lt;/h1&gt;&lt;p&gt;写了那么久的 Vue3，理解一下 V</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.whaleluo.top/categories/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/tags/JavaScript/"/>
    
    <category term="JS" scheme="https://www.whaleluo.top/tags/JS/"/>
    
    <category term="前端" scheme="https://www.whaleluo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://www.whaleluo.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.whaleluo.top/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + vite + Ts + pinia 全家桶学习</title>
    <link href="https://www.whaleluo.top/javascript/vue3-guide/"/>
    <id>https://www.whaleluo.top/javascript/vue3-guide/</id>
    <published>2024-01-13T07:21:31.000Z</published>
    <updated>2024-01-13T07:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-vite-Ts-pinia-全家桶学习"><a href="#Vue3-vite-Ts-pinia-全家桶学习" class="headerlink" title="Vue3 + vite + Ts + pinia 全家桶学习"></a>Vue3 + vite + Ts + pinia 全家桶学习</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>BiliBili 小满 ZS VUE3 教程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd/?vd_source=8b588c19ea4cd636da362bae86b1564a">Vue3 + vite + Ts + pinia + 实战 + 源码 + electron</a></li></ol><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>MVVM 架构</li><li>Options API and Composition API</li><li>Vue3 的优化：重写双向数据绑定，基于 ES6 Proxy</li></ol><h2 id="Computed-attribute-计算属性"><a href="#Computed-attribute-计算属性" class="headerlink" title="Computed attribute 计算属性"></a>Computed attribute 计算属性</h2><pre><code class="hljs javascript"><span class="hljs-comment">// computed-attribute.vue</span><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">let</span> firstName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;John&quot;</span>);<span class="hljs-keyword">let</span> lastName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;Doe&quot;</span>);<span class="hljs-comment">// 1. optional computed</span><span class="hljs-keyword">let</span> name =  computed &lt;  string &gt;  &#123;    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName.value&#125;</span>-<span class="hljs-subst">$&#123;lastName.value&#125;</span>`</span>,    <span class="hljs-attr">set</span>: <span class="hljs-function">(<span class="hljs-params">newValue</span>) =&gt;</span> &#123;      [firstName.<span class="hljs-property">value</span>, lastName.<span class="hljs-property">value</span>] = newValue.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;-&quot;</span>);    &#125;,  &#125;;<span class="hljs-comment">// 2. function computed</span><span class="hljs-comment">// 只支持一个 getter 函数，不允许修改值 readonly</span><span class="hljs-keyword">let</span> name2 = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName.value&#125;</span>-<span class="hljs-subst">$&#123;lastName.value&#125;</span>`</span>);</code></pre><h2 id="Watch-listener"><a href="#Watch-listener" class="headerlink" title="Watch listener"></a>Watch listener</h2><pre><code class="hljs javascript"><span class="hljs-comment">// vue3 watch listener</span><span class="hljs-keyword">import</span> &#123; ref, watch, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">let</span> message = ref&lt;string&gt;(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-keyword">let</span> message2 = ref&lt;string&gt;(<span class="hljs-string">&quot;hello world2&quot;</span>);<span class="hljs-keyword">let</span> message3 = ref&lt;object&gt;(&#123; <span class="hljs-string">&quot;foo&quot;</span>: &#123; <span class="hljs-string">&quot;bar&quot;</span>: <span class="hljs-string">&quot;hello world3&quot;</span> &#125; &#125;);<span class="hljs-title function_">watch</span>(message, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newValue&quot;</span>, newValue);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldValue&quot;</span>, oldValue);&#125;)<span class="hljs-comment">// 监听多个数据源</span><span class="hljs-title function_">watch</span>([message, message2], <span class="hljs-function">(<span class="hljs-params">[newMessage, newMessage2], [oldMessage, oldMessage2]</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newMessage&quot;</span>, newMessage);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newMessage2&quot;</span>, newMessage2);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldMessage&quot;</span>, oldMessage);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldMessage2&quot;</span>, oldMessage2);&#125;)<span class="hljs-comment">// 监听一个对象，开启深度监听</span><span class="hljs-comment">// 引用类型返回的 newValue 和 oldValue 是一样的</span><span class="hljs-comment">// 如果用 reactive 不用开启深度监听</span><span class="hljs-comment">// ref: 监听属性的单一值需要用一个 getter 函数</span><span class="hljs-title function_">watch</span>(message3, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newValue&quot;</span>, newValue);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldValue&quot;</span>, oldValue);&#125;, &#123;    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启深度监听</span>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 立即执行 watch callback 一次</span>    <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;pre&quot;</span> <span class="hljs-comment">// pre: 组件更新前执行，post: 组件更新后执行 sync: 同步执行</span>&#125;)<span class="hljs-comment">// watchEffect 高级监听器</span><span class="hljs-comment">// oninvaildate 消除副作用的函数(回调)</span><span class="hljs-keyword">const</span> stop = <span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">(<span class="hljs-params">oninvaildate</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 先执行 oninvaildate 回调执行其他代码 比如防抖</span>    <span class="hljs-title function_">oninvaildate</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oninvaildate&quot;</span>);    &#125;)    <span class="hljs-comment">// console.log(&quot;message&quot;, message.value);</span>    <span class="hljs-comment">// console.log(&quot;message2&quot;, message2.value);</span>    <span class="hljs-comment">// console.log(&quot;message3&quot;, message3.value);</span>    <span class="hljs-comment">// get dom element</span>    <span class="hljs-keyword">const</span> <span class="hljs-attr">ipt</span>: <span class="hljs-title class_">HTMLInputElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#input&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span>;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ipt:&#x27;</span>, ipt);&#125;, &#123;    <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-comment">// before dom loaded</span>    <span class="hljs-comment">// debug</span>    <span class="hljs-title function_">onTrigger</span>(<span class="hljs-params">e</span>) &#123;        <span class="hljs-keyword">debugger</span>;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onTrigger&quot;</span>, e);    &#125;,&#125;)<span class="hljs-comment">// 调用 watchEffect 返回的 stop 函数可以停止监听</span><span class="hljs-keyword">const</span> <span class="hljs-title function_">stopWatch</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-title function_">stop</span>();&#125;</code></pre><h2 id="Vue-lifespan-生命周期"><a href="#Vue-lifespan-生命周期" class="headerlink" title="Vue lifespan 生命周期"></a>Vue lifespan 生命周期</h2><p>onBeforeMount(挂载前) -&gt; onMounted(挂载后) -&gt; onBeforeUpdate(更新数据之前) -&gt; onUpdated(更新数据之后) -&gt; onBeforeUnmount(卸载之前) -&gt; onUmounted(卸载之后)</p><p>在 setup 语法糖模式中没有 beforeCreate 和 created 两个生命周期，用 setup(callback) 来代替。</p><p>调试用的两个 hook，<code>onRenderTracked</code>，<code>onRenderTriggered</code>，应该是依赖 effect 依赖收集之类的钩子，具体可以看 Vue3 的响应式 ref reactive 原理。</p><h2 id="BEM-架构和-layout-布局和-sass-CSS-预处理器"><a href="#BEM-架构和-layout-布局和-sass-CSS-预处理器" class="headerlink" title="BEM 架构和 layout 布局和 sass CSS 预处理器"></a>BEM 架构和 layout 布局和 sass CSS 预处理器</h2><p>BEM 架构： block (块)，element (元素)，modify (修饰)，指的是 namespace 的命名风格，在 element-UI 中，<code>el-button__wrapper</code> 表示一个 block 中的 element。<code>el-button--primary</code> 表示 button 的自定义按钮风格 modify。</p><pre><code class="hljs sass">$namespace: &#x27;xm&#x27; !default;$block-select: &quot;0&quot; !default;$elem-sel: &quot;__&quot; !default;$modify-sel: &quot;--&quot; !default;</code></pre><p>Sass.hk 中文网： <a href="https://sass.hk/docs/">Sass教程 Sass中文文档 | Sass中文网</a></p><blockquote><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能.</p></blockquote><h2 id="父子组件传参"><a href="#父子组件传参" class="headerlink" title="父子组件传参"></a>父子组件传参</h2><p>子组件 children</p><pre><code class="hljs javascript"><span class="hljs-comment">// defineProps 利用 ts 泛型</span><span class="hljs-keyword">const</span> props = defineProps&lt;&#123;    <span class="hljs-attr">msg</span>: string&#125;&gt;()<span class="hljs-comment">// 使用 ts 泛型时定义 default</span><span class="hljs-title function_">withDefaults</span>(defineProps&lt;&#123;    <span class="hljs-attr">msg</span>: string&#125;&gt;(), &#123;    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello world&quot;</span>,    <span class="hljs-attr">array</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<span class="hljs-comment">// defineProps 传入一个对象</span><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;    <span class="hljs-attr">msg</span>: &#123;        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;hello world&quot;</span>    &#125;&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;props:&quot;</span>, props.<span class="hljs-property">msg</span>);<span class="hljs-comment">// 给父组件传值使用 emit 自定义事件</span><span class="hljs-comment">// define emit 不使用 ts 泛型,直接传入事件名</span><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;changeMsg&quot;</span>])<span class="hljs-comment">// define emit 使用 ts 泛型</span><span class="hljs-keyword">const</span> emit = defineEmits&lt;&#123;    (<span class="hljs-attr">event</span>: <span class="hljs-string">&quot;changeMsg&quot;</span>, <span class="hljs-attr">msg</span>: string): boolean&#125;&gt;()<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-comment">// emit 事件</span>    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;changeMsg&quot;</span>, <span class="hljs-string">&quot;hello world2&quot;</span>)&#125;<span class="hljs-comment">// 向父组件暴露方法和属性,用 ref 接收</span><span class="hljs-title function_">defineExpose</span>(&#123;    <span class="hljs-attr">msg</span>: props.<span class="hljs-property">msg</span>,    changeMsg&#125;)</code></pre><p>父组件：</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child-component.vue&#x27;</span><span class="hljs-comment">// 1. Define the type of the child component</span><span class="hljs-comment">// 定义一个子组件的类型,通过 component 的 ref 获取</span><span class="hljs-keyword">const</span> childVue = ref&lt;<span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Child</span>&gt;&gt;()<span class="hljs-comment">// 2. and then it can use the child component&#x27;s methods and properties which are exposed by defineExpose</span><span class="hljs-comment">// defineExpose 向父组件暴露方法和属性</span><span class="hljs-comment">// 然后就可以使用子组件暴露出来的方法和属性了</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(childVue.<span class="hljs-property">value</span>?.<span class="hljs-property">msg</span>);<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params">newMsg: string</span>) =&gt; &#123;    childVue.<span class="hljs-property">value</span>?.<span class="hljs-title function_">changeMsg</span>()    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newMsg:&#x27;</span>, newMsg);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-vite-Ts-pinia-全家桶学习&quot;&gt;&lt;a href=&quot;#Vue3-vite-Ts-pinia-全家桶学习&quot; class=&quot;headerlink&quot; title=&quot;Vue3 + vite + Ts + pinia 全家桶学习&quot;&gt;&lt;/a&gt;Vue3 + v</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.whaleluo.top/categories/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/tags/JavaScript/"/>
    
    <category term="JS" scheme="https://www.whaleluo.top/tags/JS/"/>
    
    <category term="前端" scheme="https://www.whaleluo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://www.whaleluo.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.whaleluo.top/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + vite + Ts + pinia 全家桶学习</title>
    <link href="https://www.whaleluo.top/javascript/vue3-vite-ts-pinia-electron/"/>
    <id>https://www.whaleluo.top/javascript/vue3-vite-ts-pinia-electron/</id>
    <published>2024-01-13T07:21:31.000Z</published>
    <updated>2024-01-13T07:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-vite-Ts-pinia-全家桶学习"><a href="#Vue3-vite-Ts-pinia-全家桶学习" class="headerlink" title="Vue3 + vite + Ts + pinia 全家桶学习"></a>Vue3 + vite + Ts + pinia 全家桶学习</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>BiliBili 小满 ZS VUE3 教程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd/?vd_source=8b588c19ea4cd636da362bae86b1564a">Vue3 + vite + Ts + pinia + 实战 + 源码 + electron</a></li></ol><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>MMVVM 架构</li><li>Options API and Composition API</li><li>Vue3 的优化：重写双向数据绑定，基于 ES6 Proxy</li></ol><h2 id="Computed-attribute-计算属性"><a href="#Computed-attribute-计算属性" class="headerlink" title="Computed attribute 计算属性"></a>Computed attribute 计算属性</h2><pre><code class="hljs javascript"><span class="hljs-comment">// computed-attribute.vue</span><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">let</span> firstName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;John&#x27;</span>)<span class="hljs-keyword">let</span> lastName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Doe&#x27;</span>)<span class="hljs-comment">// 1. optional computed</span><span class="hljs-keyword">let</span> name = computed&lt;string&gt;(&#123;    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName.value&#125;</span>-<span class="hljs-subst">$&#123;lastName.value&#125;</span>`</span>,    <span class="hljs-attr">set</span>: <span class="hljs-function">(<span class="hljs-params">newValue</span>) =&gt;</span> &#123;        [firstName.<span class="hljs-property">value</span>, lastName.<span class="hljs-property">value</span>] = newValue.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;-&quot;</span>)    &#125;&#125;)<span class="hljs-comment">// 2. function computed</span><span class="hljs-comment">// 只支持一个 getter 函数，不允许修改值 readonly</span><span class="hljs-keyword">let</span> name2 = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName.value&#125;</span>-<span class="hljs-subst">$&#123;lastName.value&#125;</span>`</span>)</code></pre><h2 id="Watch-listener"><a href="#Watch-listener" class="headerlink" title="Watch listener"></a>Watch listener</h2><pre><code class="hljs javascript"><span class="hljs-comment">// vue3 watch listener</span><span class="hljs-keyword">import</span> &#123; ref, watch, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">let</span> message = ref&lt;string&gt;(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-keyword">let</span> message2 = ref&lt;string&gt;(<span class="hljs-string">&quot;hello world2&quot;</span>);<span class="hljs-keyword">let</span> message3 = ref&lt;object&gt;(&#123; <span class="hljs-string">&quot;foo&quot;</span>: &#123; <span class="hljs-string">&quot;bar&quot;</span>: <span class="hljs-string">&quot;hello world3&quot;</span> &#125; &#125;);<span class="hljs-title function_">watch</span>(message, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newValue&quot;</span>, newValue);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldValue&quot;</span>, oldValue);&#125;)<span class="hljs-comment">// 监听多个数据源</span><span class="hljs-title function_">watch</span>([message, message2], <span class="hljs-function">(<span class="hljs-params">[newMessage, newMessage2], [oldMessage, oldMessage2]</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newMessage&quot;</span>, newMessage);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newMessage2&quot;</span>, newMessage2);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldMessage&quot;</span>, oldMessage);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldMessage2&quot;</span>, oldMessage2);&#125;)<span class="hljs-comment">// 监听一个对象，开启深度监听</span><span class="hljs-comment">// 引用类型返回的 newValue 和 oldValue 是一样的</span><span class="hljs-comment">// 如果用 reactive 不用开启深度监听</span><span class="hljs-comment">// ref: 监听属性的单一值需要用一个 getter 函数</span><span class="hljs-title function_">watch</span>(message3, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;newValue&quot;</span>, newValue);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oldValue&quot;</span>, oldValue);&#125;, &#123;    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启深度监听</span>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 立即执行 watch callback 一次</span>    <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;pre&quot;</span> <span class="hljs-comment">// pre: 组件更新前执行，post: 组件更新后执行 sync: 同步执行</span>&#125;)<span class="hljs-comment">// watchEffect 高级监听器</span><span class="hljs-comment">// oninvaildate 消除副作用的函数(回调)</span><span class="hljs-keyword">const</span> stop = <span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">(<span class="hljs-params">oninvaildate</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 先执行 oninvaildate 回调执行其他代码 比如防抖</span>    <span class="hljs-title function_">oninvaildate</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;oninvaildate&quot;</span>);    &#125;)    <span class="hljs-comment">// console.log(&quot;message&quot;, message.value);</span>    <span class="hljs-comment">// console.log(&quot;message2&quot;, message2.value);</span>    <span class="hljs-comment">// console.log(&quot;message3&quot;, message3.value);</span>    <span class="hljs-comment">// get dom element</span>    <span class="hljs-keyword">const</span> <span class="hljs-attr">ipt</span>: <span class="hljs-title class_">HTMLInputElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#input&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLInputElement</span>;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ipt:&#x27;</span>, ipt);&#125;, &#123;    <span class="hljs-attr">flush</span>: <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-comment">// before dom loaded</span>    <span class="hljs-comment">// debug</span>    <span class="hljs-title function_">onTrigger</span>(<span class="hljs-params">e</span>) &#123;        <span class="hljs-keyword">debugger</span>;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onTrigger&quot;</span>, e);    &#125;,&#125;)<span class="hljs-comment">// 调用 watchEffect 返回的 stop 函数可以停止监听</span><span class="hljs-keyword">const</span> <span class="hljs-title function_">stopWatch</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-title function_">stop</span>();&#125;</code></pre><h2 id="Vue-lifespan-生命周期"><a href="#Vue-lifespan-生命周期" class="headerlink" title="Vue lifespan 生命周期"></a>Vue lifespan 生命周期</h2><p>onBeforeMount(挂载前) -&gt; onMounted(挂载后) -&gt; onBeforeUpdate(更新数据之前) -&gt; onUpdated(更新数据之后) -&gt; onBeforeUnmount(卸载之前) -&gt; onUmounted(卸载之后)</p><p>在 setup 语法糖模式中没有 beforeCreate 和 created 两个生命周期，用 setup(callback) 来代替。</p><p>调试用的两个 hook，<code>onRenderTracked</code>，<code>onRenderTriggered</code>，应该是依赖 effect 依赖收集之类的钩子，具体可以看 Vue3 的响应式 ref reactive 原理。</p><h2 id="BEM-架构和-layout-布局和-sass-CSS-预处理器"><a href="#BEM-架构和-layout-布局和-sass-CSS-预处理器" class="headerlink" title="BEM 架构和 layout 布局和 sass CSS 预处理器"></a>BEM 架构和 layout 布局和 sass CSS 预处理器</h2><p>BEM 架构： block (块)，element (元素)，modify (修饰)，指的是 namespace 的命名风格，在 element-UI 中，<code>el-button__wrapper</code> 表示一个 block 中的 element。<code>el-button--primary</code> 表示 button 的自定义按钮风格 modify。</p><pre><code class="hljs sass">$namespace: &#x27;xm&#x27; !default;$block-select: &quot;0&quot; !default;$elem-sel: &quot;__&quot; !default;$modify-sel: &quot;--&quot; !default;</code></pre><p>Sass.hk 中文网： <a href="https://sass.hk/docs/">Sass教程 Sass中文文档 | Sass中文网</a></p><blockquote><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能.</p></blockquote><h2 id="父子组件传参"><a href="#父子组件传参" class="headerlink" title="父子组件传参"></a>父子组件传参</h2><p>子组件 children</p><pre><code class="hljs javascript"><span class="hljs-comment">// defineProps 利用 ts 泛型</span><span class="hljs-keyword">const</span> props = defineProps&lt;&#123;    <span class="hljs-attr">msg</span>: string&#125;&gt;()<span class="hljs-comment">// 使用 ts 泛型时定义 default</span><span class="hljs-title function_">withDefaults</span>(defineProps&lt;&#123;    <span class="hljs-attr">msg</span>: string&#125;&gt;(), &#123;    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello world&quot;</span>,    <span class="hljs-attr">array</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;<span class="hljs-comment">// defineProps 传入一个对象</span><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;    <span class="hljs-attr">msg</span>: &#123;        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;hello world&quot;</span>    &#125;&#125;)<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;props:&quot;</span>, props.<span class="hljs-property">msg</span>);<span class="hljs-comment">// 给父组件传值使用 emit 自定义事件</span><span class="hljs-comment">// define emit 不使用 ts 泛型,直接传入事件名</span><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;changeMsg&quot;</span>])<span class="hljs-comment">// define emit 使用 ts 泛型</span><span class="hljs-keyword">const</span> emit = defineEmits&lt;&#123;    (<span class="hljs-attr">event</span>: <span class="hljs-string">&quot;changeMsg&quot;</span>, <span class="hljs-attr">msg</span>: string): boolean&#125;&gt;()<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-comment">// emit 事件</span>    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;changeMsg&quot;</span>, <span class="hljs-string">&quot;hello world2&quot;</span>)&#125;<span class="hljs-comment">// 向父组件暴露方法和属性,用 ref 接收</span><span class="hljs-title function_">defineExpose</span>(&#123;    <span class="hljs-attr">msg</span>: props.<span class="hljs-property">msg</span>,    changeMsg&#125;)</code></pre><p>父组件：</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child-component.vue&#x27;</span><span class="hljs-comment">// 1. Define the type of the child component</span><span class="hljs-comment">// 定义一个子组件的类型,通过 component 的 ref 获取</span><span class="hljs-keyword">const</span> childVue = ref&lt;<span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Child</span>&gt;&gt;()<span class="hljs-comment">// 2. and then it can use the child component&#x27;s methods and properties which are exposed by defineExpose</span><span class="hljs-comment">// defineExpose 向父组件暴露方法和属性</span><span class="hljs-comment">// 然后就可以使用子组件暴露出来的方法和属性了</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(childVue.<span class="hljs-property">value</span>?.<span class="hljs-property">msg</span>);<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeMsg</span> = (<span class="hljs-params">newMsg: string</span>) =&gt; &#123;    childVue.<span class="hljs-property">value</span>?.<span class="hljs-title function_">changeMsg</span>()    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newMsg:&#x27;</span>, newMsg);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-vite-Ts-pinia-全家桶学习&quot;&gt;&lt;a href=&quot;#Vue3-vite-Ts-pinia-全家桶学习&quot; class=&quot;headerlink&quot; title=&quot;Vue3 + vite + Ts + pinia 全家桶学习&quot;&gt;&lt;/a&gt;Vue3 + v</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.whaleluo.top/categories/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/tags/JavaScript/"/>
    
    <category term="JS" scheme="https://www.whaleluo.top/tags/JS/"/>
    
    <category term="前端" scheme="https://www.whaleluo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://www.whaleluo.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.whaleluo.top/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>英语不规则动词规律</title>
    <link href="https://www.whaleluo.top/english/english-bgz-verbs/"/>
    <id>https://www.whaleluo.top/english/english-bgz-verbs/</id>
    <published>2023-12-28T09:48:06.000Z</published>
    <updated>2023-12-28T09:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语不规则动词规律"><a href="#英语不规则动词规律" class="headerlink" title="英语不规则动词规律"></a>英语不规则动词规律</h1><h2 id="过去式-过去分词-原形-AAA"><a href="#过去式-过去分词-原形-AAA" class="headerlink" title="过去式 &#x3D; 过去分词 &#x3D; 原形 AAA"></a>过去式 &#x3D; 过去分词 &#x3D; 原形 AAA</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>bet</td><td>bet</td><td>bet</td><td>打赌</td></tr><tr><td>cost</td><td>cost</td><td>cost</td><td>耗费 (钱)</td></tr><tr><td>cut</td><td>cut</td><td>cut</td><td>切，割</td></tr><tr><td>hit</td><td>hit</td><td>hit</td><td>撞，击打</td></tr><tr><td>hurt</td><td>hurt</td><td>hurt</td><td>使…伤痛</td></tr><tr><td>let</td><td>let</td><td>let</td><td>让</td></tr><tr><td>put</td><td>put</td><td>put</td><td>放</td></tr><tr><td>read</td><td>read</td><td>read</td><td>读</td></tr><tr><td>spread</td><td>spread</td><td>spread</td><td>传播</td></tr><tr><td>set</td><td>set</td><td>set</td><td>安排，安置</td></tr><tr><td>upset</td><td>upset</td><td>upset</td><td>不安</td></tr><tr><td>beat</td><td>beat</td><td>beaten</td><td>打击</td></tr></tbody></table><h2 id="过去式改字母-过去分词-原形-ABA"><a href="#过去式改字母-过去分词-原形-ABA" class="headerlink" title="过去式改字母, 过去分词 &#x3D; 原形 ABA"></a>过去式改字母, 过去分词 &#x3D; 原形 ABA</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>become</td><td>became</td><td>become</td><td>成为</td></tr><tr><td>come</td><td>came</td><td>come</td><td>来</td></tr><tr><td>run</td><td>ran</td><td>run</td><td>跑</td></tr></tbody></table><h2 id="过去式改字母-过去分词-原形-en"><a href="#过去式改字母-过去分词-原形-en" class="headerlink" title="过去式改字母, 过去分词&#x3D;原形 +en"></a>过去式改字母, 过去分词&#x3D;原形 +en</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>eat</td><td>ate</td><td>eaten</td><td>吃</td></tr><tr><td>fall</td><td>fell</td><td>fallen</td><td>落下</td></tr><tr><td>forbid</td><td>forbade</td><td>forbidden</td><td>禁止</td></tr><tr><td>forgive</td><td>forgave</td><td>forgiven</td><td>原谅</td></tr><tr><td>give</td><td>gave</td><td>given</td><td>给</td></tr><tr><td>ride</td><td>rode</td><td>ridden</td><td>骑</td></tr><tr><td>see</td><td>saw</td><td>seen</td><td>看见</td></tr><tr><td>write</td><td>wrote</td><td>written</td><td>写</td></tr><tr><td>rise</td><td>rose</td><td>risen</td><td>升起</td></tr><tr><td>see</td><td>saw</td><td>seen</td><td>看见</td></tr><tr><td>shake</td><td>shook</td><td>shaken</td><td>摇动</td></tr><tr><td>take</td><td>took</td><td>taken</td><td>拿去</td></tr><tr><td>throw</td><td>threw</td><td>thrown</td><td>扔</td></tr></tbody></table><h2 id="过去式改字母-过去分词-过去式-en"><a href="#过去式改字母-过去分词-过去式-en" class="headerlink" title="过去式改字母, 过去分词&#x3D;过去式 +en"></a>过去式改字母, 过去分词&#x3D;过去式 +en</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>break</td><td>broke</td><td>broken</td><td>打破，折断</td></tr><tr><td>drink</td><td>drank</td><td>drunken</td><td>喝</td></tr><tr><td>drive</td><td>drove</td><td>driven</td><td>开车,驱动</td></tr><tr><td>choose</td><td>chose</td><td>chosen</td><td>选择</td></tr><tr><td>forget</td><td>forgot</td><td>forgotten</td><td>忘记</td></tr><tr><td>freeze</td><td>froze</td><td>frozen</td><td>冻</td></tr><tr><td>speak</td><td>spoke</td><td>spoken</td><td>说</td></tr><tr><td>hide</td><td>hid</td><td>hidden</td><td>躲藏</td></tr><tr><td>steal</td><td>stole</td><td>stolen</td><td>偷</td></tr><tr><td>wake</td><td>woke</td><td>waken</td><td>醒来</td></tr><tr><td>write</td><td>wrote</td><td>written</td><td>写</td></tr></tbody></table><h2 id="原形-ow-过去式-ew-过去分词-n"><a href="#原形-ow-过去式-ew-过去分词-n" class="headerlink" title="原形 ow, 过去式 ew, 过去分词 n"></a>原形 ow, 过去式 ew, 过去分词 n</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>blow</td><td>blew</td><td>blown</td><td>吹</td></tr><tr><td>draw</td><td>drew</td><td>drawn</td><td>画</td></tr><tr><td>fly</td><td>flew</td><td>flown</td><td>飞</td></tr><tr><td>grow</td><td>grew</td><td>grown</td><td>生长</td></tr><tr><td>know</td><td>knew</td><td>known</td><td>知道</td></tr></tbody></table><h2 id="原形-i-过去式-a-过去分词-u"><a href="#原形-i-过去式-a-过去分词-u" class="headerlink" title="原形 i, 过去式 a, 过去分词 u"></a>原形 i, 过去式 a, 过去分词 u</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>begin</td><td>began</td><td>begun</td><td>开始</td></tr><tr><td>drink</td><td>drank</td><td>drunk</td><td>喝</td></tr><tr><td>ring</td><td>rang</td><td>rung</td><td>门铃响，电话铃响</td></tr><tr><td>sing</td><td>sang</td><td>sung</td><td>唱</td></tr><tr><td>swim</td><td>swam</td><td>swum</td><td>游泳</td></tr></tbody></table><h2 id="原形-过去式-ought-过去分词-ought-ABB"><a href="#原形-过去式-ought-过去分词-ought-ABB" class="headerlink" title="原形, 过去式 ought, 过去分词 ought ABB"></a>原形, 过去式 ought, 过去分词 ought ABB</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>bring</td><td>brought</td><td>brought</td><td>带来</td></tr><tr><td>buy</td><td>bought</td><td>bought</td><td>买</td></tr><tr><td>fight</td><td>fought</td><td>fought</td><td>打架</td></tr><tr><td>seek</td><td>sought</td><td>sought</td><td>寻求</td></tr><tr><td>think</td><td>thought</td><td>thought</td><td>思考</td></tr></tbody></table><h2 id="原形-过去式-aught-过去分词-aught"><a href="#原形-过去式-aught-过去分词-aught" class="headerlink" title="原形, 过去式 aught, 过去分词 aught"></a>原形, 过去式 aught, 过去分词 aught</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>catch</td><td>caught</td><td>caught</td><td>捉,抓</td></tr><tr><td>teach</td><td>taught</td><td>taught</td><td>教</td></tr></tbody></table><h2 id="过去式改元音字母-过去分词-过去式"><a href="#过去式改元音字母-过去分词-过去式" class="headerlink" title="过去式改元音字母, 过去分词&#x3D;过去式"></a>过去式改元音字母, 过去分词&#x3D;过去式</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>dig</td><td>dug</td><td>dug</td><td>挖</td></tr><tr><td>feed</td><td>fed</td><td>fed</td><td>喂</td></tr><tr><td>find</td><td>found</td><td>found</td><td>发现</td></tr><tr><td>get</td><td>got</td><td>got</td><td>得到</td></tr><tr><td>hold</td><td>held</td><td>held</td><td>拥有</td></tr><tr><td>lead</td><td>led</td><td>led</td><td>引导</td></tr><tr><td>meet</td><td>met</td><td>met</td><td>遇见</td></tr><tr><td>sit</td><td>sat</td><td>sat</td><td>坐</td></tr><tr><td>win</td><td>won</td><td>won</td><td>赢</td></tr><tr><td>sell</td><td>sold</td><td>sold</td><td>卖</td></tr><tr><td>shine</td><td>shone</td><td>shone</td><td>照耀</td></tr></tbody></table><h2 id="过去式改辅音字母-过去分词-过去式"><a href="#过去式改辅音字母-过去分词-过去式" class="headerlink" title="过去式改辅音字母, 过去分词&#x3D;过去式"></a>过去式改辅音字母, 过去分词&#x3D;过去式</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>hear</td><td>heard</td><td>heard</td><td>听见</td></tr><tr><td>make</td><td>made</td><td>made</td><td>制造</td></tr><tr><td>lose</td><td>lost</td><td>lost</td><td>失去</td></tr><tr><td>light</td><td>lit</td><td>lit</td><td>点亮</td></tr></tbody></table><h2 id="过去式改字母-T-过去分词-过去式"><a href="#过去式改字母-T-过去分词-过去式" class="headerlink" title="过去式改字母 + T, 过去分词 &#x3D;过去式"></a>过去式改字母 + T, 过去分词 &#x3D;过去式</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>feel</td><td>felt</td><td>felt</td><td>感到</td></tr><tr><td>keep</td><td>kept</td><td>kept</td><td>保持</td></tr><tr><td>leave</td><td>left</td><td>left</td><td>离开</td></tr><tr><td>sleep</td><td>slept</td><td>slept</td><td>睡</td></tr><tr><td>smell</td><td>smelt</td><td>smelt</td><td>闻</td></tr><tr><td>sweep</td><td>swept</td><td>swept</td><td>扫</td></tr><tr><td>build</td><td>built</td><td>built</td><td>建造</td></tr><tr><td>lend</td><td>lent</td><td>lent</td><td>借出</td></tr><tr><td>mean</td><td>meant</td><td>meant</td><td>意思</td></tr><tr><td>send</td><td>sent</td><td>sent</td><td>寄,送</td></tr><tr><td>spend</td><td>spent</td><td>spent</td><td>花费</td></tr><tr><td>spell</td><td>spelt</td><td>spelt</td><td>拼写</td></tr><tr><td>bend</td><td>bent</td><td>bent</td><td>使弯曲</td></tr><tr><td>burn</td><td>burnt</td><td>burnt</td><td>燃烧</td></tr><tr><td>deal</td><td>dealt</td><td>dealt</td><td>处理</td></tr><tr><td>dream</td><td>dreamt</td><td>dreamt</td><td>梦见</td></tr><tr><td>learn</td><td>learnt</td><td>learnt</td><td>学习</td></tr></tbody></table><h2 id="变-aid"><a href="#变-aid" class="headerlink" title="变 aid"></a>变 aid</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>lay</td><td>laid</td><td>laid</td><td>放下</td></tr><tr><td>pay</td><td>paid</td><td>paid</td><td>付费</td></tr><tr><td>say</td><td>said</td><td>said</td><td>说</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th><strong>原形</strong></th><th><strong>过去式</strong></th><th><strong>过去分词</strong></th><th><strong>汉语意思</strong></th></tr></thead><tbody><tr><td>stand</td><td>stood</td><td>stood</td><td>站立</td></tr><tr><td>tell</td><td>told</td><td>told</td><td>告诉</td></tr><tr><td>wear</td><td>wore</td><td>worn</td><td>穿</td></tr><tr><td>lie</td><td>lay</td><td>lain</td><td>躺</td></tr></tbody></table><h2 id="情态动词"><a href="#情态动词" class="headerlink" title="情态动词"></a>情态动词</h2><p>can(能够) &#x3D;&gt; could<br>may(可能) &#x3D;&gt; might<br>will(将会 愿意) &#x3D;&gt; would<br>shall(将要 应该) &#x3D;&gt; should</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英语不规则动词规律&quot;&gt;&lt;a href=&quot;#英语不规则动词规律&quot; class=&quot;headerlink&quot; title=&quot;英语不规则动词规律&quot;&gt;&lt;/a&gt;英语不规则动词规律&lt;/h1&gt;&lt;h2 id=&quot;过去式-过去分词-原形-AAA&quot;&gt;&lt;a href=&quot;#过去式-过去分词-原</summary>
      
    
    
    
    <category term="English" scheme="https://www.whaleluo.top/categories/English/"/>
    
    <category term="Study" scheme="https://www.whaleluo.top/categories/English/Study/"/>
    
    
    <category term="English" scheme="https://www.whaleluo.top/tags/English/"/>
    
    <category term="Study" scheme="https://www.whaleluo.top/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>英语零基础学习记录 Record 系列 —— 前言</title>
    <link href="https://www.whaleluo.top/english/english-from-zero-tutorial-start/"/>
    <id>https://www.whaleluo.top/english/english-from-zero-tutorial-start/</id>
    <published>2023-11-09T09:11:10.000Z</published>
    <updated>2023-11-09T09:11:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语零基础学习记录-Record-系列-——-前言"><a href="#英语零基础学习记录-Record-系列-——-前言" class="headerlink" title="英语零基础学习记录 Record 系列 —— 前言"></a>英语零基础学习记录 Record 系列 —— 前言</h1><h2 id="前"><a href="#前" class="headerlink" title="前"></a>前</h2><p>这是记录我从 0 开始学习英语的过程。</p><p>英语有三大块：</p><ol><li><strong>Pronunciation</strong> 发音</li><li><strong>Vocabulary</strong> 词汇</li><li><strong>Grammar</strong> 语法</li></ol><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英语零基础学习记录-Record-系列-——-前言&quot;&gt;&lt;a href=&quot;#英语零基础学习记录-Record-系列-——-前言&quot; class=&quot;headerlink&quot; title=&quot;英语零基础学习记录 Record 系列 —— 前言&quot;&gt;&lt;/a&gt;英语零基础学习记录 R</summary>
      
    
    
    
    <category term="English" scheme="https://www.whaleluo.top/categories/English/"/>
    
    
    <category term="English" scheme="https://www.whaleluo.top/tags/English/"/>
    
    <category term="Study" scheme="https://www.whaleluo.top/tags/Study/"/>
    
    <category term="GK" scheme="https://www.whaleluo.top/tags/GK/"/>
    
  </entry>
  
  <entry>
    <title>英语零基础学习记录 Record 系列 —— 语法 Grammar</title>
    <link href="https://www.whaleluo.top/english/english-from-zero-tutorial-grammar/"/>
    <id>https://www.whaleluo.top/english/english-from-zero-tutorial-grammar/</id>
    <published>2023-11-09T08:56:48.000Z</published>
    <updated>2023-11-09T08:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语零基础学习记录-Record-系列-——-语法-Grammar"><a href="#英语零基础学习记录-Record-系列-——-语法-Grammar" class="headerlink" title="英语零基础学习记录 Record 系列 —— 语法 Grammar"></a>英语零基础学习记录 Record 系列 —— 语法 Grammar</h1><h2 id="前"><a href="#前" class="headerlink" title="前"></a>前</h2><p>学习完如何记单词的同时，也要系统的学习英语语法，才能准确的把单词连接成句子。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系) 英语兔 BiliBili 比较系统语法教程： <a href="https://www.bilibili.com/video/BV1XY411J7aG">英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系) BV1XY411J7aG</a></li></ol><blockquote><p>上面的视频可以帮你理清整个英语语法的学习体系，我的笔记也是基于这个视频的内容进行补充和完善。</p></blockquote><h2 id="Clause-Element-句子成分"><a href="#Clause-Element-句子成分" class="headerlink" title="Clause Element 句子成分"></a>Clause Element 句子成分</h2><p><strong>什么 + 怎么样</strong></p><p><strong>主语</strong> 人&#x2F;物 + <strong>谓语</strong> 动作 Verbs &#x2F; 发生了什么事</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-subject-predicate-pic.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-subject-predicate-pic.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="5-种基本句型-Simple-Sentences-简单句"><a href="#5-种基本句型-Simple-Sentences-简单句" class="headerlink" title="5 种基本句型 Simple Sentences 简单句"></a>5 种基本句型 Simple Sentences 简单句</h3><p><strong>谓语动词</strong> 的变换构成 5 种英语的简单句型，<strong>英语语法的核心——动词 verb</strong><br><strong>谓语动词</strong> 分为 5 种：1. 不及物动词 2. 单及物动词 3. 双及物动词 4. 复杂及物动词 5. 系动词</p><ol><li><p>可以独立完成的动作 不及物动词<br>主语 + <strong>不及物动词（谓语）</strong><br>Papa Rabbit <strong>sleep</strong>. 兔老爹睡觉<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-1.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-1.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>有 1 个动作的承受者 （<strong>动作承受者就是宾语</strong>）<br>主语 + <strong>单及物动词 (谓语)</strong> + <strong>宾语</strong>(动作承受者)<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-2.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-2.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>有 2 个动作承受者<br>主语 + <strong>双及物动词 (谓语)</strong> + 间接宾语 + 直接宾语</p><blockquote><p>Teaches English，English 是直接宾语，承受 teaches，已经句意完整了，但是如果要准确描述教的对象就要加上 you 称为间接宾语。</p></blockquote><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-3.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-3.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>只有 1 个动作承受者（<strong>但需要补充才能使句意完整</strong>）<br>主语 + <strong>复杂及物动词 (谓语)</strong> + 宾语 + 宾语补语 (宾补)</p><blockquote><p>considers you 认为你，不能构造一个完整的句子，需要加上一个补语 smart 才能构成完整的句子。considers you smart.</p></blockquote><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-5.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-5.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>非 “动作” （赋值）赋予主语某种状态<br>主语 + <strong>连系动词 (系动词)</strong> + (主语) 补语&#x2F;表语<br>She <strong>is</strong> good.</p><blockquote><p>将 nice 赋值给主语 Rabbit ，中间用 smells <strong>系动词</strong> 连接，也可以使用 is ，相当于编程中的赋值符号 <code>=</code>。而赋值给主语的状态词 nice 称作<strong>主语补语</strong>，补充说明主语，或称 <strong>表语</strong>。</p></blockquote><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-6.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-6.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h3 id="5-种基本句-总结"><a href="#5-种基本句-总结" class="headerlink" title="5 种基本句 总结"></a>5 种基本句 总结</h3><p>5 种基本简单句就是他们的 <strong>谓语动词</strong> 种类的区分的</p><p>谓语动词：</p><ol><li>可以独立完成的动作，<strong>无需承受者</strong>：不及物动词</li><li>有一个动作的承受者，<strong>一个宾语无需补充信息</strong>：单及物动词</li><li>有两个动作承受者，<strong>有两个宾语一个直接一个间接</strong>：双及物动词</li><li>只有一个动作承受者，<strong>有一个宾语但是需要宾补补充信息</strong>：复杂及物动词</li><li>非“动作”，**用于赋予状态，之前是主语，之后是主语补语 (表语)**：系动词</li></ol><p>5 种基本句型：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-7.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-7.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h3><ol><li><p><strong>主语</strong></p></li><li><p><strong>谓语动词</strong></p></li><li><p><strong>宾语</strong> （谓语动词动作的承受者）</p></li><li><p><strong>宾语补语</strong></p></li><li><p><strong>主语补语</strong>&#x2F;<strong>表语</strong></p></li><li><p><strong>定语</strong>：相当于一个大 <strong>形容词</strong>，用来修饰和<strong>限定</strong> <strong>名词或代词</strong> 的词或词组，用来描述名词或代词的特征、性质、状态等。定语通常位于被 <strong>修饰的名词或代词前</strong>。定语前置<br><strong>The red</strong> car is mine.<br>She is a <strong>talented</strong> singer （过去分词做定语）talented adj. 有才华的</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-8.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-8.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p><strong>状语</strong>：相当于一个大 <strong>副词</strong>，是用来 <strong>补充说明动词、形容词、或整个句子的词或词组，用来</strong>描述动作的方式、程度、时间、地点<strong>等。 状语可以放在句子不同位置</strong><br><strong>He speaks</strong> English <strong>fluently</strong>.<br>I will <strong>go</strong> to the store <strong>tomorrow</strong>.<br>quickly 修饰谓语动词 ate。吃的快<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-9.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-9.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p><strong>同位语</strong>：再把主语或宾语说一遍 和 <strong>主语同等地位</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-10.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-10.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h2 id="简单句-VS-复合句"><a href="#简单句-VS-复合句" class="headerlink" title="简单句 VS 复合句"></a>简单句 VS 复合句</h2><ol><li>简单句 simple sentences 在英语中没法再拆的句子，5 种基本句型。</li><li>复合句 compound sentence 简单句型的叠加，不分主次</li><li>复杂句 complex sentence 一个简单句套一个简单句 主句、从句，从属关系 主句 + 从句<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-12.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-12.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol><p>总结：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-160.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-160.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="词性-词类"><a href="#词性-词类" class="headerlink" title="词性 (词类)"></a>词性 (词类)</h2><ol><li><strong>名词</strong> (nouns)：表人和物 Papa Rabit is a <strong>rabbit</strong>.</li><li><strong>冠词</strong> (articles) ：说明人和事物 Papa Rabbit is <strong>a</strong> rabbit.</li><li><strong>代词</strong> (pronouns)：代替人和物 I <strong>am</strong> a rabbit.</li><li><strong>形容词</strong> (adjectives)：形容人和物体 I am a <strong>supid</strong> rabbit.</li><li><strong>数词</strong> (numerals)：表数量 I ate tow <strong>carrots</strong></li><li><strong>副词</strong> (adverbs)：<strong>补充说明 动词、形容词 等</strong> I ate carrots <strong>quickly</strong>. <strong>副词做状语</strong></li><li><strong>介词</strong> (prepositions)：表示和其他词关系的词 I ate two carrots <strong>with</strong> chopsitcks.</li><li><strong>叹词</strong> (interjections)：表感叹 <strong>Ah</strong>,the carrot is tasty. <strong>oops</strong>!</li><li><strong>连词</strong> (conjunctions)：连接词和句 I ate two carrots and a potato,<strong>because</strong> I was hangry.</li><li><strong>动词</strong> (verb)：详见上</li></ol><h2 id="谓语动词-verb-时态-tense"><a href="#谓语动词-verb-时态-tense" class="headerlink" title="谓语动词 (verb) 时态 tense"></a>谓语动词 (verb) 时态 tense</h2><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-13.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-13.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>动作假设、情感等 <strong>语法的语气</strong><br> <img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-15.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-15.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="助动词"><a href="#助动词" class="headerlink" title="助动词"></a>助动词</h3><p><strong>谓语动词</strong> 本身往往不能独立完成本领，<strong>谓语动词</strong> 独自也无法完成表示否定、可能性、必须性等意思，就需要用的 <strong>助动词</strong> 帮助 <strong>谓语动词</strong> 完成其本领。</p><p>做 <strong>助动词</strong>，<strong>没有实义</strong>，只是帮助谓语动词而已。还可以做 <strong>实义动词</strong>，表其他词意。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-16.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-16.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h2><p>取代几乎所有从句，简化句子。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>非谓语动词丧失了谓语动词的本领</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-17.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-17.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-18.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-18.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h2><h3 id="动词第三人称单数"><a href="#动词第三人称单数" class="headerlink" title="动词第三人称单数"></a>动词第三人称单数</h3><p>人称：</p><ol><li>第一人称：我、我们</li><li>第二人称：你、你们</li><li>第三人称：它、他、她、他们、事物名称：人名、地名…</li></ol><p><strong>第三人称单数：非我，非你、非复数</strong></p><p>we -&gt; 第一人称复数<br>she -&gt; <strong>第三人称单数</strong><br>Lily -&gt; 单个人名，第三人称单数<br>they -&gt; 他们，第三人称复数<br>Tom and Mike -&gt; 两个人，第三人称复数<br>I -&gt; 第一人称单数<br>my parents -&gt; 第三人称复数</p><h3 id="及物动词和不及物动词"><a href="#及物动词和不及物动词" class="headerlink" title="及物动词和不及物动词"></a>及物动词和不及物动词</h3><p>及物动词直接加 + 宾语<br>不及物动词不能直接加宾语，构成 <strong>主 + 谓</strong> 结构，或者，<strong>不及物动词 + 介词 + 宾语</strong>，I look <strong>at</strong> you. 我 <strong>看</strong> 你。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-19.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-19.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="动词分类"><a href="#动词分类" class="headerlink" title="动词分类"></a>动词分类</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-20.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-20.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="动词时态"><a href="#动词时态" class="headerlink" title="动词时态"></a>动词时态</h3><p>动作的<strong>时间</strong> + 动作的<strong>状态</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-21.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-21.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="动词时间"><a href="#动词时间" class="headerlink" title="动词时间"></a>动词时间</h4><ol><li>过去、现在、将来</li><li>过去将来：对于<strong>过去某一个时间点而言</strong>的将来，昨天是前天这个过去的将来，（过去将来和现在没有必然关系）&#x3D;&gt; 一般出现在从句中。</li></ol><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-22.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-22.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="动词状态"><a href="#动词状态" class="headerlink" title="动词状态"></a>动词状态</h4><ol><li>一般：没有具体说明，默认的时态</li><li>完成：我已经给你点赞了</li><li>进行：我正在给你点赞</li><li>完成进行：我已经给你点完赞了，以后也正在给你点赞，<strong>已完成的但还会继续</strong>。</li></ol><h4 id="组合总述"><a href="#组合总述" class="headerlink" title="组合总述"></a>组合总述</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-84.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-84.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>各种助动词的变位：</p><ul><li>助动词 <strong>be</strong> 变位：<br>I <strong>am</strong> | You <strong>are</strong> | he&#x2F;she&#x2F;it <strong>is</strong><br>过去时态 I&#x2F;she&#x2F;he&#x2F;it <strong>was</strong> | you&#x2F;we&#x2F;they <strong>were</strong><br>be 的过去分词 <strong>been</strong></li><li>助动词 <strong>have</strong> 变位：<br>I&#x2F;you&#x2F;we&#x2F;they <strong>have</strong> | She&#x2F;he&#x2F;it <strong>has</strong><br>过去时态统一 <strong>had</strong></li><li>助动词 <strong>will</strong> 表将来：将要<br>后跟的 <strong>be、have、动词</strong> 全部都是原形<br>过去时态 <strong>would</strong></li><li>助动词 <strong>shall</strong> 表将来：将要<br>类似 will.<br>过去时态 <strong>shall</strong> -&gt; <strong>should</strong> 做情态助动词另一义：应该</li><li>can -&gt; could 能够</li><li>may -&gt; might 可能</li></ul><ol><li>现在一般：人称 + 动词原形（三单）|| I eat carrot.</li><li>现在进行：助动词 be 变位 + 动词现在分词 || I <strong>am studying</strong></li><li>现在完成：助动词 have 变位 + 动词的过去分词 || I <strong>have done</strong> 我做完了 <strong>强调过去对现在的影响</strong></li><li>现在完成进行：助动词 have 变位 + been(be 的过去分词) + 动词现在分词 || I <strong>have been thinking</strong> for you. <strong>对现在而言已经完成但还会继续</strong></li></ol><hr><ol><li>过去一般：人称 + 动词的 <strong>过去式</strong> (-ed) || I <strong>ate</strong> a carrot yesterday. <strong>简单的表示发生在过去的动作</strong></li><li>过去进行：助动词 be 的过去变位 <strong>was&#x2F;were</strong> + 动词现在分词 || I <strong>was studying</strong> English yesterday mornning.</li><li>过去完成：<strong>had</strong>(助动词 hava 的过去变位) + 动词过去分词 || He tried to find me yesterday afternoon,but I <strong>had</strong> already <strong>gone</strong> to Foshan. <strong>过去的过去对过去的影响</strong></li><li>过去完成进行：<strong>had</strong> + <strong>been</strong> + 动词的现在分词 || The rabbit <strong>had been eating</strong> carrot. <strong>对过去而言已经完成了的但接下来还会继续的状态，到什么时候不得而知</strong></li></ol><hr><p>表将来 will shall 将要，会</p><ol><li>将来一般：I&#x2F;you&#x2F;she&#x2F;he&#x2F;it&#x2F;they + <strong>will(助动词表将来)</strong> + <strong>动词原形</strong> <strong>单纯表示动作发生在将来</strong> or 助动词 <strong>be</strong> 的变位 + <strong>going to</strong> + 动词原型</li><li>将来进行：<strong>will</strong> + <strong>be</strong>(be 动词原形) + 动词现在分词 || I <strong>will be succeeding</strong>.</li><li>将来完成：<strong>will</strong> + <strong>have</strong> + 动词的过去分词 || I <strong>will have finished</strong> study next year. <strong>强调将来的过去对将来的影响</strong></li><li>将来 完成进行 时：<strong>will</strong> + <strong>have</strong> + 动词的现在分词</li></ol><hr><p>一般不常用：</p><ol><li>过去将来·一般时：<strong>would</strong>(will 的过去式) + 动词原型</li><li>过去将来·进行时：<strong>would</strong> + <strong>be</strong> + 动词的<strong>现在分词</strong></li><li>过去将来完成时：<strong>would</strong> + <strong>have</strong> + 动词的<strong>过去分词</strong></li><li>过去将来·完成进行时：<strong>would</strong> + <strong>have</strong> + <strong>been</strong> + 动词的<strong>现在分词</strong></li></ol><h4 id="组合详解"><a href="#组合详解" class="headerlink" title="组合详解"></a>组合详解</h4><ol><li><p>现在进行时：兔子正在吃萝卜<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-23.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-23.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-41.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-41.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-40.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-40.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>现在完成时：兔子已经吃完了胡萝卜<br>指过去某个动作对现在的影响 I have done 我已经完成了</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-24.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-24.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>have：1. 实义动词 有 2. 助动词，构成时态 I&#x2F;you&#x2F;we&#x2F;they have -&gt; She&#x2F;he&#x2F;it has<br>过去分词 + ed +en</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-42.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-42.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-43.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-43.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>现在完成时 VS 一般过去时<br>现在完成时强调过去的事情对现在的影响<br>一般过去时单独的指出过去曾经的事<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-53.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-53.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>现在完成进行时：<strong>对现在而言已经完成但还会继续</strong>。<br>兔子现在已经吃完了胡萝卜，但还会继续吃。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-25.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-25.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-44.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-44.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-45.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-45.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>现在一般时：对现在而言，没有特别指出的状态，陈述事实<br>这兔子吃胡萝卜<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-26.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-26.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><ol><li>表达事实，没有状态和时间的限制，客观实时</li><li>表达习惯&#x2F;重复的动作</li><li>表示预计发生的事<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-39.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-39.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol></li><li><p>过去进行时<br>这兔子昨天凌晨三点的时候正在吃胡萝卜。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-27.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-27.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>助动词 be 的变位<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-51.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-51.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-52.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-52.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>一般过去时态 VS 过去进行时态<br>一般过去时强调做了没有 -&gt; 图片<br>过去进行时强调过去正在做的事情 -&gt; 视频<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-54.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-54.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去完成时<br>这兔子昨天凌晨三点的时候已经吃完了胡萝卜<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-28.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-28.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>过去完成时：过去的过去对过去的影响</strong><br><strong>现在完成时：现在的过去对现在的影响</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-55.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-55.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-56.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-56.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-57.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-57.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-58.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-58.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去完成进行时：对过去而言已经完成了的但接下来还会继续的状态，到什么时候不得而知<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-29.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-29.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>组成：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-59.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-59.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-60.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-60.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去一般时：简单的表示发生在过去的动作<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-30.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-30.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-49.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-49.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-50.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-50.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>直接加动词过去式<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-46.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-46.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-47.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-47.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-48.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-48.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>将来进行时<br>这兔子明天下午三点的时候会正在吃胡萝卜<br>在将来某个时间，某个动作是进行的过程中<br>比一般将来时还笃定<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-31.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-31.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>组成：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-65.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-65.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-66.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-66.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>将来完成时<br>这兔子明天下午三点的时候已经吃完了胡萝卜，之前什么时候开始吃不知道，也可能现在就开始吃了 。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-32.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-32.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>组成：<br><strong>现在完成时：强调过去对现在的影响</strong><br><strong>将来完成时：强调将来的过去对将来的影响</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-67.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-67.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-68.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-68.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-69.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-69.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>将来完成进行时<br>这兔子明天下午三点的时候已经吃完了胡萝卜，但还要继续吃<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-33.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-33.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>构成：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-70.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-70.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-71.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-71.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-72.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-72.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>一般将来时，单纯表示动作发生在将来<br>英语中表达将来时态需要助动词 <strong>will</strong> 来帮忙 will + be&#x2F;have 全部原型<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-34.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-34.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>特殊表将来的形式：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-61.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-61.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>will 形式：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-62.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-62.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>一般将来时态通常表达：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-63.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-63.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>动词的语气<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-64.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-64.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去将来 · 进行时<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-78.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-78.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-79.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-79.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去将来完成时<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-35.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-35.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>构成：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-80.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-80.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-81.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-81.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去将来 · 完成进行时<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-36.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-36.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>构成：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-82.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-82.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-83.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-83.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>过去将来 · 一般时<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-37.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-37.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>形式：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-75.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-75.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-74.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-74.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-76.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-76.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>would 的多义：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-77.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-77.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><p>时态总结：1. 时·态分离 2. 动词变形 (人称变位) 3. 助动词 4. 与其他语法概念混合</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-38.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-38.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>常用时态：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-84.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-84.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="动词语气-Verb-Moods"><a href="#动词语气-Verb-Moods" class="headerlink" title="动词语气 Verb Moods"></a>动词语气 Verb Moods</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-85.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-85.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>陈述语气（描述现实）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-86.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-86.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>祈使语气（命令&#x2F;请求）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-87.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-87.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-88.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-88.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>虚拟语气，基本用于从句中。表示某个描述与现实相反。涉及到<strong>动词变位</strong>。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-89.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-89.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><strong>表 “ 不可能 “ 的假设：</strong></p><ol><li>与现在相反<br>条件句：过去式 如果是 be 就要用 were 无论什么人称 （一般过去）<br>主句：would + 动词原型 （过去将来）<br>If <strong>I were you</strong>,I <strong>would give</strong> this video a thumbs-up.<br>如果我是你，我会给这视频点赞。<br><strong>言下之意</strong>：我不可能是你 If I <del>am</del> you.</li><li>与将来相反<br>条件句：should <strong>（shall 过去时）</strong>&#x2F;were to + 动词原型 （过去将来）<br>主句：would + 动词原型 （过去将来）<br>If I <strong>should see</strong> the rabbit tomorrow,I <strong>would beat</strong> it.<br>如果我 <strong>将会（shall 过去时）</strong> 明天见到这兔子，我就会打他。<br><strong>言下之意</strong>：我不可能明天遇到这兔子</li><li>与过去相反<br>条件句：had + 动词过去分词 （过去完成）<br>主句：would have + 动词过去分词 （过去将来完成时）<br>If I <strong>had watched</strong> this video before,I <strong>would have aced</strong> my test.<br>我要是之前就看了这视频，那绝对能考个好成绩。<br><strong>言下之意:</strong> 我之前没有看这个视频，考不出好成绩。</li></ol><p><strong>表达 愿望、请求、建议、命令：（希望每个动作&#x2F;事件 发生）</strong></p><p>wish v. 希望、祝愿 <strong>可能性小</strong><br>hope v. 希望</p><p>would rather 宁可，宁愿 + 虚拟语气</p><p>demand(要求) suggest(建议) insist (坚持) order (命令) + should + 动词原型</p><ol><li><p>对 <strong>现在</strong> 的愿望：<strong>wish</strong> + 动词过去式 be 助动词全部用 <strong>were</strong><br>I <strong>wish</strong> that I <strong>were</strong> a cat. I <del>am</del> a cat.<br>我希望我现在是只猫。</p></li><li><p>对 <strong>过去</strong> 的愿望：<strong>wish</strong> + <strong>had&#x2F;would have</strong> + <strong>动词过去分词</strong><br>I <strong>wish</strong> that I aced the carrot.<br>我希望我吃了那只胡萝卜。<br><strong>言下之意</strong>：我没有吃那个胡萝卜，后悔啊。</p></li><li><p>对 <strong>将来</strong> 的愿望<br>I <strong>wish</strong> that I <strong>could eat</strong> the carrot.<br>我希望我 <strong>能够</strong> 吃那只胡萝卜。<br><strong>言下之意：</strong> 我多半吃不到那只胡萝卜，伤心啊。</p></li></ol><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-90.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-90.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="非谓语动词-1"><a href="#非谓语动词-1" class="headerlink" title="非谓语动词"></a>非谓语动词</h3><p><strong>谓语动词</strong> 可以表示动作的时间 <strong>状态、人称单复数</strong>，<strong>受主语限制</strong>，<strong>限定了动作的时态</strong>，也可以称为，<strong>限定性动词</strong>：</p><p><strong>谓语动词</strong> 是句子的核心。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-97.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-97.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><strong>非谓语动词</strong>（非限定动词）：不受主语限制，不被限定的动词，但失去了谓语动词表达时间和人称的本领。</p><p><strong>非谓语动词</strong> 出现在句子剩下的非核心部分。一个简单句只允许出现一个<strong>谓语动词</strong>。</p><h4 id="动词不定式-infinitive-infinite-adj-无限的"><a href="#动词不定式-infinitive-infinite-adj-无限的" class="headerlink" title="动词不定式 infinitive infinite adj. 无限的"></a>动词不定式 infinitive infinite adj. 无限的</h4><p>不定式：<strong>不受时间、人称的限制</strong></p><p>to + 动词原形 完全不定式 full infinitive<br>不加 to 裸不定式 bare infinitive</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-92.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-92.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="动词不定式做主语"><a href="#动词不定式做主语" class="headerlink" title="动词不定式做主语"></a>动词不定式做主语</h5><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-93.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-93.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>It 做形式主语</p><h5 id="动词不定式做-宾语-likes-的承受者-to-eat"><a href="#动词不定式做-宾语-likes-的承受者-to-eat" class="headerlink" title="动词不定式做 宾语(likes 的承受者 to eat)"></a>动词不定式做 <strong>宾语</strong>(likes 的承受者 to eat)</h5><p>The rabbit likes <strong>to eat carrots</strong> .</p><p>it 做 <strong>形式宾语</strong>：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-94.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-94.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="动词不定式做宾补"><a href="#动词不定式做宾补" class="headerlink" title="动词不定式做宾补"></a>动词不定式做宾补</h5><p>和 <strong>复杂及物动词使用</strong></p><p><strong>使役动词</strong>：see find watch hava make let 后面用不定式做宾补需要 <strong>省略 to</strong> (前面的裸不定式)。</p><p><strong>谓语动词</strong> 后接不定式，<strong>省不省略 to 区别不大</strong>，都是正确的表达。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-95.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-95.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="不定式做主语"><a href="#不定式做主语" class="headerlink" title="不定式做主语"></a>不定式做主语</h5><p><strong>主系表</strong> 结构 <strong>is</strong> 表赋值：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-96.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-96.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="不定式做定语-定语后置"><a href="#不定式做定语-定语后置" class="headerlink" title="不定式做定语 定语后置"></a>不定式做定语 定语后置</h5><p><strong>to eat</strong> 做 后置定语，限定宾语，表示这些胡萝卜是要被吃的。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-98.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-98.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="不定式做状语"><a href="#不定式做状语" class="headerlink" title="不定式做状语"></a>不定式做状语</h5><p><strong>状语</strong>：修饰 <strong>谓语动词</strong></p><p>表达原因、目的、结果</p><ol><li>表原因<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-99.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-99.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>表目的<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-100.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-100.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>表结果<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-101.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-101.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol><p>不定式做状语有简化从句的作用</p><h5 id="高级不定式（不常考）"><a href="#高级不定式（不常考）" class="headerlink" title="高级不定式（不常考）"></a>高级不定式（不常考）</h5><p>to + 动词原形（完成 进行 完成进行），中的动词原形增加了 <strong>状态</strong>，后接助动词的原形。</p><p>只是表达了状态，实际还是<strong>不受时间（现在 过去 将来 过去将来）限制</strong>。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-102.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-102.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>例句：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-103.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-103.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h4><p><strong>动词 + ing</strong> 将 <strong>动词转换为名词</strong> 来使用。</p><p>名词在句子可以做的成分，动名词同样可以承担。</p><ol><li><p>动名词做主语</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-104.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-104.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>动名词做主语补语（表语）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-105.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-105.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>动名词做定语<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-106.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-106.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>容易和现在分词做定语混淆。</strong></p></li><li><p>动名词做宾语<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-107.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-107.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>使役动词不能加不定式 to 做宾语 ，必须变为动名词 + ing 做宾语：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-108.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-108.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>介词 to</strong> 和 <strong>不定式 to</strong> 易混淆：<br>介词 + 宾语（非谓语动词 动名词充当宾语，不能使用不定式 to）<br> <img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-110.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-110.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-109.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-109.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>动词不定式 to 和 动名词做宾语的区别：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-111.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-111.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>forget <strong>to do</strong> -&gt; 忘记去做<br>forget <strong>doing</strong> -&gt; 忘记做过</p></li></ol><h4 id="现在分词"><a href="#现在分词" class="headerlink" title="现在分词"></a>现在分词</h4><p>现在进行时态 &#x3D; be + <strong>现在分词</strong></p><p><strong>误区</strong>：不能因为是现在分词，而认为是表示现在时间的，<strong>非谓语动词没有时间变化。</strong></p><p><strong>现在分词</strong> 相当于一个 <strong>形容词 （用来修饰名词表状态）</strong>，形容词在句子中可以充当的成分，<strong>现在分词</strong> 也可以。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-112.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-112.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><ol><li>现在分词 做 <strong>主语补语</strong>（表语 形容词）<br>interest v. 使人感兴趣的 -&gt; 现在分词 interesting adj. 有趣的<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-113.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-113.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>现在分词做 <strong>宾语补足语</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-114.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-114.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>现在分词做宾补</strong> 和 <strong>不定式做宾补</strong> 的区别：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-115.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-115.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li><strong>现在分词</strong> 做 状语（表示谓语动词状态）<br>表示 时间、原因、条件、结果、让步、目的、方式、伴随情况<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-116.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-116.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol><h4 id="过去分词"><a href="#过去分词" class="headerlink" title="过去分词"></a>过去分词</h4><p><strong>误区</strong>：过去分词是 <strong>非谓语动词</strong>，他不能自带时间，<strong>不能表示过去的时间</strong>。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-117.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-117.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>minced 不带时间概念，而只是 <strong>表示被姣的状态</strong>。</p><p><strong>过去分词</strong>：动词原形 + -ed （<strong>看作形容词</strong>）</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-119.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-119.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>不规则过去分词：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-118.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-118.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><ol><li><p><strong>过去分词</strong> 短语做定语，要放到被修饰的名词之后。<strong>后置定语</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-120.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-120.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p><strong>过去分词</strong> 和 <strong>现在分词</strong> 一样，可以做表语（主语补语）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-121.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-121.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>现在分词</strong> 暗含 <strong>主动</strong> 关系，即被描述的是 <strong>做出动作的人&#x2F;物体</strong><br><strong>过去分词</strong> 暗含 <strong>被动</strong> 关系，即被描述的是 <strong>动作的接受者</strong></p></li><li><p><strong>过去分词</strong> 和 <strong>现在分词</strong> 一样，可以做 <strong>宾语补语</strong>（宾补）<br>steal v. 偷 -&gt; stolen 过去分词<br>The rabbit found his carrot <strong>stolen</strong>. 兔子发现他的胡萝卜被偷了。</p></li><li><p><strong>过去分词</strong> 和 <strong>现在分词</strong> 一样，可以做 <strong>状语</strong> （表示谓语动词的状态）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-122.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-122.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><strong>现在分词</strong> 暗含 <strong>主动</strong> 关系，即被描述的是 <strong>做出动作的人&#x2F;物体</strong><br><strong>过去分词</strong> 暗含 <strong>被动</strong> 关系，即被描述的是 <strong>动作的接受者</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-123.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-123.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>高级用法：让句子中只含有一个谓语动词，其他的变成非谓语动词，用一个简单句写出来。<strong>独立主格</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-124.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-124.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h4 id="非谓语动词总结"><a href="#非谓语动词总结" class="headerlink" title="非谓语动词总结"></a>非谓语动词总结</h4><ol><li>过去分词 （被动&#x2F;完成）</li><li>现在分词（主动&#x2F;进行）</li><li>不定式（将要）</li></ol><h3 id="独立主格"><a href="#独立主格" class="headerlink" title="独立主格"></a>独立主格</h3><p>回顾：现在分词做 <strong>状语</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-125.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-125.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>独立主格：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-126.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-126.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>独立主格对从句的简化：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-127.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-127.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-128.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-128.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>名词 + <del>being</del> + …</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-129.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-129.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="助动词-1"><a href="#助动词-1" class="headerlink" title="助动词"></a>助动词</h3><p><strong>助动词</strong>：<strong>辅助构成谓语</strong>，当自己本身<strong>不能单独作谓语动词</strong>的词，助动词除情态动词外无实义。</p><p>will 助动词帮助构成 将来时：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-130.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-130.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>can 是 <strong>情态 (助) 动词</strong>，辅助谓语动词表能力，也可以算是助动词，但是有实义，表 “ 能够 “</p><p>The rabbit <strong>can</strong> kill a wolf. 兔子能杀死一只狼</p><h4 id="基本助动词"><a href="#基本助动词" class="headerlink" title="基本助动词"></a>基本助动词</h4><p>be、do、have 做<strong>助动词</strong>时，无意义。做<strong>实义动词</strong>时：be(存在)、do(做)、have(有)<br>可表时态、被动、强调</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-131.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-131.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>应用：</p><ol><li>be &#x3D;&gt; is&#x2F;am&#x2F;are&#x2F;was&#x2F;were<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-135.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-135.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>have &#x3D;&gt; has&#x2F;had(过去)<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-136.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-136.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>do &#x3D;&gt; does(强调&#x2F;否定)<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-137.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-137.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol><h4 id="情态助动词"><a href="#情态助动词" class="headerlink" title="情态助动词"></a>情态助动词</h4><p>情态助动词是有实际含义的，但是不能单独做谓语动词。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-132.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-132.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><ol><li><p>can&#x2F;could 有能力做 &#x2F; 表请求或许可 &#x2F; 表可能性<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-138.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-138.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-139.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-139.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-140.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-140.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>may&#x2F;might 表请求或许可 &#x2F; 表可能性程度比 can 小 也许、可能、大概 &#x2F; 放在句首表祝愿<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-141.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-141.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>表可能性程度比 can 小 也许、可能、大概<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-142.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-142.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>放在句首表祝愿<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-143.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-143.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>must 表必须 &#x2F; 表禁止 &#x2F; 表推测 一定肯定</p><p>表必须：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-144.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-144.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>表禁止：</p><p><strong>mustn’s 只有禁止的含义</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-145.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-145.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>表推测 一定肯定 只能用在肯定句里：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-146.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-146.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>will&#x2F;would 构成时态</p><p>构成时态：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-147.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-147.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>表示请求、建议：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-148.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-148.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>表推测、假设 可能 would 比 will 程度更弱：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-149.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-149.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>shall&#x2F;should<br>构成时态：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-150.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-150.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>征求意见：<br>Shall we meet at 9AM.<br>我们早上 9 点见面如何。</p><p>表警告命令：<br>You shall not steal. 你不可偷盗</p><p>表有一定根据的推测：<br>It should rain tomorrow. 明天 <strong>应该</strong> 会下雨</p><p>表 ”竟然“：<br>It’s surprising that he should be late.<br>真的很惊讶，他竟然迟到</p><p>构成虚拟语气：<br>If it should rain tomorrow,I wouldn’t go.<br>如果明天万一下雨，我就不去了</p></li><li><p>ought to 表示应该</p></li><li><p>need 表需要、有必要<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-151.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-151.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>dare 敢、挑战、冒险<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-152.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-152.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>used to 习惯做某事<br>表示现在的动作，尤其是重复的动作，强调和现在对比。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-153.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-153.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h4 id="半助动词"><a href="#半助动词" class="headerlink" title="半助动词"></a>半助动词</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-133.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-133.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>例句：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-134.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-134.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><ol><li><p>be able to 表能力<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-154.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-154.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>be going to 将要 &#x2F; be about to 马上 &#x2F; be to 被命令做某事</p></li><li><p>had better &#x3D; ‘d better 最好做</p></li></ol><h3 id="系动词"><a href="#系动词" class="headerlink" title="系动词"></a>系动词</h3><p><strong>系动词</strong> 的作用就是 <strong>编程中的赋值</strong>。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-155.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-155.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="使役动词"><a href="#使役动词" class="headerlink" title="使役动词"></a>使役动词</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-159.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-159.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>使役动词后面要加宾语补语：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-156.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-156.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>使役动词后接裸不定式，动词原形不加 to：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-157.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-157.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-158.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-158.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="从句-Clause"><a href="#从句-Clause" class="headerlink" title="从句 Clause"></a>从句 Clause</h2><p>大宾语：宾语从句</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-161.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-161.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>复杂句：主句 + 从句（充当某种句子成分）</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-162.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-162.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>根据 <strong>从句充当的句子成分</strong> 给从句分类：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-163.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-163.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>根据 <strong>从句充当的词性</strong> 给从句分类：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-167.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-167.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>充当名词（名词性从句）：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-164.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-164.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>充当形容词（形容词性从句）<strong>定语从句</strong>：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-165.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-165.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>充当副词（副词性从句）<strong>状语从句</strong>：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-166.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-166.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="形容词性从句（定语从句）"><a href="#形容词性从句（定语从句）" class="headerlink" title="形容词性从句（定语从句）"></a>形容词性从句（定语从句）</h3><p>为了方便下文统一称为 <strong>定语从句</strong></p><p>对某个人或事物进行描述，具有形容词的性质。</p><p>思维方式差别：</p><p>中文：形容词（句子）+ 的</p><p>中文句子的定语都是 <strong>前置的</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-168.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-168.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>英文：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-169.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-169.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-170.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-170.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>英文从句做定语都是后置的：</p><p>定语充当一个大形容词，补充、修饰、限定名词。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-171.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-171.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-172.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-172.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="关系词"><a href="#关系词" class="headerlink" title="关系词"></a>关系词</h4><p>关系词（引导词）用于引导定语从句：</p><p>分成：关系代词、关系副词</p><h5 id="关系代词"><a href="#关系代词" class="headerlink" title="关系代词"></a>关系代词</h5><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-173.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-173.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-174.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-174.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-175.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-175.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>that vs. which：</p><p>先行词是唯一的：that &#x2F; 先行词多选一：which</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-176.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-176.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-177.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-177.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h5 id="关系副词"><a href="#关系副词" class="headerlink" title="关系副词"></a>关系副词</h5><p>关系词是副词：where,why,when</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-178.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-178.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>关系副词 &#x3D; 介词 + which</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-179.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-179.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="限定性与非限定性定语从句-形容词从句"><a href="#限定性与非限定性定语从句-形容词从句" class="headerlink" title="限定性与非限定性定语从句 (形容词从句)"></a>限定性与非限定性定语从句 (形容词从句)</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-180.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-180.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>非限定，接着补充，作为句子的插入语</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-182.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-182.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>非限定性定语从句做插入语，可以直接去掉，不影响句意。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-183.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-183.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-184.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-184.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="名词性从句-充当名词"><a href="#名词性从句-充当名词" class="headerlink" title="名词性从句 (充当名词)"></a>名词性从句 (充当名词)</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-185.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-185.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="主语从句"><a href="#主语从句" class="headerlink" title="主语从句"></a>主语从句</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-186.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-186.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>从句改为不确定的信息：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-187.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-187.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>Whether,Where,When,How,Who,What 在疑问句中是：疑问代词或者疑问副词</p><p>在主语从句中属于连接代词、连接副词：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-188.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-188.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-189.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-189.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>将主语从句放在句前，会导致主语很长，句子头重脚轻，可以通过形式主语 it 来改写：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-190.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-190.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-191.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-191.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>It is + XXX + that 也涉及到虚拟语气</p><h3 id="宾语从句"><a href="#宾语从句" class="headerlink" title="宾语从句"></a>宾语从句</h3><p>从句在整个复杂句中充当宾语（动作承受者）</p><h4 id="确定信息做宾语从句"><a href="#确定信息做宾语从句" class="headerlink" title="确定信息做宾语从句"></a>确定信息做宾语从句</h4><p>宾语从句中 that 可选</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-192.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-192.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="不确定信息做宾语从句"><a href="#不确定信息做宾语从句" class="headerlink" title="不确定信息做宾语从句"></a>不确定信息做宾语从句</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-193.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-193.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="否定加在谓语动词前，而非从句中"><a href="#否定加在谓语动词前，而非从句中" class="headerlink" title="否定加在谓语动词前，而非从句中"></a>否定加在谓语动词前，而非从句中</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-194.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-194.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="宾语从句要和主句的时态保持一致"><a href="#宾语从句要和主句的时态保持一致" class="headerlink" title="宾语从句要和主句的时态保持一致"></a>宾语从句要和主句的时态保持一致</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-195.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-195.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="Be-形容词-that-固定句型"><a href="#Be-形容词-that-固定句型" class="headerlink" title="Be + 形容词 + that 固定句型"></a>Be + 形容词 + that 固定句型</h4><p>应该属于 <strong>宾语从句</strong>，其中的形容词通常表达某种看法或者判断，而 that 引导的从句相当于 看法&#x2F;判断。和动作后加承受者很相似，可以做宾语。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-197.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-197.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="表语从句"><a href="#表语从句" class="headerlink" title="表语从句"></a>表语从句</h3><p>主 + 系 (be) + 表 (主语补语) 结构</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-198.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-198.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>从句充当表语：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-199.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-199.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-200.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-200.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>表语从句，系动词不是 be 动词的情况：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-201.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-201.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="同位语从句"><a href="#同位语从句" class="headerlink" title="同位语从句"></a>同位语从句</h3><p>同位语：用不同的方式把<strong>同一个概念再说一遍</strong>，用逗号隔开。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-202.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-202.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>同位语从句：</p><p>这样的从句常在句中修饰抽象的名词，因为抽象，才需要用另一种方式再说一遍。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-203.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-203.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-204.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-204.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>同位语从句充当 idea 的宾语，是宾语的同位语<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-205.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-205.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="宾语补语从句"><a href="#宾语补语从句" class="headerlink" title="宾语补语从句"></a>宾语补语从句</h3><p>主 + 复杂及物动词 (谓语动词) + 宾语 + 宾语补语</p><p>call,make,consider…</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-206.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-206.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="副词从句-状语从句"><a href="#副词从句-状语从句" class="headerlink" title="副词从句 (状语从句)"></a>副词从句 (状语从句)</h3><p>为了方便，下文统一称 <strong>状语从句</strong></p><p>状语在句子充当一个大副词的作用，补充说明谓语动词、形容词的各种状态。</p><p>做状语，在句子起补充信息的作用，有多种可能。所以副词从句（状语从句）的种类繁多。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-207.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-207.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="时间状语从句"><a href="#时间状语从句" class="headerlink" title="时间状语从句"></a>时间状语从句</h4><ol><li><p>在某一个时间点之前，引导词 before<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-208.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-208.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>在某一时间点之中（当时）<br>引导词：<br>when(时间点，“突然”)<br>while(一个时间段)<br>as(同时进行两个动作)<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-209.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-209.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>在某个时间点之后，引导词 after<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-210.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-210.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>从之前某一个时间点开始算起，引导词 since<br>往往暗示了对之后有影响，在时态一节提到过这样的情况一般要使用 <strong>完成时态</strong>。<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-211.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-211.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>直到之后某一时间点 引导词 until (有点像 since 的对立面)<br>从某一时间点算起，直到之后的某一时间点<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-212.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-212.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>一…就… 引导词：as soon as<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-213.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-213.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>the next time 下次<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-214.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-214.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h4 id="地点状语从句"><a href="#地点状语从句" class="headerlink" title="地点状语从句"></a>地点状语从句</h4><p>引导词：where + “ 强调形式 “(wherever,everywhere,anywhere)</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-215.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-215.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>与表地点的定语从句区别：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-216.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-216.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>强调形式：</p><p>wherever 不管哪里、everywhere 强调所有的地方、anywhere 强调任何地方</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-217.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-217.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="比较副词从句"><a href="#比较副词从句" class="headerlink" title="比较副词从句"></a>比较副词从句</h4><p>英语的形容词有所谓的比较级，比如：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-218.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-218.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>上面的句子相当于省略句，实际上都是副词从句，用比较的方式对前面的主句进行补充说明。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-219.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-219.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-220.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-220.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-221.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-221.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="条件状语从句-条件句"><a href="#条件状语从句-条件句" class="headerlink" title="条件状语从句 (条件句)"></a>条件状语从句 (条件句)</h4><p>条件句，<strong>主将从现</strong>，主句用将来时，表示这种条件成立，明确在将来会发生的动作，用一般将来时；从句用<strong>一般现在时</strong>，表示 <strong>一般</strong> 的状态，和现在没关系，不包含时间信息：</p><p>从句总是比主句落后一个时间段</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-223.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-223.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>容易与虚拟语气表不可能的假设混淆：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-224.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-224.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>从句总是比主句落后一个时间段：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-225.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-225.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-226.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-226.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>其他引导词 unless 除非，如果..不 将 if 反着说：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-227.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-227.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-228.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-228.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>provided(如果 假如),as long asI 只要),in case(如果 万一)</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-229.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-229.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="让步副词从句"><a href="#让步副词从句" class="headerlink" title="让步副词从句"></a>让步副词从句</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-230.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-230.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-231.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-231.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>即使&#x2F;就算 … 也 …</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-232.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-232.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-233.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-233.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>though&#x2F;even though&#x2F;Although 尽管 虽然</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-234.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-234.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>No matter + 疑问句 表未知情况，不管如何：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-235.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-235.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>no matter &#x3D; regardless (regard 注意)</p><h4 id="方式副词从句"><a href="#方式副词从句" class="headerlink" title="方式副词从句"></a>方式副词从句</h4><p>方式状语从句主句是事实发生的，而在条件状语从句的<strong>虚拟语气</strong>中，主句是没有发生的。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-236.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-236.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>就好像： as if you</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-237.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-237.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>不表假设，表正在发生的某种形式：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-238.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-238.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="原因-目的-结果-状语从句"><a href="#原因-目的-结果-状语从句" class="headerlink" title="原因&#x2F;目的&#x2F;结果 状语从句"></a>原因&#x2F;目的&#x2F;结果 状语从句</h4><p>共同点在于都是 “表示了某种因果”</p><p>Because 因为</p><p>Sine 既然，不是时间状语从句从某个时间点开始的意思，而是介绍某个原因：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-239.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-239.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>as 表原因，不是 …像</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-240.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-240.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>区别：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-241.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-241.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-242.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-242.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-243.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-243.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>目的状语从句</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-244.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-244.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-245.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-245.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>从句一般用情态助词表目的性：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-246.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-246.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>结果状语从句：</p><p>表达结果</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-247.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-247.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>so that：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-248.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-248.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-249.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-249.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="介词-preposition"><a href="#介词-preposition" class="headerlink" title="介词 preposition"></a>介词 preposition</h2><p>牛津词典统计的最常用英语单词：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-250.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-250.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>目录：<br> <img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-251.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-251.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="介词定义"><a href="#介词定义" class="headerlink" title="介词定义"></a>介词定义</h3><p>介词是放在名词、代词，等词之前用来跟他们增添“附加信息”的词。<br>本质是前置词，和后面的信息构成关系。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-252.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-252.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-253.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-253.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="介词构成形式"><a href="#介词构成形式" class="headerlink" title="介词构成形式"></a>介词构成形式</h3><ol><li>简单介词：in on at with</li><li>短语介词：（视作介词，不单独表达完整意思）<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-254.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-254.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>合成介词<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-255.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-255.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li><li>分词介词<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-256.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-256.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></li></ol><h3 id="介词学习误区"><a href="#介词学习误区" class="headerlink" title="介词学习误区"></a>介词学习误区</h3><p>不能将介词和中文一一对应，因为介词有很多引申义。</p><p>比如 by 就有很多个意思：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-257.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-257.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="介词学习技巧"><a href="#介词学习技巧" class="headerlink" title="介词学习技巧"></a>介词学习技巧</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-258.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-258.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>about:</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-259.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-259.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>on:<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-260.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-260.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>in：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-261.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-261.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>介词的含义可能看上去毫不相干，但都是从根源的，有着空间性的含义引申出来的。</p><p>某些介词很容易混淆，需要用其空间含义去推导记忆（追本溯源）</p><p>in、on、at：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-263.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-263.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-262.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-262.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>引申到时间：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-264.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-264.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="英语常见介词的用法"><a href="#英语常见介词的用法" class="headerlink" title="英语常见介词的用法"></a>英语常见介词的用法</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-265.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-265.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-266.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-266.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-267.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-267.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-268.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-268.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>over 往往特指正上方<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-269.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-269.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>above 只需要 “高出” 就行<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-270.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-270.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>区别：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-271.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-271.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-272.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-272.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-273.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-273.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-274.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-274.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-275.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-275.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-276.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-276.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-277.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-277.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>区别：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-278.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-278.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-279.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-279.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-280.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-280.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-281.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-281.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-282.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-282.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-283.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-283.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-284.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-284.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-285.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-285.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-286.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-286.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-287.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-287.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-288.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-288.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-289.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-289.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-290.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-290.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-291.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-291.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-292.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-292.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-293.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-293.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-294.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-294.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-295.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-295.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-296.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-296.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-297.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-297.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-298.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-298.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-299.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-299.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-300.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-300.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-301.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-301.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-302.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-302.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-303.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-303.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-304.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-304.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-305.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-305.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>because of &#x2F; because</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-306.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-306.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="介词宾语"><a href="#介词宾语" class="headerlink" title="介词宾语"></a>介词宾语</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-307.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-307.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-308.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-308.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-309.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-309.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="被动语态"><a href="#被动语态" class="headerlink" title="被动语态"></a>被动语态</h2><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-310.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-310.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>被动语态构型：<br>be(根据人称时态进行变位) + 过去分词<br>by + 动作执行者</p><p>5 种基本句型变被动语态：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-311.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-311.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>过去分词表被动，与被动语态有很大关系：</p><p>非谓语动词做表语（主语补语）</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-312.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-312.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>也可以改成被动语态：<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-313.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-313.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>主语 + 复杂及物 + 宾语 + 宾语补语</p><p>动词不定式做宾语补语改被动：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-316.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-316.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>与时态、情态动词等结合的复杂被动语态：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-317.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-317.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><p>分为专有名词和普通名词</p><p>单数名词和复数名词</p><p>可数名词和不可数名词</p><h3 id="名词所有格"><a href="#名词所有格" class="headerlink" title="名词所有格"></a>名词所有格</h3><h4 id="名词宾格主格"><a href="#名词宾格主格" class="headerlink" title="名词宾格主格"></a>名词宾格主格</h4><p>格：为了反映某个词在句中的语法功能，“主格”在句子充当主语，“宾格”在句子充当宾语。</p><p>Rabbit 充当主语，用主格加 “s”; carrot 充当宾语，用宾格加 “s”.</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-318.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-318.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="名词所有格-1"><a href="#名词所有格-1" class="headerlink" title="名词所有格"></a>名词所有格</h4><p>‘s 在有生命的人或动物之后表所有权</p><p>所有格，通常表示所有、所属关系而存在的：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-319.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-319.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>表示共有：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-320.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-320.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>表示各自：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-321.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-321.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-322.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-322.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>of 构成所有格，用来描述所修饰名词的性质特征，只是顺序要颠倒一下：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-323.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-323.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="双重所有格"><a href="#双重所有格" class="headerlink" title="双重所有格"></a>双重所有格</h3><p>a photo of Michael’s. M 拥有的照片中的一张<br>a photo of Michael. M 出镜的照片之一</p><h2 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h2><p>pro(代替)|noun(名词) 替代名词的词</p><h3 id="人称代词"><a href="#人称代词" class="headerlink" title="人称代词"></a>人称代词</h3><p>人称代词的格：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-325.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-325.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>人称代词主格宾格：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-326.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-326.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>常见疑问</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-327.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-327.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="物主代词"><a href="#物主代词" class="headerlink" title="物主代词"></a>物主代词</h3><p>my：形容词性物主代词，充当一个形容词的作用：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-328.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-328.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>mine：名词性物主代词，代表 my carrot：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-329.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-329.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>总表：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-330.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-330.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="反身代词"><a href="#反身代词" class="headerlink" title="反身代词"></a>反身代词</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-331.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-331.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="强调代词"><a href="#强调代词" class="headerlink" title="强调代词"></a>强调代词</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-332.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-332.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="相互代词"><a href="#相互代词" class="headerlink" title="相互代词"></a>相互代词</h3><p>We should help <strong>each other</strong>.</p><p>each other：两者之间<br>one another 三者之间&#x2F;三者以上之间</p><h3 id="指示代词"><a href="#指示代词" class="headerlink" title="指示代词"></a>指示代词</h3><p>this these that those：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-334.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-334.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="不定代词"><a href="#不定代词" class="headerlink" title="不定代词"></a>不定代词</h3><ol><li><p>many;much 许多很多<br>many + 可数名词的复数<br>much + 不可数名词</p></li><li><p>few little<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-335.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-335.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-336.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-336.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>some(肯定句) any(否定句)<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-337.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-337.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>each every 表示每，后接<strong>单数</strong><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-338.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-338.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-339.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-339.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>each 两个以上的每一个 every 3 个以上的每一个<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-340.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-340.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>either 两者中的每一个 neither 两者中的每一个<strong>都不</strong><br><strong>谓语用单数形式</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-341.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-341.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>both all 都 全部<br>做主语，谓语动词都要用复数<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-342.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-342.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>other &#x2F; the other &#x2F; another 另外的，另一个<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-343.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-343.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li><li><p>复合不定代词<br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-344.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-344.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-345.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-345.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p></li></ol><h3 id="疑问代词"><a href="#疑问代词" class="headerlink" title="疑问代词"></a>疑问代词</h3><p>什么、谁、什么时候…</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-346.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-346.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br> <img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-347.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-347.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="连接代词"><a href="#连接代词" class="headerlink" title="连接代词"></a>连接代词</h3><p>引导主语从句、宾语从句、表语从句</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-348.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-348.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>who+ever 表示 “任何、一切” 的意思，起强调作用：</p><p>The rabbit wants to eat whatever he likes.<br>兔子想吃他喜欢的任何东西</p><h3 id="关系代词-1"><a href="#关系代词-1" class="headerlink" title="关系代词"></a>关系代词</h3><p>关系代词专用于定语从句（补充说明名词，充当一个大形容词）</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-349.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-349.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h2><p>副词修饰<strong>动词</strong>(形容词)，起 <strong>状语</strong> 限定句子谓语动词状态的作用</p><h3 id="副词的用法"><a href="#副词的用法" class="headerlink" title="副词的用法"></a>副词的用法</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-350.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-350.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-351.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-351.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>副词修饰句子：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-352.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-352.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br>副词修饰的词性：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-353.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-353.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h2 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h2><p>a an the</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-354.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-354.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="不定冠词-a-an"><a href="#不定冠词-a-an" class="headerlink" title="不定冠词 a&#x2F;an"></a>不定冠词 a&#x2F;an</h3><p>看单词开头时候为 <strong>元音音素</strong> 例如：<br>a university &#x2F; an hour.</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-355.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-355.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="泛指用法"><a href="#泛指用法" class="headerlink" title="泛指用法"></a>泛指用法</h4><p>不定冠词最重要的用法是泛指某一个人或物。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-356.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-356.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>泛指某一类人的情况：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-357.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-357.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="表示数字-1"><a href="#表示数字-1" class="headerlink" title="表示数字 1"></a>表示数字 1</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-358.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-358.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="主谓一致"><a href="#主谓一致" class="headerlink" title="主谓一致"></a>主谓一致</h4><p>不定冠词还能影响主语的单复数，从而影响句意。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-359.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-359.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="固定表达"><a href="#固定表达" class="headerlink" title="固定表达"></a>固定表达</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-360.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-360.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="定冠词-the"><a href="#定冠词-the" class="headerlink" title="定冠词 the"></a>定冠词 the</h3><h4 id="有两种发音"><a href="#有两种发音" class="headerlink" title="有两种发音"></a>有两种发音</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-361.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-361.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="特指"><a href="#特指" class="headerlink" title="特指"></a>特指</h4><p>定冠词的主要用法就是特指，表示某个或某些特定的人或物，也就是，说话者和听话者都知道在讨论啥。</p><p>再次提到某个人或物体，即双方都清楚说的是谁或者什么，就要用定冠词 the。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-362.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-362.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-363.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-363.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>用于在 <strong>序数词</strong> 和 <strong>形容词的最高级</strong> 前。<strong>序数词</strong> 和 <strong>最高级</strong> 限定了范围，所以也是特指。</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-364.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-364.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="在独一无二的专有名词前"><a href="#在独一无二的专有名词前" class="headerlink" title="在独一无二的专有名词前"></a>在独一无二的专有名词前</h4><p>the sun &#x2F; <strong>the moon</strong> &#x2F; the earth &#x2F; the Great Fire Wall</p><h4 id="西洋古典乐器"><a href="#西洋古典乐器" class="headerlink" title="西洋古典乐器"></a>西洋古典乐器</h4><p>the 少数情况下表泛指：</p><p>西洋古典乐器、</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-365.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-365.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-366.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-366.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-367.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-367.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="表示一类人"><a href="#表示一类人" class="headerlink" title="表示一类人"></a>表示一类人</h4><p>在形容词前，the + 形容词，特指表示一类人：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-368.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-368.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-369.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-369.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>固定表达：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-370.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-370.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="零冠词"><a href="#零冠词" class="headerlink" title="零冠词"></a>零冠词</h3><p>零冠词是指 <strong>名词前不用冠词</strong> 的情况，主要作用是泛指：</p><h4 id="零冠词复数泛指"><a href="#零冠词复数泛指" class="headerlink" title="零冠词复数泛指"></a>零冠词复数泛指</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-371.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-371.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-372.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-372.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>不可数名词保持原形，也表示 <strong>零冠词复数泛指</strong>：</p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-373.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-373.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="泛指“概念”"><a href="#泛指“概念”" class="headerlink" title="泛指“概念”"></a>泛指“概念”</h4><p>这里的概念是脑中形成的观念，是一种 <strong>抽象意义</strong> 的表达，这种概念性的名词前多会使用零冠词：</p><p>学科、季节、星期、月份等… <strong>抽象概念</strong></p><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-374.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-374.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"><br><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-375.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-375.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h4 id="专有名词"><a href="#专有名词" class="headerlink" title="专有名词"></a>专有名词</h4><p>专有名词前一般都是零冠词：</p><p>Papa Rabbit ，Python , Hongkonger</p><h4 id="固定表达-1"><a href="#固定表达-1" class="headerlink" title="固定表达"></a>固定表达</h4><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-376.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-376.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><p>out of <strong>a</strong> question 不可能，表否定。<br>out of question 毫无疑问</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-377.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/English/English-From-Zero-Tutorial-Grammar-377.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英语零基础学习记录-Record-系列-——-语法-Grammar&quot;&gt;&lt;a href=&quot;#英语零基础学习记录-Record-系列-——-语法-Grammar&quot; class=&quot;headerlink&quot; title=&quot;英语零基础学习记录 Record 系列 —— 语法 </summary>
      
    
    
    
    <category term="English" scheme="https://www.whaleluo.top/categories/English/"/>
    
    
    <category term="English" scheme="https://www.whaleluo.top/tags/English/"/>
    
    <category term="Study" scheme="https://www.whaleluo.top/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>2024 春季高考小高考语文必背篇目</title>
    <link href="https://www.whaleluo.top/study/2024-spring-exam-chinese/"/>
    <id>https://www.whaleluo.top/study/2024-spring-exam-chinese/</id>
    <published>2023-11-02T11:13:45.000Z</published>
    <updated>2023-11-02T11:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024-春季高考小高考语文必背篇目"><a href="#2024-春季高考小高考语文必背篇目" class="headerlink" title="2024 春季高考小高考语文必背篇目"></a>2024 春季高考小高考语文必背篇目</h1><h2 id="Capital"><a href="#Capital" class="headerlink" title="Capital"></a>Capital</h2><ol><li>逍遥游（北冥有鱼……之二虫又如何）</li><li>劝学（学不可以已…..用心躁也）</li><li>师说</li><li>赤壁赋</li><li>氓</li><li>《归园田居》</li><li>蜀道难</li><li>登高</li><li>琵琶行</li><li>锦瑟</li><li>念奴娇 赤壁怀古</li><li>声声慢</li><li>永遇乐 京口北固亭怀古</li><li>园春 长沙</li><li>短歌行</li><li>梦游天</li><li>阿房宫赋</li><li>子路。。。</li><li>六国论</li></ol><h2 id="逍遥游-周庄-先秦"><a href="#逍遥游-周庄-先秦" class="headerlink" title="逍遥游 周庄 先秦"></a>逍遥游 周庄 先秦</h2><p>北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏。鹏之背，不知其几千里也；怒而飞，其翼若垂天之云。是鸟也，海运则将徙于南冥。南冥者，天池也。《齐谐》者，志怪者也。《谐》之言曰：“鹏之徙于南冥也，水击三千里，抟扶摇而上者九万里，去以六月息者也。”野马也，尘埃也，生物之以息相吹也。天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。且夫水之积也不厚，则其负大舟也无力。覆杯水于坳堂之上，则芥为之舟；置杯焉则胶，水浅而舟大也。风之积也不厚，则其负大翼也无力。故九万里，则风斯在下矣，而后乃今培风；背负青天，而莫之夭阏者，而后乃今将图南。蜩与学鸠笑之曰：“我决起而飞，抢榆枋而止，时则不至，而控于地而已矣，奚以之九万里而南为？”适莽苍者，三餐而反，腹犹果然；适百里者，宿舂粮；适千里者，三月聚粮。之二虫又何知！</p><h2 id="劝学-荀子-先秦···"><a href="#劝学-荀子-先秦···" class="headerlink" title="劝学 荀子 先秦···"></a>劝学 荀子 先秦···</h2><p>君子曰：学不可以已。</p><p>青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木直中绳，輮以为轮，其曲中规。虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。</p><p>故不登高山，不知天之高也；不临深溪，不知地之厚也；不闻先王之遗言，不知学问之大也。干、越、夷、貉之子，生而同声，长而异俗，教使之然也。诗曰：“嗟尔君子，无恒安息。靖共尔位，好是正直。神之听之，介尔景福。”神莫大于化道，福莫长于无祸。</p><p>吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。(君子生 通：性)</p><p>南方有鸟焉，名曰蒙鸠，以羽为巢，而编之以发，系之苇苕，风至苕折，卵破子死。巢非不完也，所系者然也。西方有木焉，名曰射干，茎长四寸，生于高山之上，而临百仞之渊，木茎非能长也，所立者然也。蓬生麻中，不扶而直；白沙在涅，与之俱黑。兰槐之根是为芷，其渐之滫，君子不近，庶人不服。其质非不美也，所渐者然也。故君子居必择乡，游必就士，所以防邪辟而近中正也。</p><p>物类之起，必有所始。荣辱之来，必象其德。肉腐出虫，鱼枯生蠹。怠慢忘身，祸灾乃作。强自取柱，柔自取束。邪秽在身，怨之所构。施薪若一，火就燥也，平地若一，水就湿也。草木畴生，禽兽群焉，物各从其类也。是故质的张，而弓矢至焉；林木茂，而斧斤至焉；树成荫，而众鸟息焉。醯酸，而蜹聚焉。故言有招祸也，行有招辱也，君子慎其所立乎！</p><p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。(江海 一作：江河)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024-春季高考小高考语文必背篇目&quot;&gt;&lt;a href=&quot;#2024-春季高考小高考语文必背篇目&quot; class=&quot;headerlink&quot; title=&quot;2024 春季高考小高考语文必背篇目&quot;&gt;&lt;/a&gt;2024 春季高考小高考语文必背篇目&lt;/h1&gt;&lt;h2 id=&quot;C</summary>
      
    
    
    
    <category term="Study" scheme="https://www.whaleluo.top/categories/Study/"/>
    
    
    <category term="Chinese" scheme="https://www.whaleluo.top/tags/Chinese/"/>
    
  </entry>
  
  <entry>
    <title>英语零基础学习记录 Record 系列 —— 如何记忆单词 How to memorize words</title>
    <link href="https://www.whaleluo.top/english/english-from-zero-tutorial-memorize-words/"/>
    <id>https://www.whaleluo.top/english/english-from-zero-tutorial-memorize-words/</id>
    <published>2023-10-29T13:10:04.000Z</published>
    <updated>2023-10-29T13:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语零基础学习记录-Record-系列-——-如何记忆单词-How-to-memorize-words"><a href="#英语零基础学习记录-Record-系列-——-如何记忆单词-How-to-memorize-words" class="headerlink" title="英语零基础学习记录 Record 系列 —— 如何记忆单词 How to memorize words"></a>英语零基础学习记录 Record 系列 —— 如何记忆单词 How to memorize words</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日常开发中经常碰到很多纯英文没有翻译的技术文档，使用 Google Translation 又比较 Low，所以需要大量的背单词。</p><p>在中国的传统应试教育下，笔者从小学到高中都是死记硬背，即一个个字母的拼写单词，早读也是一个个字母的拼读，这种方式效率低下，而且忘了又记，记了又忘。后面笔者干脆摆烂不记了，英语考试时看阅读题还看着看着睡着了。</p><ol><li>学会音标，会根据单词表的音标正确的把单词拼出来。</li><li>掌握 <strong>词根词缀构词法</strong>，使用其背单词。</li><li>大量的背单词，推荐 APP：墨墨背单词，用一个笔记本写出单词的词根词缀、变形、联想记忆等</li></ol><h2 id="Reference-引用"><a href="#Reference-引用" class="headerlink" title="Reference 引用"></a>Reference 引用</h2><ol><li>英语兔 高考 3500 词汇：<a href="https://www.bilibili.com/video/BV1qz4y1871a/?spm_id_from=333.337.search-card.all.click&vd_source=8b588c19ea4cd636da362bae86b1564a">全网最好的”高考英语3500单词”合集 (附下载链接)</a></li><li>英语兔 英语构词法 背单词加速器：<a href="https://www.bilibili.com/video/BV1r5411w7TY/">英语构词法 (背单词必备)</a></li><li>求助，怎样高效背单词？ - 注入爱的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/460268568?zpf=1700089435566256128">https://zhuanlan.zhihu.com/p/460268568?zpf=1700089435566256128</a></li><li>BiliBili 八哥 词根词缀：<a href="https://www.bilibili.com/video/BV1Hi4y1Q7XN/">&lt;词根词缀&gt; 12大前缀+3大词性后缀_哔哩哔哩_bilibili</a></li></ol><h2 id="音标工具"><a href="#音标工具" class="headerlink" title="音标工具"></a>音标工具</h2><h1 id="英语词根词缀"><a href="#英语词根词缀" class="headerlink" title="英语词根词缀"></a>英语词根词缀</h1><blockquote><p>源于英语的派生构词法</p></blockquote><p><strong>un</strong> | <strong>believ</strong> | <strong>able</strong> adj. 难以置信的</p><ul><li>前缀 &#x3D;&#x3D;&gt; 词向 （词语的方向 反义、否定等） <strong>un</strong> 否定</li><li>词根 &#x3D;&#x3D;&gt; 词意（词语的意思）<strong>believe</strong> 相信</li><li>后缀 &#x3D;&#x3D;&gt; 词性 （词语的性质 形容词、副词、名词等）<strong>able</strong> 形容词后缀</li></ul><p>欧路词典词根词缀查询 MDX 词典：<a href="https://www.eudic.net/v4/en/home/dictionaryresource">扩充词库下载 | 欧路软件官网</a></p><h2 id="前缀-（词向）"><a href="#前缀-（词向）" class="headerlink" title="前缀 （词向）"></a>前缀 （词向）</h2><ol><li><p>外&#x2F;出：<code>e/ex/ef</code> &#x3D;&gt;<br><strong>ex</strong>port 出口</p></li><li><p>内&#x2F;进：<code>in/im</code> &#x3D;&gt;<br><strong>in</strong>ject 注射 <strong>im</strong>port 进口</p></li><li><p>前</p><ol><li>动态 – 向前 ：<code>pro</code> &#x3D;&gt; <strong>pro</strong>gress 进步 <strong>pro</strong>mise v. 保证</li><li>静态 – 在前&#x2F;预先 ：<code>pre</code> &#x3D;&gt; <strong>pre</strong>pare 准备 <strong>pre</strong>mise v.&#x2F;n. 作..前提 <strong>pre</strong>sent 礼物</li></ol></li><li><p>回&#x2F;重新&#x2F;再次&#x2F;反向：<code>re</code> &#x3D;&gt;<br><strong>re</strong>turn 返回 <strong>re</strong>duce 减少 <strong>re</strong>ply 回复</p></li><li><p>聚集 (一起&#x2F;共同)：<code>co/con/com/col</code> &#x3D;&gt;<br><strong>con</strong>nect 连接 <strong>col</strong>lect 收集 <strong>con</strong>tact 联系</p></li><li><p>分散 (分开)：<code>di/dis/dif</code> &#x3D;&gt;<br><strong>dis</strong>tract 分心 <strong>di</strong>vide v. 使分开 <strong>dis</strong>sident 异意<br>分开 <code>se</code> &#x3D;&gt; <strong>se</strong>parate 分开</p></li><li><p>上&#x2F;超过：<code>super/over/sur</code> &#x3D;&gt;<br><strong>sur</strong>·real·ism 超现实主义 <strong>sur</strong>pass 超过 <strong>sur</strong>face 表面 <strong>sur</strong>prise 惊奇 <strong>sur</strong>vey 调查</p></li><li><p>下&#x2F;不足：<code>under/de/sub/sup</code> &#x3D;&gt;<br><strong>de</strong>crease 下降 <strong>de</strong>press v. 使沮丧 <strong>de</strong>tect v. 察觉 <strong>sub</strong>way 地铁 <strong>sup</strong>pose 认为 <strong>sup</strong>post 支持</p></li><li><p>转移&#x2F;转变：<code>trans</code> &#x3D;&gt;<br><strong>trans</strong>fer 转移、转账、换乘 <strong>trans</strong>late 翻译</p></li><li><p>相互之间：<code>inter</code> &#x3D;&gt;<br><strong>inter</strong>net 互联网 <strong>inter</strong>view 采访 <strong>inter</strong>est n. 兴趣</p></li><li><p><code>a+ 双写辅音字母</code>&#x3D;强调&#x2F;无意义 &#x3D;&gt;<br><strong>acc</strong>ompany v. 伴同 <strong>acc</strong>ord n. 一致</p></li><li><p>否定前缀：<code>un/in/im/dis/ab/il</code></p></li><li><p>表示数量：<code>poly/multi</code> - 多</p></li><li><p>反对相反：<code>anti/op</code><br><strong>op</strong>pose v. 反对 <strong>op</strong>posite adj. 方面 <strong>anti</strong>-censorship 反审查</p></li></ol><hr><ol><li>ab,ac,ad,af,ag,al,an,ap,ar,as,at 来自拉丁介词 ad, 表示“朝、向、去，或弱化为强调”。</li><li>anti 反对，相反 <strong>anti</strong>-censorship 反审查</li><li>co&#x2F;col&#x2F;com 一起</li><li>de 否定，除去，向下</li><li>dis 不，除去，分开</li><li>ex 外，前任</li><li>fore 前，先，预先</li><li>in&#x2F;im 不，向里</li><li>inter 在…之间</li><li>mis 错</li><li>out 超过，外</li><li>over 过度</li><li>post 后</li><li><strong>数字类</strong> mono-1 &#x2F; bi、di-2 &#x2F; tri-3 &#x2F; hemi、semi - 半 &#x2F; Poly- 多 &#x2F; multi- 多</li></ol><h2 id="后缀（词性）"><a href="#后缀（词性）" class="headerlink" title="后缀（词性）"></a>后缀（词性）</h2><h3 id="V-动词后缀"><a href="#V-动词后缀" class="headerlink" title="V.动词后缀"></a>V.动词后缀</h3><ol><li><p><code>-ate</code> 表动词，” 做，造成 “<br>cre<strong>ate</strong> v. 创造 separ<strong>ate</strong> v. 分开</p></li><li><p><code>-ise/-ize</code> 动词后缀，一般<strong>缀于形容词后</strong>。-ise 是英式英语，-ize 是美式英语<br>pract<strong>ise</strong> v. 练习 surpr<strong>ise</strong> v. 使惊奇 modern<strong>ize</strong> v. 现代化 exerc<strong>ise</strong> v. 锻炼 advert<strong>ise</strong> v. 宣传 industial<strong>ize</strong> v. 使工业化<br>real<strong>ise</strong> v. 实现</p></li><li><p><code>-fy/-ify</code><br>beaut<strong>ify</strong> v. 美化 un<strong>ify</strong> v. 统一 magn<strong>ify</strong> v. 放大 夸大 not<strong>ify</strong> v. 通知 sign<strong>ify</strong> v. 表示 satis<strong>fy</strong> v. 使满意的</p></li><li><p><code>-ish</code><br>abol<strong>ish</strong> v. 废止、废除 nurse -&gt; nur<strong>ish</strong> v. 培养</p></li></ol><h3 id="Adj-形容词后缀"><a href="#Adj-形容词后缀" class="headerlink" title="Adj. 形容词后缀"></a>Adj. 形容词后缀</h3><ul><li><p>名词转形容词：n. &#x3D;&gt; adj. <code>-ed(过去分词)/-ful(充满)/-ish(类似)/-ly(似的)/-y/-al[kl]/-ial[ʃl]/-ic/-ous[ə]</code></p><ol><li><p><code>-ed</code> 过去分词做形容词 (表已经完成的状态)<br>point<strong>ed</strong> adj. 语言尖锐的 satis<strong>fy</strong> v.使满意的 &#x3D;&gt; satisfi<strong>ed</strong> adj. 感到满意的<br>advance n. 发展 -&gt; advanc<strong>ed</strong> adj. 高级的 marry v. 结婚 &#x3D;&gt; marri<strong>ed</strong> adj. 已婚</p></li><li><p><code>-ful</code> (充满)<br>use<strong>ful</strong> adj. 有用的 success<strong>ful</strong> adj. 成功的</p></li><li><p><code>-al[kl]/-ial[ʃl]</code><br>pract<strong>ice</strong> n. 练习、实习 &#x3D;&gt; practic<strong>al</strong> adj. 实际的<br>history n. 历史 &#x3D;&gt; historic<strong>al</strong> adj. 历史的 person n. 人 &#x3D;&gt; person<strong>al</strong> adj. 个人的<br>influence n. 影响 &#x3D;&gt; influent<strong>ial</strong> adj. 有影响的<br>race n. 种族 &#x3D;&gt; rac<strong>ial</strong> adj. 种族的 spec<strong>ial</strong> adj. 特别的<br>nation n. 国家 &#x3D;&gt; nation<strong>al</strong> adj. 国际的</p></li><li><p><code>-ous[ə]</code><br>humor n. 幽默 &#x3D;&gt; humor<strong>ous</strong> adj. 幽默的<br>nerve n. 神经 &#x3D;&gt; nerv<strong>ous</strong> adj. 紧张的<br>fame n. 名望 &#x3D;&gt; fam<strong>ous</strong> adj. 著名的<br>victor n. 胜利者 &#x3D;&gt; victori<strong>ous</strong> adj. 胜利的<br>obvi<strong>ous</strong> adj. 明显的</p></li><li><p><code>-less</code> 表无、没有<br>harm n. 伤害 &#x3D;&gt; harm<strong>less</strong> adj. 无害的<br>help<strong>less</strong> adj. 无用的</p></li><li><p><code>-ic</code><br> fantast n. 幻想家 &#x3D;&gt; fantast<strong>ic</strong> adj. 极好的<br> drama<strong>tic</strong> adj. 戏剧性的<br> electr<strong>ic</strong> adj. 电的 electron<strong>ic</strong> adj. 电子的</p></li></ol></li><li><p>动词转形容词：v. &#x3D;&gt; adj. <code>-ble/-able/-ive</code> 可、能够</p><ol><li><p><code>-ble/-able</code><br>terror n. 恐怖 &#x3D;&gt; terri<strong>ble</strong> adj. 可怕的<br>possi<strong>ble</strong> adj. 可能的<br>drinkable adj. 可饮用的</p></li><li><p><code>-ive</code><br>expend v. 花费 &#x3D;&gt; expens<strong>ive</strong> adj. 昂贵的<br>attract v. 吸引 &#x3D;&gt; attract<strong>ive</strong> adj. 吸引人的<br>relate v. 有关 &#x3D;&gt; relat<strong>ive</strong> adj. 相对的&#x2F;亲戚<br>sense v. 意味、意识到 &#x3D;&gt; sensit<strong>ive</strong> adj. 敏感的</p></li></ol></li><li><p>表示 <code>….的</code> <code>ent/ful/lve/ible/able/ant/ic/ry</code></p><ol><li><code>-ent</code><br>convention n. 大会 &#x3D;&gt; conveni<strong>ent</strong> adj. 方便的<br>appear v. 出现 &#x3D;&gt; appear<strong>ent</strong> adj. 明显的</li><li><code>-ant</code><br>import nv. 进口 &#x3D;&gt; import<strong>ant</strong> adj. 重要的<br>sign n. 标志 &#x3D;&gt; sign<strong>ify</strong> v. 表示..的意思 &#x3D;&gt; signific<strong>ant</strong> adj. 重要的</li></ol></li></ul><h3 id="Adv-副词后缀"><a href="#Adv-副词后缀" class="headerlink" title="Adv. 副词后缀"></a>Adv. 副词后缀</h3><p>形容词转副词：adj. &#x3D;&gt; adv. 通常加 <code>ly</code><br>结尾 ic + ally dramat<strong>ic</strong> adj. 戏剧性的 &#x3D;&gt; dramatic<strong>ally</strong><br>辅音 + y ，去 y 为 i +ly happy adj. 高兴的 &#x3D;&gt; happi<strong>ly</strong></p><h3 id="N-名词后缀"><a href="#N-名词后缀" class="headerlink" title="N. 名词后缀"></a>N. 名词后缀</h3><ul><li><p>形容词转名词：adj. &#x3D;&gt; n. <code>-ty/-ity/-lty/-ness</code></p><ol><li><p><code>-ity/-bility</code> 抽象名词后缀<br>electr<strong>ic</strong> adj.电动的 &#x3D;&gt; electric<strong>ity</strong>. n. 电力<br>national adj. 国际的 &#x3D;&gt; national<strong>ity</strong> n. 国籍<br>real adj. 真实的 &#x3D;&gt; real<strong>ity</strong> n. 现实 &#x3D;&gt; real<strong>ise</strong> v. 实现<br>possi<strong>bility</strong> n. 可能性 visi<strong>bility</strong> n. 能见度<br>honor n. 信用 &#x3D;&gt; honest adj. 诚实的 &#x3D;&gt; hones<strong>ty</strong> n. 诚实</p></li><li><p><code>ness</code><br>happi<strong>ness</strong> n. 幸福 useful<strong>ness</strong> n. 有用 careless<strong>ness</strong> n. 粗心 busi<strong>ness</strong> n. 生意 商务 liveli<strong>ness</strong> n. 活力</p></li></ol></li><li><p>动词转名词：v. &#x3D;&gt; n. <code>-sion/-tion/-ation/-ment</code></p><ul><li>satis<strong>fy</strong> v.使满意的 &#x3D;&gt; satisfac<strong>tion</strong> n. 满意 &#x3D;&gt; satisfi<strong>ed</strong> adj. 感到满意的</li><li>decide v. 决定 &#x3D;&gt; deci<strong>sion</strong> n. 决心</li><li>advert<strong>ise</strong> v. 宣传 &#x3D;&gt; advertise<strong>meant</strong> n. 广告</li></ul></li></ul><p>lon&#x2F;tion&#x2F;ation&#x2F;ness&#x2F;ity&#x2F;ality&#x2F;meant&#x2F; <strong>ence</strong> 表状态 &#x2F;ance&#x2F;ism&#x2F; <strong>-ice</strong> (行为状态)</p><ol><li><p><code>-ice</code> 表行为状态<br>pract<strong>ise</strong> v. 练习 &#x3D;&gt; pract<strong>ice</strong> n. 实践<br>serve v. 服务 &#x3D;&gt; serv<strong>ice</strong> n. 服务</p></li><li><p><code>-ence</code> 表状态<br>audio adj. 听觉的 &#x3D;&gt; audi<strong>ence</strong> n. 听众<br>expert n. 专家 &#x3D;&gt; experi<strong>ence</strong> n. 经验<br>influ<strong>ence</strong> n.&#x2F;v. 影响</p></li><li><p><code>-ure[/ər/]</code><br>advent n. 来到 &#x3D;&gt; advent<strong>ure</strong> n. 冒险<br>please v. 请 &#x3D;&gt; pleas<strong>ure</strong> n. 快乐<br>press<strong>ure</strong> n. 压力 &#x3D; stress<br>cult<strong>ure</strong> n. 文化 nat<strong>ure</strong> n. 自然 treas<strong>ure</strong> n. 财富<br>pict<strong>ure</strong> n. 图画 sec<strong>ure</strong> n. 安全 temperat<strong>ure</strong> n. 温度 signit<strong>ure</strong> n. 签名<br>fut<strong>ure</strong> n. 未来 feat<strong>ure</strong> n. 特点</p></li></ol><hr><p>更多后缀：</p><ol><li>able（形 能…的 具有…性质的</li><li>al（形 具..性质的，属于..的 （名 抽象名词，人</li><li>ate（动 做，造成 （名 人</li><li>ed（+ 形名词后 有…的 （+ 动后 已…的，被…的</li><li>en（动 使变成</li><li>ence（名 抽象名词</li><li>ful（形 富有…，具有…性质的</li><li>fy（动 使变成…</li><li>ic（形 …的</li><li>ion（名 抽象名词</li><li>ism（名 …主义，流派，特性 race n. 种族 &#x3D;&gt; rac<strong>ism</strong> 种族主义 heroism n. 英雄主义 capital n.首都 &#x3D;&gt; capitalims n. 资本主义</li><li>ist（名 人，…家 ….主义 python<strong>ist</strong>a n. python 爱好者</li><li>ive (形 有…性质的&#x2F;作用的</li><li>ize(动 …化</li><li>less(形 无…的</li><li>meant(名 行为的过程或结果，物</li><li>ness(名 抽象名词</li><li>ship(名 情况，身份，资格</li><li>ward(形&#x2F;副 向…的，朝…</li><li>y(形 多…的，有…的</li><li>-age 语言 language n. 语言</li><li>-ent 表人 president n. 总统</li><li>-um 表场所 museum n. 博物馆 medial adj. 中间的 media n. 媒体 medium n. 媒介 social medium 社交软件</li></ol><h2 id="词根（词意）"><a href="#词根（词意）" class="headerlink" title="词根（词意）"></a>词根（词意）</h2><ol><li>ced&#x2F;cess&#x3D;go 行走</li><li>cid&#x2F;cis&#x3D;cut,kill 切，杀</li><li>claim&#x3D;cry,shout 喊叫</li><li>clud&#x3D;close 关闭</li><li>duc&#x2F;duct&#x3D;lead 引导</li><li>fer&#x3D;bring,carry 带，拿</li><li>ject&#x3D;throw 投掷</li><li>migr&#x3D;move 迁移</li><li>pend&#x2F;pens&#x3D;hang 悬挂 pay 花费</li><li>pos&#x3D;put 放置</li><li>rupt&#x3D;break 破</li><li>spect&#x3D;look 看</li><li>tract&#x3D;draw 拉，拽</li><li>vert&#x2F;vers&#x3D;turn 转</li><li>vis&#x2F;vid&#x3D;see 看</li><li>viv&#x3D;live 活</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英语零基础学习记录-Record-系列-——-如何记忆单词-How-to-memorize-words&quot;&gt;&lt;a href=&quot;#英语零基础学习记录-Record-系列-——-如何记忆单词-How-to-memorize-words&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="English" scheme="https://www.whaleluo.top/categories/English/"/>
    
    
    <category term="English" scheme="https://www.whaleluo.top/tags/English/"/>
    
    <category term="Study" scheme="https://www.whaleluo.top/tags/Study/"/>
    
    <category term="GK" scheme="https://www.whaleluo.top/tags/GK/"/>
    
  </entry>
  
  <entry>
    <title>Use GiffGaff SIM card in China</title>
    <link href="https://www.whaleluo.top/giffgaff-britain-sim-card-in-china/"/>
    <id>https://www.whaleluo.top/giffgaff-britain-sim-card-in-china/</id>
    <published>2023-10-26T14:00:34.000Z</published>
    <updated>2023-10-26T14:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Use-GiffGaff-SIM-card-in-China"><a href="#Use-GiffGaff-SIM-card-in-China" class="headerlink" title="Use GiffGaff SIM card in China"></a>Use GiffGaff SIM card in China</h1><h2 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h2><p>giffgaff 是来自英国的一家新锐低成本运营商，隶属于英国三大运营商 O2 旗下，2009 年创立，采用了无营业网点，无热线客服，灵活套餐的特色服务来降低用户成本，特别适合短期游客及英国留学生。它支持全球漫游，在中国也可收发短信，接听电话和上网。</p><p>为什么选择英国 giffgaff SIM 卡？</p><ul><li>性价比高：0 月租，免费接收短信，充值一次，接码可以用 20 年以上（仅需半年保号一次），可能是国内性价比最高的接码实体卡！</li><li>安全：实体卡无须担心因号码被风控，还可以换 2 次号码，比 Google Voice 整天被风控来的好用</li><li>漫游：支持中国大陆激活及漫游</li><li>稳定性高：无限有效期，每半年发一条短信即可保号</li><li>兼容性好：支持绝大部分海外 APP&#x2F;应用&#x2F;银行，例如 TikTok&#x2F;Twitter&#x2F;Facebook&#x2F;Instagram&#x2F;LINE&#x2F;WhatsApp&#x2F;Telegram 等等，ChatGPT3.5&#x2F;4.0 ，苹果 ID ，Amazon ，PayPal ，花旗，渣打，巴克莱，德意志银行，瑞士银行，还有一些新出现的虚拟信用卡等等</li></ul><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：官网申请到的空白卡里有话费吗？<br>A：没有，收到卡后按照教程自助激活。</p><p>Q：充值送 5 磅话费的福利一直有吗？<br>A：直接官网在线申请的，目前此项福利已经取消。可以通过朋友邀请链接申请才有，或者自行购买。不激活不充值是没有的哦，超时充值也有可能没有错过福利哦。</p><p>Q：月租多少钱？<br>A：若和我一样，主要是用来接码，建议选择 0 月租的 Pay As You Go 套餐，充多少用多少，TB 或 JD 上卖的都是针对游客的短期月租套餐卡，不合适长期使用。如果您需要前往海外，只需到官网上调整您的套餐即可。</p><p>Q：如何保号，成本多少？<br>A：这种 0 月租的卡一般都有保号要求，<strong>giffgaff 要求每 180 天话费余额需要变动一次，否则号码会被回收</strong>。在国内，最低成本就是<strong>发出一条短信，发送对象是国内外手机号码均可以，每条 0.3 磅，因此一年消费 0.6 磅</strong>，仅仅不到 6 元人民币。每次话费余额变化后，例如充值，消费，保号周期重新开始计算。首次充值，也属于余额变动，因此在 180 天内完成保号即可。</p><p>Q：收短信免费吗，其他费用如何？<br>A：<strong>收短信免费，打电话&#x2F;接电话&#x3D;1 英镑&#x2F;分钟，发短信&#x3D;0.3 英镑&#x2F;条，上网&#x3D;0.2 英镑&#x2F;MB</strong></p><p>Q：首次自助充值激活需要准备什么？<br>A：请准备一张 VISA 或万事达的外币实体信用卡或借记卡，国内发行的也可以，单银联、JCB 、AE 等信用卡以及任何虚拟信用卡均无法使用哦，充值最低 10 英镑起，请确保您的卡额度足够。特别提醒，首次充值不支持 PayPal ，以后续费可以使用。</p><p>Q：插卡后没信号<br>A：由于海外运营商与国内运营商之间的漫游对接有很多环节和验证过程，耐心等待 1-5 分钟， 就会出现。</p><p>Q：我的卡号是多少<br>A：首次插卡，会收到一条激活成功的提示短信，内有您的手机号码，后面也可以登录官网查询。</p><p>Q：手机号码正确，无法登录官网或软件提示号码格式不对<br>A：英国国际区号 (United Kingdom) 是 +44 ，有时候也用 0044 表示，输入时候要选择正确区号。</p><p>Q：为什么我的卡无法拨打电话，无法发短信？<br>A：可以在手机设置里取消 <strong>运营商自动选择</strong> ，改为手动选择到中国移动，并重启手机后再尝试</p><p>Q：支持哪些手机？信号如何？<br>A：支持目前所有主流手机，gg 卡是 FDD-LTE 制式，除了极少数电信 CDMA 3G 手机不支持，其他均无问题。它在国内默认通过中国移动或中国联通进行漫游，还支持 5G ，通话质量，数据质量，覆盖范围非常不错。</p><p>Q：苹果手机使用上有什么注意事项？<br>A：不建议打开 iMessage&#x2F;Facetime 功能，因为如果点击确认，苹果后台会发出一条短信，因此会被扣费 0.3 磅。由于国内短信价格很低，很多人都是套餐里送的，所以不知道有这么一个短信发送的过程。</p><p>giffgaff 常用功能</p><p>首次充值激活： <a href="https://www.giffgaff.com/activate">https://www.giffgaff.com/activate</a><br>登录个人账户&#x2F;重置密码： <a href="https://www.giffgaff.com/auth/login">https://www.giffgaff.com/auth/login</a><br>查询话费余额&#x2F;SIM 号码： <a href="https://www.giffgaff.com/dashboard">https://www.giffgaff.com/dashboard</a><br>续费充值： <a href="https://www.giffgaff.com/top-up">https://www.giffgaff.com/top-up</a><br>话费账单查询： <a href="https://www.giffgaff.com/profile/usage-statement">https://www.giffgaff.com/profile/usage-statement</a><br>个人资料修改： <a href="https://www.giffgaff.com/profile/details">https://www.giffgaff.com/profile/details</a><br>申请换号： <a href="https://www.giffgaff.com/profile/details/getnumber">https://www.giffgaff.com/profile/details/getnumber</a> （一般在被 app 封号后建议用，有 2 次额度）</p><p>查询 SIM 号码：发送 [ NUMBER ] 到 43430<br>查询话费余额：直接拨打 [<em>100#]<br>关闭语音信箱：直接拨打 [##002#]<br>打开语音信箱：直接拨打 [*<em>61</em>443*10</em>20#]</p><p>第 1 条附言  ·  48 天前</p><p>接着讲讲我在使用 giffgaff （ gg ）卡注册各类 app 遇到的坑</p><p>Q：为什么收不 Telegram 电报的验证码？<br>A：请使用 Telegram 移动端申请注册，网页端及电脑客户端是不行的。如果还不行，大概率是因为你使用的是国内阉割版的安卓手机，TG 的安卓版需要手机系统内置谷歌服务框架 GMS 软件包才能收到验证码，建议更换苹果手机，或者带 GMS 服务的安卓手机，具体请百度谷歌查询。</p><p>Q：为什么收不到 Line 的验证码？<br>A：Line 近期已经加强了防欺诈能力，无论你用什么运营商的海外号码申请注册，凡是通过机场&#x2F;VPN 这种共享 IP 来使用，大概率会被识别出来，看似没有任何报错，就是收不到验证码。解决方案是开启 gg 卡自带的漫游上网来完成所有注册流程，同时建议暂时关闭其他 App 的网络访问，避免消耗流量。</p><p>Q：为什么收不 Tik Tok 国际版抖音的验证码？<br>A：确保您的卡和 App 在同一部手机，其次确保手机里就一张 gg 卡，国内卡不能同时存在，最后建议更换 VPN 或机场线路，比如切换到美国&#x2F;日本&#x2F;新加坡&#x2F;英国等地，港台线路容易受污染。</p><p>第 2 条附言  ·  14 天前</p><p>给各位 giffgaff 用户带个喜讯，手机支持 eSIM 的话，giffgaff 在 2023&#x2F;10&#x2F;11 正式官宣开放实体卡转 eSIM 啦</p><p>官方介绍<br><a href="https://www.giffgaff.com/blog/giffgaff-news/how-to-get-a-giffgaff-esim/">https://www.giffgaff.com/blog/giffgaff-news/how-to-get-a-giffgaff-esim/</a></p><p>省流 TIPS：<br>① 仅支持实体卡转 eSIM ，所以初次用户还是要弄张 giffgaff 的卡<br>② 需要有 eSIM 功能的手机，卡槽里有 giffgaff 实体卡，通过 giffgaff 官方 app 操作，所以没有实体卡槽的美版苹果，貌似不行<br>③国内漫游环境下，三星、谷歌 Pixel ，苹果手机均可以，转移到 eSIM 后，有人几十分钟就收到信号，也有人几小时，官方承诺不超过 24 小时</p><p>第 3 条附言  ·  7 天前</p><p>做了一个简单的公众号：GEEK World ，分享在国内使用 gfiigaff 的各种经验与心得，争取未来保持周更的节奏，欢迎大家关注！</p><h3 id="Useful"><a href="#Useful" class="headerlink" title="Useful"></a>Useful</h3><p>官方免费服务功能清单：<br>查询自己号码：发送短信「<strong>NUMBER</strong>」到 43430<br>查询话费余额：直接拨打「***100#<strong>」<br>关闭语音信箱：直接拨打 「</strong>##002#**」<br>打开语音信箱：直接拨打「*<em>*<em>61</em>443*10</em>20#**」<br>默认 PIN：5555 or 6666</p><p>官网常用功能清单：<br>新卡激活：<a href="https://www.giffgaff.com/activate">https://www.giffgaff.com/activate</a><br>登录个人账户&#x2F;重置密码：<a href="https://www.giffgaff.com/auth/login">https://www.giffgaff.com/auth/login</a><br>查询话费余额&#x2F;SIM 号码：<a href="https://www.giffgaff.com/dashboard">https://www.giffgaff.com/dashboard</a><br>续费充值：<a href="https://www.giffgaff.com/top-up">https://www.giffgaff.com/top-up</a><br>账单查询：<a href="https://www.giffgaff.com/profile/usage-statement">https://www.giffgaff.com/profile/usage-statement</a><br>资料修改：<a href="https://www.giffgaff.com/profile/details">https://www.giffgaff.com/profile/details</a><br>PUK 码申请：<a href="https://www.giffgaff.com/help/articles/i-blocked-my-sim-what-can-i-do">https://www.giffgaff.com/help/articles/i-blocked-my-sim-what-can-i-do</a><br>申请换号：<a href="https://www.giffgaff.com/profile/details/getnumber">https://www.giffgaff.com/profile/details/getnumber</a> （一般在被 app 封号后建议用，有 2 次额度）<br>换 SIM 卡：<a href="https://www.giffgaff.com/support/lost/sim%EF%BC%88%E4%BF%9D%E7%95%99%E8%80%81%E5%8F%B7%E4%B8%8E%E8%AF%9D%E8%B4%B9%EF%BC%89">https://www.giffgaff.com/support/lost/sim（保留老号与话费）</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li>TG Channel：<a href="https://t.me/Giffgaff_China">Telegram: Contact @Giffgaff_China</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Use-GiffGaff-SIM-card-in-China&quot;&gt;&lt;a href=&quot;#Use-GiffGaff-SIM-card-in-China&quot; class=&quot;headerlink&quot; title=&quot;Use GiffGaff SIM card in China&quot;&gt;</summary>
      
    
    
    
    <category term="GiffGaff" scheme="https://www.whaleluo.top/categories/GiffGaff/"/>
    
    
    <category term="GiffGaff" scheme="https://www.whaleluo.top/tags/GiffGaff/"/>
    
    <category term="SIM" scheme="https://www.whaleluo.top/tags/SIM/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 项目脚手架搭建和运行指北</title>
    <link href="https://www.whaleluo.top/javascript/vue-project-start-tutorial/"/>
    <id>https://www.whaleluo.top/javascript/vue-project-start-tutorial/</id>
    <published>2023-10-11T08:20:06.000Z</published>
    <updated>2023-10-11T08:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-项目脚手架搭建和运行指北"><a href="#Vue3-项目脚手架搭建和运行指北" class="headerlink" title="Vue3 项目脚手架搭建和运行指北"></a>Vue3 项目脚手架搭建和运行指北</h1><p>本指南带你从 0 到 有 的编写一个 Vue3 项目的脚手架，解剖完整的 Vue3 项目结构和各种配置文件，并手把手教你配置 VSCode 达到最高效率，运用到以下技术：</p><ul><li>NodeJS</li><li>TypeScript – JS 的超集，添加友好的类型提示和更多功能</li><li>Vscode – 地表最强写 Vue3 IDE</li><li>pnpm – 比 npm 更好的包管理工具</li><li><a href="https://cn.vitejs.dev/guide/">Vite <code>/vit/</code></a> – Vue3 构建、打包工具，比 webpack 更好</li><li>Axios – Promise 异步请求库</li><li>Pinia – vue3 全局状态管理</li><li>ElementUI – Vue3 UI 组件库</li><li>Vueuse <a href="https://github.com/vueuse/vueuse">GitHub - vueuse&#x2F;vueuse: Collection of essential Vue Composition Utilities for Vue 2 and 3</a> – Vue3 composition API utils Vue3 组合式 API 工具集</li><li>Babel – 编译适应多个平台的 JS <a href="https://vue3.chengpeiquan.com/guide.html#babel-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE">Babel 的使用</a></li></ul><h2 id="Install-NodeJS、TypeScript、pnpm、vite"><a href="#Install-NodeJS、TypeScript、pnpm、vite" class="headerlink" title="Install NodeJS、TypeScript、pnpm、vite"></a>Install NodeJS、TypeScript、pnpm、vite</h2><p>安装 NodeJS(默认)，安装 TypeScript，换成 pnpm 包管理工具，安装 Vite 打包工具。</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将 ts 添加到 dev dependencies</span>npm install -D typescript ts-node<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装 pnpm 包管理工具</span>npm install -g pnpm</code></pre><h2 id="Vscode-IDE"><a href="#Vscode-IDE" class="headerlink" title="Vscode IDE"></a>Vscode IDE</h2><p>安装以下 extension：</p><ol><li><code>Vue Language Features (Volar)</code> Volar – Vue3 支持</li><li><code>TypeScript Vue Plugin (Volar)</code> Volar – TS 支持</li><li>Auto Close Tag – 标签自动合并</li><li>Auto Rename Tag – 标签自动修改</li><li>EditorConfig for VSCode – editorconfig code rule</li><li>Prettier for VSCode – prettier <code>.prettierrc</code> code rule</li><li>ESLint for VSCode – ESLint VSC 支持，需要安装 ESLint package</li></ol><h2 id="Create-Vite-Framework"><a href="#Create-Vite-Framework" class="headerlink" title="Create Vite Framework"></a>Create Vite Framework</h2><p>选择 ts vue3 技术栈</p><pre><code class="hljs shell">pnpm create vite@latestpnpm installpnpm install -D typescript ts-nodepnpm install -D @types/node</code></pre><h2 id="Set-vite-config-ts-tsconfig-json"><a href="#Set-vite-config-ts-tsconfig-json" class="headerlink" title="Set vite.config.ts&#x2F;tsconfig.json"></a>Set vite.config.ts&#x2F;tsconfig.json</h2><h3 id="Path-alias-路径别名"><a href="#Path-alias-路径别名" class="headerlink" title="Path alias 路径别名"></a>Path alias 路径别名</h3><p>vite.config.ts：</p><p>reference: <a href="https://stackoverflow.com/questions/66043612/vue3-vite-project-alias-src-to-not-working">javascript - `Vue3 - Vite` project alias src to @ not working - Stack Overflow</a></p><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<span class="hljs-keyword">const</span> pathSrc = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src&quot;</span>);<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;  <span class="hljs-comment">// …</span>  <span class="hljs-attr">resolve</span>: &#123;    <span class="hljs-attr">alias</span>: &#123;      <span class="hljs-string">&quot;@&quot;</span>: pathSrc, <span class="hljs-comment">// 源码根目录</span>    &#125;,  &#125;,  <span class="hljs-comment">// …</span>&#125;);</code></pre><h3 id="tsconfig-json-TS-配置"><a href="#tsconfig-json-TS-配置" class="headerlink" title="tsconfig.json TS 配置"></a>tsconfig.json TS 配置</h3><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-comment">// …</span>    <span class="hljs-comment">// path alias</span>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span>    <span class="hljs-punctuation">&#125;</span>    <span class="hljs-comment">// …</span>  <span class="hljs-punctuation">&#125;</span>  <span class="hljs-comment">// …</span><span class="hljs-punctuation">&#125;</span></code></pre><h2 id="Code-rule-代码规范"><a href="#Code-rule-代码规范" class="headerlink" title="Code rule 代码规范"></a>Code rule 代码规范</h2><p>规范先行：<a href="https://blog.csdn.net/u013737132/article/details/130190788">【vue3-element-admin】ESLint+Prettier+Stylelint+EditorConfig 约束和统一前端代码规范_有来技术的博客-CSDN 博客</a></p><h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p><code>.editorconfig</code>：这个文件的作用是强制编辑器以该配置来进行编码，比如缩进统一为空格而不是 Tab ，每次缩进都是 2 个空格而不是 4 个等等。</p><p>VSCode 需要安装  <a href="https://vue3.chengpeiquan.com/upgrade.html#editorconfig-for-vs-code">EditorConfig for VSCode 扩展</a> 。</p><pre><code class="hljs ini"><span class="hljs-comment"># http://editorconfig.org</span><span class="hljs-attr">root</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># 表示所有文件适用</span><span class="hljs-section">[*]</span><span class="hljs-attr">charset</span> = utf-<span class="hljs-number">8</span> <span class="hljs-comment"># 设置文件字符集为 utf-8</span><span class="hljs-attr">end_of_line</span> = lf <span class="hljs-comment"># 控制换行类型(lf | cr | crlf)</span><span class="hljs-attr">indent_size</span> = <span class="hljs-number">2</span> <span class="hljs-comment"># 缩进空格数</span><span class="hljs-attr">indent_style</span> = space <span class="hljs-comment"># 缩进风格（tab | space）</span><span class="hljs-attr">insert_final_newline</span> = <span class="hljs-literal">true</span> <span class="hljs-comment"># 始终在文件末尾插入一个新行</span><span class="hljs-attr">max_line_length</span> = <span class="hljs-number">60</span> <span class="hljs-comment"># 一行最大数</span><span class="hljs-comment"># 表示仅 md 文件适用以下规则</span><span class="hljs-section">[*.md]</span><span class="hljs-attr">max_line_length</span> = <span class="hljs-literal">off</span> <span class="hljs-comment"># 关闭最大行长度限制</span><span class="hljs-attr">trim_trailing_whitespace</span> = <span class="hljs-literal">false</span> <span class="hljs-comment"># 关闭末尾空格修剪</span></code></pre><h3 id="Prettier-英-‘prɪtɪ-漂亮"><a href="#Prettier-英-‘prɪtɪ-漂亮" class="headerlink" title="Prettier [英 &#x2F;‘prɪtɪ&#x2F; 漂亮]"></a>Prettier [英 &#x2F;‘prɪtɪ&#x2F; 漂亮]</h3><p><code>.prettierrc</code></p><p>配合 VSCode 的  <a href="https://vue3.chengpeiquan.com/upgrade.html#vscode-prettier">VSCode Prettier</a>  扩展，可以在编辑器里使用该规则格式化文件。</p><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;printWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;tabWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span></code></pre><h3 id="ESLint-MAIN"><a href="#ESLint-MAIN" class="headerlink" title="ESLint (MAIN)"></a>ESLint (MAIN)</h3><p><a href="https://github.com/eslint/eslint">ESLint</a>  是一个查找 JavaScript &#x2F; TypeScript 代码问题并提供修复建议的工具，换句话说就是可以约束的代码不会写出一堆 BUG ，它是代码健壮性的重要保障。</p><p>这里以一个 Vite + TypeScript + <a href="https://vue3.chengpeiquan.com/upgrade.html#prettier">Prettier</a>  的 Vue 3 项目为例，在项目根目录下创建一个名为  <code>.eslintrc.js</code>  文件，写入以下内容：</p><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">env</span>: &#123;    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,  &#125;,  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span>, <span class="hljs-string">&quot;eslint:recommended&quot;</span>, <span class="hljs-string">&quot;prettier&quot;</span>],  <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;vue-eslint-parser&quot;</span>,  <span class="hljs-attr">parserOptions</span>: &#123;    <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;@typescript-eslint/parser&quot;</span>,    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-number">2020</span>,    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>,  &#125;,  <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&quot;@typescript-eslint&quot;</span>, <span class="hljs-string">&quot;prettier&quot;</span>],  <span class="hljs-attr">rules</span>: &#123;    <span class="hljs-string">&quot;no-console&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;warn&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;no-debugger&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;warn&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>,    <span class="hljs-string">&quot;prettier/prettier&quot;</span>: <span class="hljs-string">&quot;warn&quot;</span>,    <span class="hljs-string">&quot;vue/multi-word-component-names&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,  &#125;,  <span class="hljs-attr">globals</span>: &#123;    <span class="hljs-attr">defineProps</span>: <span class="hljs-string">&quot;readonly&quot;</span>,    <span class="hljs-attr">defineEmits</span>: <span class="hljs-string">&quot;readonly&quot;</span>,    <span class="hljs-attr">defineExpose</span>: <span class="hljs-string">&quot;readonly&quot;</span>,    <span class="hljs-attr">withDefaults</span>: <span class="hljs-string">&quot;readonly&quot;</span>,  &#125;,&#125;;</code></pre><p>pnpm 安装对应的依赖 dependents：</p><pre><code class="hljs shell">pnpm install -D eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser prettier</code></pre><p>排除检查：<code>.eslintignore</code></p><pre><code class="hljs shell">dist/*</code></pre><h2 id="Auto-import-自动导入"><a href="#Auto-import-自动导入" class="headerlink" title="Auto import 自动导入"></a>Auto import 自动导入</h2><h3 id="Install-Module"><a href="#Install-Module" class="headerlink" title="Install Module"></a>Install Module</h3><pre><code class="hljs shell">pnpm install -D unplugin-auto-import unplugin-vue-components</code></pre><h3 id="Modify-config-file"><a href="#Modify-config-file" class="headerlink" title="Modify config file"></a>Modify config file</h3><p><code>vite.config.ts</code>：</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-auto-import/vite&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-vue-components/vite&quot;</span>;<span class="hljs-attr">plugins</span>: [  <span class="hljs-title class_">AutoImport</span>(&#123;    <span class="hljs-comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span>    <span class="hljs-attr">imports</span>: [<span class="hljs-string">&quot;vue&quot;</span>],    <span class="hljs-attr">eslintrc</span>: &#123;      <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动生成 eslint 规则，建议生成之后设置 false</span>      <span class="hljs-attr">filepath</span>: <span class="hljs-string">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class="hljs-comment">// 指定自动导入函数 eslint 规则的文件</span>    &#125;,    <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;auto-imports.d.ts&quot;</span>), <span class="hljs-comment">// 指定自动导入函数TS类型声明文件路径</span>  &#125;),  <span class="hljs-title class_">Components</span>(&#123;    <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;components.d.ts&quot;</span>), <span class="hljs-comment">// 指定自动导入组件TS类型声明文件路径</span>  &#125;),];</code></pre><p><code>.eslintrc.cjs</code></p><pre><code class="hljs json"><span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>    <span class="hljs-string">&quot;./.eslintrc-auto-import.json&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span></code></pre><p><code>tsconfig.json</code></p><pre><code class="hljs shell">&#123;  &quot;include&quot;: [&quot;src/**/*.d.ts&quot;]&#125;</code></pre><h2 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h2><blockquote><p>一款 CSS 预处理语言，SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。</p></blockquote><pre><code class="hljs shell">pnpm i -D sass</code></pre><h2 id="Environment-variate"><a href="#Environment-variate" class="headerlink" title="Environment variate"></a>Environment variate</h2><p>项目根目录新建  <code>.env.development</code> 、<code>.env.production</code></p><ul><li>开发环境变量配置：.env.development</li></ul><pre><code class="hljs js"># 变量必须以 <span class="hljs-variable constant_">VITE_</span> 为前缀才能暴露给外部读取 <span class="hljs-variable constant_">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;vue3-element-admin&#x27;</span><span class="hljs-variable constant_">VITE_APP_PORT</span> = <span class="hljs-number">3000</span><span class="hljs-variable constant_">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/dev-api&#x27;</span></code></pre><ul><li>生产环境变量配置：.env.production</li></ul><pre><code class="hljs properties"><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;vue3-element-admin&#x27;</span><span class="hljs-attr">VITE_APP_PORT</span> = <span class="hljs-string">3000</span><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/prod-api&#x27;</span></code></pre><p><strong>环境变量智能提示</strong></p><p>新建 <code>src/types/env.d.ts</code> 文件存放环境变量 TS 类型声明。</p><pre><code class="hljs js"><span class="hljs-comment">// src/types/env.d.ts</span>interface <span class="hljs-title class_">ImportMetaEnv</span> &#123;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 应用标题</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">VITE_APP_TITLE</span>: string;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 应用端口</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">VITE_APP_PORT</span>: number;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * API基础路径(反向代理)</span><span class="hljs-comment">   */</span>  <span class="hljs-attr">VITE_APP_BASE_API</span>: string;&#125;interface <span class="hljs-title class_">ImportMeta</span> &#123;  readonly <span class="hljs-attr">env</span>: <span class="hljs-title class_">ImportMetaEnv</span>;&#125;</code></pre><h2 id="Vue3-router-路由"><a href="#Vue3-router-路由" class="headerlink" title="Vue3-router 路由"></a>Vue3-router 路由</h2><p>reference: <a href="https://v3.router.vuejs.org/zh/installation.html">安装 | Vue Router</a></p><p>install：</p><pre><code class="hljs shell">pnpm install vue-router</code></pre><p>修改 main.ts 文件：</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);app.<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</code></pre><h3 id="Import-导入"><a href="#Import-导入" class="headerlink" title="Import 导入"></a>Import 导入</h3><p>建立 src&#x2F;router 目录，放 index.ts(入口文件) routes.ts (路由文件)。</p><p>src&#x2F;router&#x2F;index.ts</p><pre><code class="hljs js"><span class="hljs-comment">// 路由导入</span><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes&#x27;</span><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),  routes,&#125;)<span class="hljs-comment">// 路由守卫/钩子 hook</span><span class="hljs-comment">// 全局前置守卫 / 路由拦截</span>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; title &#125; = to.<span class="hljs-property">meta</span>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = (title <span class="hljs-keyword">as</span> string) || <span class="hljs-string">&#x27;默认标题&#x27;</span>  <span class="hljs-comment">// 判断登陆</span>  <span class="hljs-comment">// const &#123; isNoLogin &#125; = to.meta</span>  <span class="hljs-comment">// if (!isNoLogin) return &#x27;/login&#x27;</span>&#125;)<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router</code></pre><p>src&#x2F;router&#x2F;routes.ts</p><pre><code class="hljs js"><span class="hljs-comment">// src/router/routes.ts 路由定义</span><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<span class="hljs-comment">// define routes</span><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [  &#123;    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span>,    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/App.vue&quot;</span>),    <span class="hljs-attr">meta</span>: &#123;      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;main page&quot;</span>,    &#125;,  &#125;,  &#123;    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;404&quot;</span>,    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/404.vue&quot;</span>),  &#125;,];<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;</code></pre><h2 id="Pinia-全局状态管理"><a href="#Pinia-全局状态管理" class="headerlink" title="Pinia 全局状态管理"></a>Pinia 全局状态管理</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">需要 <span class="hljs-built_in">cd</span> 到的项目目录下</span>pnpm install pinia</code></pre><p>src&#x2F;main.ts</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>()).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</code></pre><h3 id="Stores-Folder"><a href="#Stores-Folder" class="headerlink" title="Stores Folder"></a>Stores Folder</h3><p>src&#x2F;stores&#x2F;index.ts 使用 <code>storeToRefs</code> 将 store 变为响应式，只需要导出文件的 config 即可。</p><pre><code class="hljs js"><span class="hljs-comment">// src/stores/index.ts</span><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">return</span> &#123;      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World Pinia Store&#x27;</span>,      <span class="hljs-attr">randomMessages</span>: <span class="language-xml">&lt;string[]&gt;[],</span><span class="language-xml">    &#125;</span><span class="language-xml">  &#125;,</span><span class="language-xml">&#125;)</span><span class="language-xml"></span><span class="language-xml">export const useConfig = defineStore(&#x27;config&#x27;, &#123;</span><span class="language-xml">  state: () =&gt; &#123;</span><span class="language-xml">    return &#123;</span><span class="language-xml">      debug: false,</span><span class="language-xml">      autoRefresh: false,</span><span class="language-xml">      autoRefreshInterval: 2000,</span><span class="language-xml">    &#125;</span><span class="language-xml">  &#125;,</span><span class="language-xml">&#125;)</span><span class="language-xml"></span><span class="language-xml">export const config = storeToRefs(useConfig())</span><span class="language-xml"></span></code></pre><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h2><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><pre><code class="hljs shell">pnpm install element-plus</code></pre><p>按需要引入，安装在开发环境中：</p><pre><code class="hljs shell">pnpm install -D unplugin-vue-components unplugin-auto-import unplugin-icons</code></pre><p>修改 <code>vite.config.js</code>：</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<span class="hljs-keyword">const</span> pathSrc = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src&quot;</span>);<span class="hljs-comment">// Auto import</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-auto-import/vite&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-vue-components/vite&quot;</span>;<span class="hljs-comment">// Element UI</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-vue-components/resolvers&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">IconsResolver</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-icons/resolver&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Icons</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-icons/vite&quot;</span>;<span class="hljs-comment">// https://vitejs.dev/config/</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;  <span class="hljs-attr">plugins</span>: [    <span class="hljs-title function_">vue</span>(),    <span class="hljs-title class_">AutoImport</span>(&#123;      <span class="hljs-comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span>      <span class="hljs-attr">imports</span>: [<span class="hljs-string">&quot;vue&quot;</span>],      <span class="hljs-attr">eslintrc</span>: &#123;        <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动生成 eslint 规则，建议生成之后设置 false</span>        <span class="hljs-attr">filepath</span>: <span class="hljs-string">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class="hljs-comment">// 指定自动导入函数 eslint 规则的文件</span>      &#125;,      <span class="hljs-comment">// 指定自动导入函数TS类型声明文件路径</span>      <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;auto-imports.d.ts&quot;</span>),      <span class="hljs-attr">resolvers</span>: [        <span class="hljs-title class_">ElementPlusResolver</span>(), <span class="hljs-comment">// element func</span>        <span class="hljs-title class_">IconsResolver</span>(&#123;&#125;), <span class="hljs-comment">// element Icon</span>      ],      <span class="hljs-attr">vueTemplate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 在 vue 模板中自动导入</span>    &#125;),    <span class="hljs-title class_">Components</span>(&#123;      <span class="hljs-attr">dts</span>: path.<span class="hljs-title function_">resolve</span>(pathSrc, <span class="hljs-string">&quot;types&quot;</span>, <span class="hljs-string">&quot;components.d.ts&quot;</span>), <span class="hljs-comment">// 指定自动导入组件TS类型声明文件路径</span>      <span class="hljs-attr">resolvers</span>: [        <span class="hljs-title class_">ElementPlusResolver</span>(),        <span class="hljs-title class_">IconsResolver</span>(&#123;          <span class="hljs-attr">enabledCollections</span>: [<span class="hljs-string">&quot;ep&quot;</span>],        &#125;),        <span class="hljs-comment">// 自动安装图标库</span>      ],    &#125;),    <span class="hljs-title class_">Icons</span>(&#123; <span class="hljs-attr">autoInstall</span>: <span class="hljs-literal">true</span> &#125;),  ],  <span class="hljs-attr">resolve</span>: &#123;    <span class="hljs-attr">alias</span>: &#123;      <span class="hljs-string">&quot;@&quot;</span>: pathSrc,    &#125;,  &#125;,&#125;);</code></pre><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p>src&#x2F;main.ts</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;element-plus/dist/index.css&quot;</span>;<span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>()).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</code></pre><h3 id="封装一个-Element-UI-的-notice"><a href="#封装一个-Element-UI-的-notice" class="headerlink" title="封装一个 Element UI 的 notice"></a>封装一个 Element UI 的 notice</h3><p>src&#x2F;utils&#x2F;notice.ts</p><pre><code class="hljs js"><span class="hljs-comment">// src/plugin/notice.ts 系统级提醒</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElNotification</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><span class="hljs-keyword">import</span> &#123;  <span class="hljs-title class_">NotificationParams</span>,  <span class="hljs-title class_">MessageParams</span>,&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><span class="hljs-keyword">export</span> enum <span class="hljs-title class_">NoticeType</span> &#123;  <span class="hljs-variable constant_">SUCCESS</span> = <span class="hljs-string">&#x27;success&#x27;</span>,  <span class="hljs-variable constant_">WARNING</span> = <span class="hljs-string">&#x27;warning&#x27;</span>,  <span class="hljs-variable constant_">INFO</span> = <span class="hljs-string">&#x27;info&#x27;</span>,  <span class="hljs-variable constant_">ERROR</span> = <span class="hljs-string">&#x27;error&#x27;</span>,&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useNotice</span> = (<span class="hljs-params"></span><span class="hljs-params">  title: string,</span><span class="hljs-params">  content: string,</span><span class="hljs-params">  type: NoticeType | string = NoticeType.INFO,</span><span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-title class_">ElNotification</span>(&#123;    <span class="hljs-attr">title</span>: title,    <span class="hljs-attr">message</span>: content,    <span class="hljs-attr">type</span>: type,    <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,  &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">NotificationParams</span>)&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useMsg</span> = (<span class="hljs-params"></span><span class="hljs-params">  content: string,</span><span class="hljs-params">  type: NoticeType | string = NoticeType.INFO,</span><span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-title class_">ElMessage</span>(&#123;    <span class="hljs-attr">showClose</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">message</span>: content,    <span class="hljs-attr">type</span>: type,    <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,  &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">MessageParams</span>)&#125;</code></pre><h2 id="Axois-请求库"><a href="#Axois-请求库" class="headerlink" title="Axois 请求库"></a>Axois 请求库</h2><blockquote><p>Axios 基于 promise 可以用于浏览器和 node.js 的网络请求库</p></blockquote><h3 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h3><pre><code class="hljs plaintext">pnpm install axios</code></pre><h3 id="Axios-工具类封装"><a href="#Axios-工具类封装" class="headerlink" title="Axios 工具类封装"></a>Axios 工具类封装</h3><p><code>src/utils/request.js</code></p><p>初始化 axios instance 实例，包含异常处理等：</p><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AxiosResponse</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NoticeType</span>, useNotice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./notice&quot;</span>;<span class="hljs-keyword">import</span> &#123; config &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores&quot;</span>;<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InternalAxiosRequestConfig</span>, <span class="hljs-title class_">AxiosError</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> request = axios.<span class="hljs-title function_">create</span>(&#123;  <span class="hljs-attr">baseURL</span>: <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">VITE_API_URL</span>,  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,&#125;);<span class="hljs-comment">// 添加请求拦截器</span>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(  <span class="hljs-function">(<span class="hljs-params">axiosConfig: InternalAxiosRequestConfig</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 在发送请求之前做些什么</span>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">debug</span>.<span class="hljs-property">value</span>) &#123;      <span class="hljs-title function_">useNotice</span>(<span class="hljs-string">&quot;Response&quot;</span>, <span class="hljs-string">`url:<span class="hljs-subst">$&#123;axiosConfig.url&#125;</span>`</span>, <span class="hljs-title class_">NoticeType</span>.<span class="hljs-property">INFO</span>);    &#125;    <span class="hljs-keyword">return</span> axiosConfig;  &#125;,  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 对请求错误做些什么</span>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);  &#125;);<span class="hljs-comment">// 添加响应拦截器</span>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(  <span class="hljs-function">(<span class="hljs-params">response: AxiosResponse</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 对响应数据做点什么</span>    <span class="hljs-comment">// 成功响应数据</span>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">debug</span>.<span class="hljs-property">value</span>) &#123;      <span class="hljs-title function_">useNotice</span>(<span class="hljs-string">&quot;Response&quot;</span>, <span class="hljs-string">`url:<span class="hljs-subst">$&#123;response.config.url&#125;</span>`</span>, <span class="hljs-title class_">NoticeType</span>.<span class="hljs-property">SUCCESS</span>);    &#125;    <span class="hljs-keyword">return</span> response;  &#125;,  <span class="hljs-function">(<span class="hljs-params">error: AxiosError</span>) =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>) &#123;      <span class="hljs-comment">// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围</span>      <span class="hljs-title function_">useNotice</span>(        <span class="hljs-string">`Response ERROR <span class="hljs-subst">$&#123;error.code&#125;</span>`</span>,        <span class="hljs-string">`<span class="hljs-subst">$&#123;error.config?.url&#125;</span>\n<span class="hljs-subst">$&#123;error.response.data&#125;</span>`</span>,        <span class="hljs-title class_">NoticeType</span>.<span class="hljs-property">WARNING</span>      );    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (error.<span class="hljs-property">request</span>) &#123;      <span class="hljs-comment">// 请求已经成功发起，但没有收到响应</span>      <span class="hljs-comment">// `error.request` 在浏览器中是 XMLHttpRequest 的实例，</span>      <span class="hljs-comment">// 而在node.js中是 http.ClientRequest 的实例</span>      <span class="hljs-title function_">useNotice</span>(        <span class="hljs-string">`Response ERROR`</span>,        <span class="hljs-string">`<span class="hljs-subst">$&#123;error.config?.url&#125;</span>\n<span class="hljs-subst">$&#123;error&#125;</span>`</span>,        <span class="hljs-title class_">NoticeType</span>.<span class="hljs-property">ERROR</span>      );    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-title function_">useNotice</span>(        <span class="hljs-string">`Response ERROR`</span>,        <span class="hljs-string">`<span class="hljs-subst">$&#123;error.config?.url&#125;</span>\nunknow http request error:<span class="hljs-subst">$&#123;error&#125;</span>`</span>,        <span class="hljs-title class_">NoticeType</span>.<span class="hljs-property">ERROR</span>      );    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);  &#125;);</code></pre><p>高级封装：</p><pre><code class="hljs js"><span class="hljs-comment">//  src/utils/request.ts</span><span class="hljs-keyword">import</span> axios, &#123; <span class="hljs-title class_">InternalAxiosRequestConfig</span>, <span class="hljs-title class_">AxiosResponse</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<span class="hljs-keyword">import</span> &#123; useUserStoreHook &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/user&quot;</span>;<span class="hljs-comment">// 创建 axios 实例</span><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;  <span class="hljs-attr">baseURL</span>: <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">VITE_APP_BASE_API</span>,  <span class="hljs-attr">timeout</span>: <span class="hljs-number">50000</span>,  <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span> &#125;,&#125;);<span class="hljs-comment">// 请求拦截器</span>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(  <span class="hljs-function">(<span class="hljs-params">config: InternalAxiosRequestConfig</span>) =&gt;</span> &#123;    <span class="hljs-comment">// 使用 Token</span>    <span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStoreHook</span>();    <span class="hljs-keyword">if</span> (userStore.<span class="hljs-property">token</span>) &#123;      config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = userStore.<span class="hljs-property">token</span>;    &#125;    <span class="hljs-keyword">return</span> config;  &#125;,  <span class="hljs-function">(<span class="hljs-params">error: any</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);  &#125;);<span class="hljs-comment">// 响应拦截器</span>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(  <span class="hljs-function">(<span class="hljs-params">response: AxiosResponse</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> &#123; code, msg &#125; = response.<span class="hljs-property">data</span>;    <span class="hljs-comment">// 登录成功</span>    <span class="hljs-keyword">if</span> (code === <span class="hljs-string">&quot;00000&quot;</span>) &#123;      <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;    &#125;    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(msg || <span class="hljs-string">&quot;系统出错&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg || <span class="hljs-string">&quot;Error&quot;</span>));  &#125;,  <span class="hljs-function">(<span class="hljs-params">error: AxiosError</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>) &#123;      <span class="hljs-keyword">const</span> &#123; code, msg &#125; = error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>;      <span class="hljs-comment">// token 过期，跳转登录页</span>      <span class="hljs-keyword">if</span> (code === <span class="hljs-string">&quot;A0230&quot;</span>) &#123;        <span class="hljs-title class_">ElMessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;当前页面已失效，请重新登录&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, &#123;          <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定&quot;</span>,          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;warning&quot;</span>,        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;          <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>(); <span class="hljs-comment">// @vueuse/core 自动导入</span>          <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;/&quot;</span>;        &#125;);      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(msg || <span class="hljs-string">&quot;系统出错&quot;</span>);      &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error.<span class="hljs-property">message</span>);  &#125;);<span class="hljs-comment">// 导出 axios 实例</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;</code></pre><p>src&#x2F;plugins&#x2F;api.ts 具体请求：</p><pre><code class="hljs js"><span class="hljs-comment">// src/plugins/api.ts</span><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useRequest&#x27;</span><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ChatInfo</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/schema&#x27;</span><span class="hljs-comment">// get chat infomation /chat/all/</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getChats</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">ChatInfo</span>&gt; | <span class="hljs-keyword">void</span>&gt; &#123;  <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/chat/all/&#x27;</span>)  <span class="hljs-keyword">if</span> (resp.<span class="hljs-property">data</span>) &#123;    <span class="hljs-keyword">return</span> resp.<span class="hljs-property">data</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">ChatInfo</span>&gt;  &#125;&#125;</code></pre><h2 id="Vueuse"><a href="#Vueuse" class="headerlink" title="Vueuse"></a>Vueuse</h2><p><a href="https://www.vueusejs.com/guide/">起步 | VueUse 中文文档</a></p><h3 id="Install-3"><a href="#Install-3" class="headerlink" title="Install"></a>Install</h3><pre><code class="hljs shell">pnpm install @vueuse/core</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>CSDN 博文：<a href="https://blog.csdn.net/u013737132/article/details/130191394">Vue3.3 + Vite4.3 + TypeScript5+ Element-Plus：从零到一构建企业级后台管理系统（前后端开源）</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-项目脚手架搭建和运行指北&quot;&gt;&lt;a href=&quot;#Vue3-项目脚手架搭建和运行指北&quot; class=&quot;headerlink&quot; title=&quot;Vue3 项目脚手架搭建和运行指北&quot;&gt;&lt;/a&gt;Vue3 项目脚手架搭建和运行指北&lt;/h1&gt;&lt;p&gt;本指南带你从 0 到</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.whaleluo.top/categories/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://www.whaleluo.top/tags/JavaScript/"/>
    
    <category term="JS" scheme="https://www.whaleluo.top/tags/JS/"/>
    
    <category term="前端" scheme="https://www.whaleluo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://www.whaleluo.top/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://www.whaleluo.top/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>RFS 安卓模拟飞行 Tutorial 教程</title>
    <link href="https://www.whaleluo.top/rortos-flight-simulation-tutorial/"/>
    <id>https://www.whaleluo.top/rortos-flight-simulation-tutorial/</id>
    <published>2023-10-01T12:57:46.000Z</published>
    <updated>2023-10-01T12:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RFS-安卓模拟飞行-Tutorial-教程"><a href="#RFS-安卓模拟飞行-Tutorial-教程" class="headerlink" title="RFS 安卓模拟飞行 Tutorial 教程"></a>RFS 安卓模拟飞行 Tutorial 教程</h1><p>Rortos-Flight-Simulation  <code>[/ˌsɪm.jəˈleɪ.ʃən/ n. 模拟]</code> -Tutorial</p><p>RFS 是一款运行在安卓手机端的模拟飞行应用，可能是安卓上最好的呢，<del>适合买不起高配置的显卡和电脑的手机党使用。</del></p><h2 id="Install-配置"><a href="#Install-配置" class="headerlink" title="Install 配置"></a>Install 配置</h2><ol><li>在此链接下载正版的 rfs，不要打开 <a href="https://www.123pan.com/s/qDuLVv-wMFed.html">123pan.com&#x2F;s&#x2F;qDuLVv-wMFed.html</a></li><li>安装通用 Google Framework <a href="https://m.ourplay.net/">https://m.ourplay.net/</a> 之后下载这个在这里边导入刚刚下载的本体 ，会显示更新 更新完成之后登录 Google Account。</li><li>登录之后在设置账户里点一下谷歌授权 就可以玩耍了</li></ol><h2 id="Translation-配置翻译"><a href="#Translation-配置翻译" class="headerlink" title="Translation 配置翻译"></a>Translation 配置翻译</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215584.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215584.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="地面服务系统"><a href="#地面服务系统" class="headerlink" title="地面服务系统"></a>地面服务系统</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215586.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215586.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="主警报系统"><a href="#主警报系统" class="headerlink" title="主警报系统"></a>主警报系统</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215587.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215587.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="地面装载"><a href="#地面装载" class="headerlink" title="地面装载"></a>地面装载</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215588.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215588.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="自动驾驶"><a href="#自动驾驶" class="headerlink" title="自动驾驶"></a>自动驾驶</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215589.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215589.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="地面绕机检查"><a href="#地面绕机检查" class="headerlink" title="地面绕机检查"></a>地面绕机检查</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215590.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215590.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="主系统"><a href="#主系统" class="headerlink" title="主系统"></a>主系统</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215591.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215591.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="飞行检查单"><a href="#飞行检查单" class="headerlink" title="飞行检查单"></a>飞行检查单</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215592.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215592.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p><h3 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215593.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215593.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="地面紧急服务"><a href="#地面紧急服务" class="headerlink" title="地面紧急服务"></a>地面紧急服务</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215594.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215594.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image">​</p><h3 id="燃料系统"><a href="#燃料系统" class="headerlink" title="燃料系统"></a>燃料系统</h3><p>​<img src="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215595.png&webp=true" class="lazy" data-srcset="https://api.whaleluo.top/onedrive/file/?path=/picstorage/blog/img/202306252215595.png&webp=true" srcset="https://api.whaleluo.top/onedrive/file/?path=/PicStorage/blog/loading.gif" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RFS-安卓模拟飞行-Tutorial-教程&quot;&gt;&lt;a href=&quot;#RFS-安卓模拟飞行-Tutorial-教程&quot; class=&quot;headerlink&quot; title=&quot;RFS 安卓模拟飞行 Tutorial 教程&quot;&gt;&lt;/a&gt;RFS 安卓模拟飞行 Tutorial </summary>
      
    
    
    
    <category term="Flight" scheme="https://www.whaleluo.top/categories/Flight/"/>
    
    
    <category term="飞行" scheme="https://www.whaleluo.top/tags/%E9%A3%9E%E8%A1%8C/"/>
    
    <category term="Flight" scheme="https://www.whaleluo.top/tags/Flight/"/>
    
    <category term="模拟飞行" scheme="https://www.whaleluo.top/tags/%E6%A8%A1%E6%8B%9F%E9%A3%9E%E8%A1%8C/"/>
    
    <category term="RFS" scheme="https://www.whaleluo.top/tags/RFS/"/>
    
    <category term="航空爱好" scheme="https://www.whaleluo.top/tags/%E8%88%AA%E7%A9%BA%E7%88%B1%E5%A5%BD/"/>
    
  </entry>
  
</feed>
